
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model JobArticle
 * 
 */
export type JobArticle = $Result.DefaultSelection<Prisma.$JobArticlePayload>
/**
 * Model JobArticleTranslation
 * 
 */
export type JobArticleTranslation = $Result.DefaultSelection<Prisma.$JobArticleTranslationPayload>
/**
 * Model NewsCategory
 * 
 */
export type NewsCategory = $Result.DefaultSelection<Prisma.$NewsCategoryPayload>
/**
 * Model NewsCategoryTranslation
 * 
 */
export type NewsCategoryTranslation = $Result.DefaultSelection<Prisma.$NewsCategoryTranslationPayload>
/**
 * Model SystemConfig
 * 
 */
export type SystemConfig = $Result.DefaultSelection<Prisma.$SystemConfigPayload>
/**
 * Model News
 * 
 */
export type News = $Result.DefaultSelection<Prisma.$NewsPayload>
/**
 * Model NewsTranslation
 * 
 */
export type NewsTranslation = $Result.DefaultSelection<Prisma.$NewsTranslationPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model ServiceTranslation
 * 
 */
export type ServiceTranslation = $Result.DefaultSelection<Prisma.$ServiceTranslationPayload>
/**
 * Model Container
 * 
 */
export type Container = $Result.DefaultSelection<Prisma.$ContainerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ArticleStatus: {
  draft: 'draft',
  published: 'published'
};

export type ArticleStatus = (typeof ArticleStatus)[keyof typeof ArticleStatus]


export const ImportExport: {
  IMPORT: 'IMPORT',
  EXPORT: 'EXPORT'
};

export type ImportExport = (typeof ImportExport)[keyof typeof ImportExport]

}

export type ArticleStatus = $Enums.ArticleStatus

export const ArticleStatus: typeof $Enums.ArticleStatus

export type ImportExport = $Enums.ImportExport

export const ImportExport: typeof $Enums.ImportExport

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.jobArticle`: Exposes CRUD operations for the **JobArticle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobArticles
    * const jobArticles = await prisma.jobArticle.findMany()
    * ```
    */
  get jobArticle(): Prisma.JobArticleDelegate<ExtArgs>;

  /**
   * `prisma.jobArticleTranslation`: Exposes CRUD operations for the **JobArticleTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobArticleTranslations
    * const jobArticleTranslations = await prisma.jobArticleTranslation.findMany()
    * ```
    */
  get jobArticleTranslation(): Prisma.JobArticleTranslationDelegate<ExtArgs>;

  /**
   * `prisma.newsCategory`: Exposes CRUD operations for the **NewsCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewsCategories
    * const newsCategories = await prisma.newsCategory.findMany()
    * ```
    */
  get newsCategory(): Prisma.NewsCategoryDelegate<ExtArgs>;

  /**
   * `prisma.newsCategoryTranslation`: Exposes CRUD operations for the **NewsCategoryTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewsCategoryTranslations
    * const newsCategoryTranslations = await prisma.newsCategoryTranslation.findMany()
    * ```
    */
  get newsCategoryTranslation(): Prisma.NewsCategoryTranslationDelegate<ExtArgs>;

  /**
   * `prisma.systemConfig`: Exposes CRUD operations for the **SystemConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemConfigs
    * const systemConfigs = await prisma.systemConfig.findMany()
    * ```
    */
  get systemConfig(): Prisma.SystemConfigDelegate<ExtArgs>;

  /**
   * `prisma.news`: Exposes CRUD operations for the **News** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more News
    * const news = await prisma.news.findMany()
    * ```
    */
  get news(): Prisma.NewsDelegate<ExtArgs>;

  /**
   * `prisma.newsTranslation`: Exposes CRUD operations for the **NewsTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewsTranslations
    * const newsTranslations = await prisma.newsTranslation.findMany()
    * ```
    */
  get newsTranslation(): Prisma.NewsTranslationDelegate<ExtArgs>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs>;

  /**
   * `prisma.serviceTranslation`: Exposes CRUD operations for the **ServiceTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceTranslations
    * const serviceTranslations = await prisma.serviceTranslation.findMany()
    * ```
    */
  get serviceTranslation(): Prisma.ServiceTranslationDelegate<ExtArgs>;

  /**
   * `prisma.container`: Exposes CRUD operations for the **Container** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Containers
    * const containers = await prisma.container.findMany()
    * ```
    */
  get container(): Prisma.ContainerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Role: 'Role',
    Permission: 'Permission',
    JobArticle: 'JobArticle',
    JobArticleTranslation: 'JobArticleTranslation',
    NewsCategory: 'NewsCategory',
    NewsCategoryTranslation: 'NewsCategoryTranslation',
    SystemConfig: 'SystemConfig',
    News: 'News',
    NewsTranslation: 'NewsTranslation',
    Service: 'Service',
    ServiceTranslation: 'ServiceTranslation',
    Container: 'Container'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "role" | "permission" | "jobArticle" | "jobArticleTranslation" | "newsCategory" | "newsCategoryTranslation" | "systemConfig" | "news" | "newsTranslation" | "service" | "serviceTranslation" | "container"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      JobArticle: {
        payload: Prisma.$JobArticlePayload<ExtArgs>
        fields: Prisma.JobArticleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobArticleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobArticleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticlePayload>
          }
          findFirst: {
            args: Prisma.JobArticleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobArticleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticlePayload>
          }
          findMany: {
            args: Prisma.JobArticleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticlePayload>[]
          }
          create: {
            args: Prisma.JobArticleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticlePayload>
          }
          createMany: {
            args: Prisma.JobArticleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.JobArticleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticlePayload>
          }
          update: {
            args: Prisma.JobArticleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticlePayload>
          }
          deleteMany: {
            args: Prisma.JobArticleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobArticleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobArticleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticlePayload>
          }
          aggregate: {
            args: Prisma.JobArticleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobArticle>
          }
          groupBy: {
            args: Prisma.JobArticleGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobArticleGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobArticleCountArgs<ExtArgs>
            result: $Utils.Optional<JobArticleCountAggregateOutputType> | number
          }
        }
      }
      JobArticleTranslation: {
        payload: Prisma.$JobArticleTranslationPayload<ExtArgs>
        fields: Prisma.JobArticleTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobArticleTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticleTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobArticleTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticleTranslationPayload>
          }
          findFirst: {
            args: Prisma.JobArticleTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticleTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobArticleTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticleTranslationPayload>
          }
          findMany: {
            args: Prisma.JobArticleTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticleTranslationPayload>[]
          }
          create: {
            args: Prisma.JobArticleTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticleTranslationPayload>
          }
          createMany: {
            args: Prisma.JobArticleTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.JobArticleTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticleTranslationPayload>
          }
          update: {
            args: Prisma.JobArticleTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticleTranslationPayload>
          }
          deleteMany: {
            args: Prisma.JobArticleTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobArticleTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobArticleTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobArticleTranslationPayload>
          }
          aggregate: {
            args: Prisma.JobArticleTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobArticleTranslation>
          }
          groupBy: {
            args: Prisma.JobArticleTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobArticleTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobArticleTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<JobArticleTranslationCountAggregateOutputType> | number
          }
        }
      }
      NewsCategory: {
        payload: Prisma.$NewsCategoryPayload<ExtArgs>
        fields: Prisma.NewsCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryPayload>
          }
          findFirst: {
            args: Prisma.NewsCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryPayload>
          }
          findMany: {
            args: Prisma.NewsCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryPayload>[]
          }
          create: {
            args: Prisma.NewsCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryPayload>
          }
          createMany: {
            args: Prisma.NewsCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NewsCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryPayload>
          }
          update: {
            args: Prisma.NewsCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryPayload>
          }
          deleteMany: {
            args: Prisma.NewsCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewsCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NewsCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryPayload>
          }
          aggregate: {
            args: Prisma.NewsCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNewsCategory>
          }
          groupBy: {
            args: Prisma.NewsCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<NewsCategoryCountAggregateOutputType> | number
          }
        }
      }
      NewsCategoryTranslation: {
        payload: Prisma.$NewsCategoryTranslationPayload<ExtArgs>
        fields: Prisma.NewsCategoryTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsCategoryTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsCategoryTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryTranslationPayload>
          }
          findFirst: {
            args: Prisma.NewsCategoryTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsCategoryTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryTranslationPayload>
          }
          findMany: {
            args: Prisma.NewsCategoryTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryTranslationPayload>[]
          }
          create: {
            args: Prisma.NewsCategoryTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryTranslationPayload>
          }
          createMany: {
            args: Prisma.NewsCategoryTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NewsCategoryTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryTranslationPayload>
          }
          update: {
            args: Prisma.NewsCategoryTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryTranslationPayload>
          }
          deleteMany: {
            args: Prisma.NewsCategoryTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewsCategoryTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NewsCategoryTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsCategoryTranslationPayload>
          }
          aggregate: {
            args: Prisma.NewsCategoryTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNewsCategoryTranslation>
          }
          groupBy: {
            args: Prisma.NewsCategoryTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsCategoryTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsCategoryTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<NewsCategoryTranslationCountAggregateOutputType> | number
          }
        }
      }
      SystemConfig: {
        payload: Prisma.$SystemConfigPayload<ExtArgs>
        fields: Prisma.SystemConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findFirst: {
            args: Prisma.SystemConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findMany: {
            args: Prisma.SystemConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          create: {
            args: Prisma.SystemConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          createMany: {
            args: Prisma.SystemConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SystemConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          update: {
            args: Prisma.SystemConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          deleteMany: {
            args: Prisma.SystemConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          aggregate: {
            args: Prisma.SystemConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemConfig>
          }
          groupBy: {
            args: Prisma.SystemConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigCountAggregateOutputType> | number
          }
        }
      }
      News: {
        payload: Prisma.$NewsPayload<ExtArgs>
        fields: Prisma.NewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          findFirst: {
            args: Prisma.NewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          findMany: {
            args: Prisma.NewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>[]
          }
          create: {
            args: Prisma.NewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          createMany: {
            args: Prisma.NewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          update: {
            args: Prisma.NewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          deleteMany: {
            args: Prisma.NewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          aggregate: {
            args: Prisma.NewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNews>
          }
          groupBy: {
            args: Prisma.NewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsCountArgs<ExtArgs>
            result: $Utils.Optional<NewsCountAggregateOutputType> | number
          }
        }
      }
      NewsTranslation: {
        payload: Prisma.$NewsTranslationPayload<ExtArgs>
        fields: Prisma.NewsTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsTranslationPayload>
          }
          findFirst: {
            args: Prisma.NewsTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsTranslationPayload>
          }
          findMany: {
            args: Prisma.NewsTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsTranslationPayload>[]
          }
          create: {
            args: Prisma.NewsTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsTranslationPayload>
          }
          createMany: {
            args: Prisma.NewsTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NewsTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsTranslationPayload>
          }
          update: {
            args: Prisma.NewsTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsTranslationPayload>
          }
          deleteMany: {
            args: Prisma.NewsTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewsTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NewsTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsTranslationPayload>
          }
          aggregate: {
            args: Prisma.NewsTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNewsTranslation>
          }
          groupBy: {
            args: Prisma.NewsTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<NewsTranslationCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      ServiceTranslation: {
        payload: Prisma.$ServiceTranslationPayload<ExtArgs>
        fields: Prisma.ServiceTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTranslationPayload>
          }
          findFirst: {
            args: Prisma.ServiceTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTranslationPayload>
          }
          findMany: {
            args: Prisma.ServiceTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTranslationPayload>[]
          }
          create: {
            args: Prisma.ServiceTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTranslationPayload>
          }
          createMany: {
            args: Prisma.ServiceTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ServiceTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTranslationPayload>
          }
          update: {
            args: Prisma.ServiceTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTranslationPayload>
          }
          deleteMany: {
            args: Prisma.ServiceTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ServiceTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceTranslationPayload>
          }
          aggregate: {
            args: Prisma.ServiceTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceTranslation>
          }
          groupBy: {
            args: Prisma.ServiceTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceTranslationCountAggregateOutputType> | number
          }
        }
      }
      Container: {
        payload: Prisma.$ContainerPayload<ExtArgs>
        fields: Prisma.ContainerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContainerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContainerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          findFirst: {
            args: Prisma.ContainerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContainerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          findMany: {
            args: Prisma.ContainerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>[]
          }
          create: {
            args: Prisma.ContainerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          createMany: {
            args: Prisma.ContainerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ContainerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          update: {
            args: Prisma.ContainerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          deleteMany: {
            args: Prisma.ContainerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContainerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContainerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContainerPayload>
          }
          aggregate: {
            args: Prisma.ContainerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContainer>
          }
          groupBy: {
            args: Prisma.ContainerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContainerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContainerCountArgs<ExtArgs>
            result: $Utils.Optional<ContainerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    job_articles: number
    News: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job_articles?: boolean | UserCountOutputTypeCountJob_articlesArgs
    News?: boolean | UserCountOutputTypeCountNewsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJob_articlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobArticleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
    permissions: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
    permissions?: boolean | RoleCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    roles: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | PermissionCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }


  /**
   * Count Type JobArticleCountOutputType
   */

  export type JobArticleCountOutputType = {
    translations: number
  }

  export type JobArticleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | JobArticleCountOutputTypeCountTranslationsArgs
  }

  // Custom InputTypes
  /**
   * JobArticleCountOutputType without action
   */
  export type JobArticleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleCountOutputType
     */
    select?: JobArticleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobArticleCountOutputType without action
   */
  export type JobArticleCountOutputTypeCountTranslationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobArticleTranslationWhereInput
  }


  /**
   * Count Type NewsCategoryCountOutputType
   */

  export type NewsCategoryCountOutputType = {
    News: number
    translations: number
  }

  export type NewsCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    News?: boolean | NewsCategoryCountOutputTypeCountNewsArgs
    translations?: boolean | NewsCategoryCountOutputTypeCountTranslationsArgs
  }

  // Custom InputTypes
  /**
   * NewsCategoryCountOutputType without action
   */
  export type NewsCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryCountOutputType
     */
    select?: NewsCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NewsCategoryCountOutputType without action
   */
  export type NewsCategoryCountOutputTypeCountNewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsWhereInput
  }

  /**
   * NewsCategoryCountOutputType without action
   */
  export type NewsCategoryCountOutputTypeCountTranslationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsCategoryTranslationWhereInput
  }


  /**
   * Count Type NewsCountOutputType
   */

  export type NewsCountOutputType = {
    NewsTranslation: number
  }

  export type NewsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    NewsTranslation?: boolean | NewsCountOutputTypeCountNewsTranslationArgs
  }

  // Custom InputTypes
  /**
   * NewsCountOutputType without action
   */
  export type NewsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCountOutputType
     */
    select?: NewsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NewsCountOutputType without action
   */
  export type NewsCountOutputTypeCountNewsTranslationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsTranslationWhereInput
  }


  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    ServiceTranslation: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceTranslation?: boolean | ServiceCountOutputTypeCountServiceTranslationArgs
  }

  // Custom InputTypes
  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountServiceTranslationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceTranslationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password_hash: string | null
    role_id: number | null
    avatar: string | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password_hash: string | null
    role_id: number | null
    avatar: string | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password_hash: number
    role_id: number
    avatar: number
    email: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password_hash?: true
    role_id?: true
    avatar?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password_hash?: true
    role_id?: true
    avatar?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password_hash?: true
    role_id?: true
    avatar?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    password_hash: string
    role_id: number
    avatar: string | null
    email: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password_hash?: boolean
    role_id?: boolean
    avatar?: boolean
    email?: boolean
    job_articles?: boolean | User$job_articlesArgs<ExtArgs>
    News?: boolean | User$NewsArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password_hash?: boolean
    role_id?: boolean
    avatar?: boolean
    email?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job_articles?: boolean | User$job_articlesArgs<ExtArgs>
    News?: boolean | User$NewsArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      job_articles: Prisma.$JobArticlePayload<ExtArgs>[]
      News: Prisma.$NewsPayload<ExtArgs>[]
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password_hash: string
      role_id: number
      avatar: string | null
      email: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job_articles<T extends User$job_articlesArgs<ExtArgs> = {}>(args?: Subset<T, User$job_articlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "findMany"> | Null>
    News<T extends User$NewsArgs<ExtArgs> = {}>(args?: Subset<T, User$NewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findMany"> | Null>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password_hash: FieldRef<"User", 'String'>
    readonly role_id: FieldRef<"User", 'Int'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.job_articles
   */
  export type User$job_articlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    where?: JobArticleWhereInput
    orderBy?: JobArticleOrderByWithRelationInput | JobArticleOrderByWithRelationInput[]
    cursor?: JobArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobArticleScalarFieldEnum | JobArticleScalarFieldEnum[]
  }

  /**
   * User.News
   */
  export type User$NewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    where?: NewsWhereInput
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    cursor?: NewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    name: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>


  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      permissions: Prisma.$PermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    permissions<T extends Role$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Role$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly name: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role.permissions
   */
  export type Role$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    cursor?: PermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type PermissionSumAggregateOutputType = {
    id: number | null
  }

  export type PermissionMinAggregateOutputType = {
    id: number | null
    action: string | null
    subject: string | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: number | null
    action: string | null
    subject: string | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    action: number
    subject: number
    _all: number
  }


  export type PermissionAvgAggregateInputType = {
    id?: true
  }

  export type PermissionSumAggregateInputType = {
    id?: true
  }

  export type PermissionMinAggregateInputType = {
    id?: true
    action?: true
    subject?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    action?: true
    subject?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    action?: true
    subject?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _avg?: PermissionAvgAggregateInputType
    _sum?: PermissionSumAggregateInputType
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: number
    action: string
    subject: string
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    subject?: boolean
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>


  export type PermissionSelectScalar = {
    id?: boolean
    action?: boolean
    subject?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      roles: Prisma.$RolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      action: string
      subject: string
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roles<T extends Permission$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'Int'>
    readonly action: FieldRef<"Permission", 'String'>
    readonly subject: FieldRef<"Permission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission.roles
   */
  export type Permission$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model JobArticle
   */

  export type AggregateJobArticle = {
    _count: JobArticleCountAggregateOutputType | null
    _avg: JobArticleAvgAggregateOutputType | null
    _sum: JobArticleSumAggregateOutputType | null
    _min: JobArticleMinAggregateOutputType | null
    _max: JobArticleMaxAggregateOutputType | null
  }

  export type JobArticleAvgAggregateOutputType = {
    id: number | null
    author_id: number | null
  }

  export type JobArticleSumAggregateOutputType = {
    id: number | null
    author_id: number | null
  }

  export type JobArticleMinAggregateOutputType = {
    id: number | null
    author_id: number | null
    status: $Enums.ArticleStatus | null
    published_at: Date | null
    created_at: Date | null
    job_deadline: Date | null
    primary_image: string | null
    updated_at: Date | null
  }

  export type JobArticleMaxAggregateOutputType = {
    id: number | null
    author_id: number | null
    status: $Enums.ArticleStatus | null
    published_at: Date | null
    created_at: Date | null
    job_deadline: Date | null
    primary_image: string | null
    updated_at: Date | null
  }

  export type JobArticleCountAggregateOutputType = {
    id: number
    author_id: number
    status: number
    published_at: number
    created_at: number
    job_deadline: number
    primary_image: number
    updated_at: number
    _all: number
  }


  export type JobArticleAvgAggregateInputType = {
    id?: true
    author_id?: true
  }

  export type JobArticleSumAggregateInputType = {
    id?: true
    author_id?: true
  }

  export type JobArticleMinAggregateInputType = {
    id?: true
    author_id?: true
    status?: true
    published_at?: true
    created_at?: true
    job_deadline?: true
    primary_image?: true
    updated_at?: true
  }

  export type JobArticleMaxAggregateInputType = {
    id?: true
    author_id?: true
    status?: true
    published_at?: true
    created_at?: true
    job_deadline?: true
    primary_image?: true
    updated_at?: true
  }

  export type JobArticleCountAggregateInputType = {
    id?: true
    author_id?: true
    status?: true
    published_at?: true
    created_at?: true
    job_deadline?: true
    primary_image?: true
    updated_at?: true
    _all?: true
  }

  export type JobArticleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobArticle to aggregate.
     */
    where?: JobArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobArticles to fetch.
     */
    orderBy?: JobArticleOrderByWithRelationInput | JobArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobArticles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobArticles
    **/
    _count?: true | JobArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobArticleMaxAggregateInputType
  }

  export type GetJobArticleAggregateType<T extends JobArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateJobArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobArticle[P]>
      : GetScalarType<T[P], AggregateJobArticle[P]>
  }




  export type JobArticleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobArticleWhereInput
    orderBy?: JobArticleOrderByWithAggregationInput | JobArticleOrderByWithAggregationInput[]
    by: JobArticleScalarFieldEnum[] | JobArticleScalarFieldEnum
    having?: JobArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobArticleCountAggregateInputType | true
    _avg?: JobArticleAvgAggregateInputType
    _sum?: JobArticleSumAggregateInputType
    _min?: JobArticleMinAggregateInputType
    _max?: JobArticleMaxAggregateInputType
  }

  export type JobArticleGroupByOutputType = {
    id: number
    author_id: number
    status: $Enums.ArticleStatus
    published_at: Date | null
    created_at: Date
    job_deadline: Date
    primary_image: string
    updated_at: Date
    _count: JobArticleCountAggregateOutputType | null
    _avg: JobArticleAvgAggregateOutputType | null
    _sum: JobArticleSumAggregateOutputType | null
    _min: JobArticleMinAggregateOutputType | null
    _max: JobArticleMaxAggregateOutputType | null
  }

  type GetJobArticleGroupByPayload<T extends JobArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobArticleGroupByOutputType[P]>
            : GetScalarType<T[P], JobArticleGroupByOutputType[P]>
        }
      >
    >


  export type JobArticleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    author_id?: boolean
    status?: boolean
    published_at?: boolean
    created_at?: boolean
    job_deadline?: boolean
    primary_image?: boolean
    updated_at?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    translations?: boolean | JobArticle$translationsArgs<ExtArgs>
    _count?: boolean | JobArticleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobArticle"]>


  export type JobArticleSelectScalar = {
    id?: boolean
    author_id?: boolean
    status?: boolean
    published_at?: boolean
    created_at?: boolean
    job_deadline?: boolean
    primary_image?: boolean
    updated_at?: boolean
  }

  export type JobArticleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    translations?: boolean | JobArticle$translationsArgs<ExtArgs>
    _count?: boolean | JobArticleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $JobArticlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobArticle"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      translations: Prisma.$JobArticleTranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      author_id: number
      status: $Enums.ArticleStatus
      published_at: Date | null
      created_at: Date
      job_deadline: Date
      primary_image: string
      updated_at: Date
    }, ExtArgs["result"]["jobArticle"]>
    composites: {}
  }

  type JobArticleGetPayload<S extends boolean | null | undefined | JobArticleDefaultArgs> = $Result.GetResult<Prisma.$JobArticlePayload, S>

  type JobArticleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobArticleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobArticleCountAggregateInputType | true
    }

  export interface JobArticleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobArticle'], meta: { name: 'JobArticle' } }
    /**
     * Find zero or one JobArticle that matches the filter.
     * @param {JobArticleFindUniqueArgs} args - Arguments to find a JobArticle
     * @example
     * // Get one JobArticle
     * const jobArticle = await prisma.jobArticle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobArticleFindUniqueArgs>(args: SelectSubset<T, JobArticleFindUniqueArgs<ExtArgs>>): Prisma__JobArticleClient<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JobArticle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobArticleFindUniqueOrThrowArgs} args - Arguments to find a JobArticle
     * @example
     * // Get one JobArticle
     * const jobArticle = await prisma.jobArticle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobArticleFindUniqueOrThrowArgs>(args: SelectSubset<T, JobArticleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobArticleClient<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JobArticle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleFindFirstArgs} args - Arguments to find a JobArticle
     * @example
     * // Get one JobArticle
     * const jobArticle = await prisma.jobArticle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobArticleFindFirstArgs>(args?: SelectSubset<T, JobArticleFindFirstArgs<ExtArgs>>): Prisma__JobArticleClient<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JobArticle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleFindFirstOrThrowArgs} args - Arguments to find a JobArticle
     * @example
     * // Get one JobArticle
     * const jobArticle = await prisma.jobArticle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobArticleFindFirstOrThrowArgs>(args?: SelectSubset<T, JobArticleFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobArticleClient<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JobArticles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobArticles
     * const jobArticles = await prisma.jobArticle.findMany()
     * 
     * // Get first 10 JobArticles
     * const jobArticles = await prisma.jobArticle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobArticleWithIdOnly = await prisma.jobArticle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobArticleFindManyArgs>(args?: SelectSubset<T, JobArticleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JobArticle.
     * @param {JobArticleCreateArgs} args - Arguments to create a JobArticle.
     * @example
     * // Create one JobArticle
     * const JobArticle = await prisma.jobArticle.create({
     *   data: {
     *     // ... data to create a JobArticle
     *   }
     * })
     * 
     */
    create<T extends JobArticleCreateArgs>(args: SelectSubset<T, JobArticleCreateArgs<ExtArgs>>): Prisma__JobArticleClient<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JobArticles.
     * @param {JobArticleCreateManyArgs} args - Arguments to create many JobArticles.
     * @example
     * // Create many JobArticles
     * const jobArticle = await prisma.jobArticle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobArticleCreateManyArgs>(args?: SelectSubset<T, JobArticleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JobArticle.
     * @param {JobArticleDeleteArgs} args - Arguments to delete one JobArticle.
     * @example
     * // Delete one JobArticle
     * const JobArticle = await prisma.jobArticle.delete({
     *   where: {
     *     // ... filter to delete one JobArticle
     *   }
     * })
     * 
     */
    delete<T extends JobArticleDeleteArgs>(args: SelectSubset<T, JobArticleDeleteArgs<ExtArgs>>): Prisma__JobArticleClient<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JobArticle.
     * @param {JobArticleUpdateArgs} args - Arguments to update one JobArticle.
     * @example
     * // Update one JobArticle
     * const jobArticle = await prisma.jobArticle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobArticleUpdateArgs>(args: SelectSubset<T, JobArticleUpdateArgs<ExtArgs>>): Prisma__JobArticleClient<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JobArticles.
     * @param {JobArticleDeleteManyArgs} args - Arguments to filter JobArticles to delete.
     * @example
     * // Delete a few JobArticles
     * const { count } = await prisma.jobArticle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobArticleDeleteManyArgs>(args?: SelectSubset<T, JobArticleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobArticles
     * const jobArticle = await prisma.jobArticle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobArticleUpdateManyArgs>(args: SelectSubset<T, JobArticleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobArticle.
     * @param {JobArticleUpsertArgs} args - Arguments to update or create a JobArticle.
     * @example
     * // Update or create a JobArticle
     * const jobArticle = await prisma.jobArticle.upsert({
     *   create: {
     *     // ... data to create a JobArticle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobArticle we want to update
     *   }
     * })
     */
    upsert<T extends JobArticleUpsertArgs>(args: SelectSubset<T, JobArticleUpsertArgs<ExtArgs>>): Prisma__JobArticleClient<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JobArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleCountArgs} args - Arguments to filter JobArticles to count.
     * @example
     * // Count the number of JobArticles
     * const count = await prisma.jobArticle.count({
     *   where: {
     *     // ... the filter for the JobArticles we want to count
     *   }
     * })
    **/
    count<T extends JobArticleCountArgs>(
      args?: Subset<T, JobArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobArticle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobArticleAggregateArgs>(args: Subset<T, JobArticleAggregateArgs>): Prisma.PrismaPromise<GetJobArticleAggregateType<T>>

    /**
     * Group by JobArticle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobArticleGroupByArgs['orderBy'] }
        : { orderBy?: JobArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobArticle model
   */
  readonly fields: JobArticleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobArticle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobArticleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    translations<T extends JobArticle$translationsArgs<ExtArgs> = {}>(args?: Subset<T, JobArticle$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobArticle model
   */ 
  interface JobArticleFieldRefs {
    readonly id: FieldRef<"JobArticle", 'Int'>
    readonly author_id: FieldRef<"JobArticle", 'Int'>
    readonly status: FieldRef<"JobArticle", 'ArticleStatus'>
    readonly published_at: FieldRef<"JobArticle", 'DateTime'>
    readonly created_at: FieldRef<"JobArticle", 'DateTime'>
    readonly job_deadline: FieldRef<"JobArticle", 'DateTime'>
    readonly primary_image: FieldRef<"JobArticle", 'String'>
    readonly updated_at: FieldRef<"JobArticle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobArticle findUnique
   */
  export type JobArticleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    /**
     * Filter, which JobArticle to fetch.
     */
    where: JobArticleWhereUniqueInput
  }

  /**
   * JobArticle findUniqueOrThrow
   */
  export type JobArticleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    /**
     * Filter, which JobArticle to fetch.
     */
    where: JobArticleWhereUniqueInput
  }

  /**
   * JobArticle findFirst
   */
  export type JobArticleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    /**
     * Filter, which JobArticle to fetch.
     */
    where?: JobArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobArticles to fetch.
     */
    orderBy?: JobArticleOrderByWithRelationInput | JobArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobArticles.
     */
    cursor?: JobArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobArticles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobArticles.
     */
    distinct?: JobArticleScalarFieldEnum | JobArticleScalarFieldEnum[]
  }

  /**
   * JobArticle findFirstOrThrow
   */
  export type JobArticleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    /**
     * Filter, which JobArticle to fetch.
     */
    where?: JobArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobArticles to fetch.
     */
    orderBy?: JobArticleOrderByWithRelationInput | JobArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobArticles.
     */
    cursor?: JobArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobArticles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobArticles.
     */
    distinct?: JobArticleScalarFieldEnum | JobArticleScalarFieldEnum[]
  }

  /**
   * JobArticle findMany
   */
  export type JobArticleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    /**
     * Filter, which JobArticles to fetch.
     */
    where?: JobArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobArticles to fetch.
     */
    orderBy?: JobArticleOrderByWithRelationInput | JobArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobArticles.
     */
    cursor?: JobArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobArticles.
     */
    skip?: number
    distinct?: JobArticleScalarFieldEnum | JobArticleScalarFieldEnum[]
  }

  /**
   * JobArticle create
   */
  export type JobArticleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    /**
     * The data needed to create a JobArticle.
     */
    data: XOR<JobArticleCreateInput, JobArticleUncheckedCreateInput>
  }

  /**
   * JobArticle createMany
   */
  export type JobArticleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobArticles.
     */
    data: JobArticleCreateManyInput | JobArticleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobArticle update
   */
  export type JobArticleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    /**
     * The data needed to update a JobArticle.
     */
    data: XOR<JobArticleUpdateInput, JobArticleUncheckedUpdateInput>
    /**
     * Choose, which JobArticle to update.
     */
    where: JobArticleWhereUniqueInput
  }

  /**
   * JobArticle updateMany
   */
  export type JobArticleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobArticles.
     */
    data: XOR<JobArticleUpdateManyMutationInput, JobArticleUncheckedUpdateManyInput>
    /**
     * Filter which JobArticles to update
     */
    where?: JobArticleWhereInput
  }

  /**
   * JobArticle upsert
   */
  export type JobArticleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    /**
     * The filter to search for the JobArticle to update in case it exists.
     */
    where: JobArticleWhereUniqueInput
    /**
     * In case the JobArticle found by the `where` argument doesn't exist, create a new JobArticle with this data.
     */
    create: XOR<JobArticleCreateInput, JobArticleUncheckedCreateInput>
    /**
     * In case the JobArticle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobArticleUpdateInput, JobArticleUncheckedUpdateInput>
  }

  /**
   * JobArticle delete
   */
  export type JobArticleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
    /**
     * Filter which JobArticle to delete.
     */
    where: JobArticleWhereUniqueInput
  }

  /**
   * JobArticle deleteMany
   */
  export type JobArticleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobArticles to delete
     */
    where?: JobArticleWhereInput
  }

  /**
   * JobArticle.translations
   */
  export type JobArticle$translationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    where?: JobArticleTranslationWhereInput
    orderBy?: JobArticleTranslationOrderByWithRelationInput | JobArticleTranslationOrderByWithRelationInput[]
    cursor?: JobArticleTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobArticleTranslationScalarFieldEnum | JobArticleTranslationScalarFieldEnum[]
  }

  /**
   * JobArticle without action
   */
  export type JobArticleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticle
     */
    select?: JobArticleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleInclude<ExtArgs> | null
  }


  /**
   * Model JobArticleTranslation
   */

  export type AggregateJobArticleTranslation = {
    _count: JobArticleTranslationCountAggregateOutputType | null
    _avg: JobArticleTranslationAvgAggregateOutputType | null
    _sum: JobArticleTranslationSumAggregateOutputType | null
    _min: JobArticleTranslationMinAggregateOutputType | null
    _max: JobArticleTranslationMaxAggregateOutputType | null
  }

  export type JobArticleTranslationAvgAggregateOutputType = {
    id: number | null
    job_article_id: number | null
  }

  export type JobArticleTranslationSumAggregateOutputType = {
    id: number | null
    job_article_id: number | null
  }

  export type JobArticleTranslationMinAggregateOutputType = {
    id: number | null
    language: string | null
    slug: string | null
    content: string | null
    job_article_id: number | null
    job_benefits: string | null
    job_description: string | null
    job_location: string | null
    job_position: string | null
    job_requirements: string | null
    job_title: string | null
    meta_description: string | null
    meta_title: string | null
  }

  export type JobArticleTranslationMaxAggregateOutputType = {
    id: number | null
    language: string | null
    slug: string | null
    content: string | null
    job_article_id: number | null
    job_benefits: string | null
    job_description: string | null
    job_location: string | null
    job_position: string | null
    job_requirements: string | null
    job_title: string | null
    meta_description: string | null
    meta_title: string | null
  }

  export type JobArticleTranslationCountAggregateOutputType = {
    id: number
    language: number
    slug: number
    content: number
    job_article_id: number
    job_benefits: number
    job_description: number
    job_location: number
    job_position: number
    job_requirements: number
    job_title: number
    meta_description: number
    meta_title: number
    _all: number
  }


  export type JobArticleTranslationAvgAggregateInputType = {
    id?: true
    job_article_id?: true
  }

  export type JobArticleTranslationSumAggregateInputType = {
    id?: true
    job_article_id?: true
  }

  export type JobArticleTranslationMinAggregateInputType = {
    id?: true
    language?: true
    slug?: true
    content?: true
    job_article_id?: true
    job_benefits?: true
    job_description?: true
    job_location?: true
    job_position?: true
    job_requirements?: true
    job_title?: true
    meta_description?: true
    meta_title?: true
  }

  export type JobArticleTranslationMaxAggregateInputType = {
    id?: true
    language?: true
    slug?: true
    content?: true
    job_article_id?: true
    job_benefits?: true
    job_description?: true
    job_location?: true
    job_position?: true
    job_requirements?: true
    job_title?: true
    meta_description?: true
    meta_title?: true
  }

  export type JobArticleTranslationCountAggregateInputType = {
    id?: true
    language?: true
    slug?: true
    content?: true
    job_article_id?: true
    job_benefits?: true
    job_description?: true
    job_location?: true
    job_position?: true
    job_requirements?: true
    job_title?: true
    meta_description?: true
    meta_title?: true
    _all?: true
  }

  export type JobArticleTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobArticleTranslation to aggregate.
     */
    where?: JobArticleTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobArticleTranslations to fetch.
     */
    orderBy?: JobArticleTranslationOrderByWithRelationInput | JobArticleTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobArticleTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobArticleTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobArticleTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobArticleTranslations
    **/
    _count?: true | JobArticleTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobArticleTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobArticleTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobArticleTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobArticleTranslationMaxAggregateInputType
  }

  export type GetJobArticleTranslationAggregateType<T extends JobArticleTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateJobArticleTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobArticleTranslation[P]>
      : GetScalarType<T[P], AggregateJobArticleTranslation[P]>
  }




  export type JobArticleTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobArticleTranslationWhereInput
    orderBy?: JobArticleTranslationOrderByWithAggregationInput | JobArticleTranslationOrderByWithAggregationInput[]
    by: JobArticleTranslationScalarFieldEnum[] | JobArticleTranslationScalarFieldEnum
    having?: JobArticleTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobArticleTranslationCountAggregateInputType | true
    _avg?: JobArticleTranslationAvgAggregateInputType
    _sum?: JobArticleTranslationSumAggregateInputType
    _min?: JobArticleTranslationMinAggregateInputType
    _max?: JobArticleTranslationMaxAggregateInputType
  }

  export type JobArticleTranslationGroupByOutputType = {
    id: number
    language: string
    slug: string | null
    content: string | null
    job_article_id: number
    job_benefits: string | null
    job_description: string | null
    job_location: string
    job_position: string
    job_requirements: string | null
    job_title: string
    meta_description: string | null
    meta_title: string | null
    _count: JobArticleTranslationCountAggregateOutputType | null
    _avg: JobArticleTranslationAvgAggregateOutputType | null
    _sum: JobArticleTranslationSumAggregateOutputType | null
    _min: JobArticleTranslationMinAggregateOutputType | null
    _max: JobArticleTranslationMaxAggregateOutputType | null
  }

  type GetJobArticleTranslationGroupByPayload<T extends JobArticleTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobArticleTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobArticleTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobArticleTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], JobArticleTranslationGroupByOutputType[P]>
        }
      >
    >


  export type JobArticleTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    language?: boolean
    slug?: boolean
    content?: boolean
    job_article_id?: boolean
    job_benefits?: boolean
    job_description?: boolean
    job_location?: boolean
    job_position?: boolean
    job_requirements?: boolean
    job_title?: boolean
    meta_description?: boolean
    meta_title?: boolean
    job_article?: boolean | JobArticleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobArticleTranslation"]>


  export type JobArticleTranslationSelectScalar = {
    id?: boolean
    language?: boolean
    slug?: boolean
    content?: boolean
    job_article_id?: boolean
    job_benefits?: boolean
    job_description?: boolean
    job_location?: boolean
    job_position?: boolean
    job_requirements?: boolean
    job_title?: boolean
    meta_description?: boolean
    meta_title?: boolean
  }

  export type JobArticleTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job_article?: boolean | JobArticleDefaultArgs<ExtArgs>
  }

  export type $JobArticleTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobArticleTranslation"
    objects: {
      job_article: Prisma.$JobArticlePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      language: string
      slug: string | null
      content: string | null
      job_article_id: number
      job_benefits: string | null
      job_description: string | null
      job_location: string
      job_position: string
      job_requirements: string | null
      job_title: string
      meta_description: string | null
      meta_title: string | null
    }, ExtArgs["result"]["jobArticleTranslation"]>
    composites: {}
  }

  type JobArticleTranslationGetPayload<S extends boolean | null | undefined | JobArticleTranslationDefaultArgs> = $Result.GetResult<Prisma.$JobArticleTranslationPayload, S>

  type JobArticleTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobArticleTranslationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobArticleTranslationCountAggregateInputType | true
    }

  export interface JobArticleTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobArticleTranslation'], meta: { name: 'JobArticleTranslation' } }
    /**
     * Find zero or one JobArticleTranslation that matches the filter.
     * @param {JobArticleTranslationFindUniqueArgs} args - Arguments to find a JobArticleTranslation
     * @example
     * // Get one JobArticleTranslation
     * const jobArticleTranslation = await prisma.jobArticleTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobArticleTranslationFindUniqueArgs>(args: SelectSubset<T, JobArticleTranslationFindUniqueArgs<ExtArgs>>): Prisma__JobArticleTranslationClient<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JobArticleTranslation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobArticleTranslationFindUniqueOrThrowArgs} args - Arguments to find a JobArticleTranslation
     * @example
     * // Get one JobArticleTranslation
     * const jobArticleTranslation = await prisma.jobArticleTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobArticleTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, JobArticleTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobArticleTranslationClient<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JobArticleTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleTranslationFindFirstArgs} args - Arguments to find a JobArticleTranslation
     * @example
     * // Get one JobArticleTranslation
     * const jobArticleTranslation = await prisma.jobArticleTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobArticleTranslationFindFirstArgs>(args?: SelectSubset<T, JobArticleTranslationFindFirstArgs<ExtArgs>>): Prisma__JobArticleTranslationClient<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JobArticleTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleTranslationFindFirstOrThrowArgs} args - Arguments to find a JobArticleTranslation
     * @example
     * // Get one JobArticleTranslation
     * const jobArticleTranslation = await prisma.jobArticleTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobArticleTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, JobArticleTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobArticleTranslationClient<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JobArticleTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobArticleTranslations
     * const jobArticleTranslations = await prisma.jobArticleTranslation.findMany()
     * 
     * // Get first 10 JobArticleTranslations
     * const jobArticleTranslations = await prisma.jobArticleTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobArticleTranslationWithIdOnly = await prisma.jobArticleTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobArticleTranslationFindManyArgs>(args?: SelectSubset<T, JobArticleTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JobArticleTranslation.
     * @param {JobArticleTranslationCreateArgs} args - Arguments to create a JobArticleTranslation.
     * @example
     * // Create one JobArticleTranslation
     * const JobArticleTranslation = await prisma.jobArticleTranslation.create({
     *   data: {
     *     // ... data to create a JobArticleTranslation
     *   }
     * })
     * 
     */
    create<T extends JobArticleTranslationCreateArgs>(args: SelectSubset<T, JobArticleTranslationCreateArgs<ExtArgs>>): Prisma__JobArticleTranslationClient<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JobArticleTranslations.
     * @param {JobArticleTranslationCreateManyArgs} args - Arguments to create many JobArticleTranslations.
     * @example
     * // Create many JobArticleTranslations
     * const jobArticleTranslation = await prisma.jobArticleTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobArticleTranslationCreateManyArgs>(args?: SelectSubset<T, JobArticleTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JobArticleTranslation.
     * @param {JobArticleTranslationDeleteArgs} args - Arguments to delete one JobArticleTranslation.
     * @example
     * // Delete one JobArticleTranslation
     * const JobArticleTranslation = await prisma.jobArticleTranslation.delete({
     *   where: {
     *     // ... filter to delete one JobArticleTranslation
     *   }
     * })
     * 
     */
    delete<T extends JobArticleTranslationDeleteArgs>(args: SelectSubset<T, JobArticleTranslationDeleteArgs<ExtArgs>>): Prisma__JobArticleTranslationClient<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JobArticleTranslation.
     * @param {JobArticleTranslationUpdateArgs} args - Arguments to update one JobArticleTranslation.
     * @example
     * // Update one JobArticleTranslation
     * const jobArticleTranslation = await prisma.jobArticleTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobArticleTranslationUpdateArgs>(args: SelectSubset<T, JobArticleTranslationUpdateArgs<ExtArgs>>): Prisma__JobArticleTranslationClient<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JobArticleTranslations.
     * @param {JobArticleTranslationDeleteManyArgs} args - Arguments to filter JobArticleTranslations to delete.
     * @example
     * // Delete a few JobArticleTranslations
     * const { count } = await prisma.jobArticleTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobArticleTranslationDeleteManyArgs>(args?: SelectSubset<T, JobArticleTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobArticleTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobArticleTranslations
     * const jobArticleTranslation = await prisma.jobArticleTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobArticleTranslationUpdateManyArgs>(args: SelectSubset<T, JobArticleTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobArticleTranslation.
     * @param {JobArticleTranslationUpsertArgs} args - Arguments to update or create a JobArticleTranslation.
     * @example
     * // Update or create a JobArticleTranslation
     * const jobArticleTranslation = await prisma.jobArticleTranslation.upsert({
     *   create: {
     *     // ... data to create a JobArticleTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobArticleTranslation we want to update
     *   }
     * })
     */
    upsert<T extends JobArticleTranslationUpsertArgs>(args: SelectSubset<T, JobArticleTranslationUpsertArgs<ExtArgs>>): Prisma__JobArticleTranslationClient<$Result.GetResult<Prisma.$JobArticleTranslationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JobArticleTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleTranslationCountArgs} args - Arguments to filter JobArticleTranslations to count.
     * @example
     * // Count the number of JobArticleTranslations
     * const count = await prisma.jobArticleTranslation.count({
     *   where: {
     *     // ... the filter for the JobArticleTranslations we want to count
     *   }
     * })
    **/
    count<T extends JobArticleTranslationCountArgs>(
      args?: Subset<T, JobArticleTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobArticleTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobArticleTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobArticleTranslationAggregateArgs>(args: Subset<T, JobArticleTranslationAggregateArgs>): Prisma.PrismaPromise<GetJobArticleTranslationAggregateType<T>>

    /**
     * Group by JobArticleTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobArticleTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobArticleTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobArticleTranslationGroupByArgs['orderBy'] }
        : { orderBy?: JobArticleTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobArticleTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobArticleTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobArticleTranslation model
   */
  readonly fields: JobArticleTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobArticleTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobArticleTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job_article<T extends JobArticleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobArticleDefaultArgs<ExtArgs>>): Prisma__JobArticleClient<$Result.GetResult<Prisma.$JobArticlePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobArticleTranslation model
   */ 
  interface JobArticleTranslationFieldRefs {
    readonly id: FieldRef<"JobArticleTranslation", 'Int'>
    readonly language: FieldRef<"JobArticleTranslation", 'String'>
    readonly slug: FieldRef<"JobArticleTranslation", 'String'>
    readonly content: FieldRef<"JobArticleTranslation", 'String'>
    readonly job_article_id: FieldRef<"JobArticleTranslation", 'Int'>
    readonly job_benefits: FieldRef<"JobArticleTranslation", 'String'>
    readonly job_description: FieldRef<"JobArticleTranslation", 'String'>
    readonly job_location: FieldRef<"JobArticleTranslation", 'String'>
    readonly job_position: FieldRef<"JobArticleTranslation", 'String'>
    readonly job_requirements: FieldRef<"JobArticleTranslation", 'String'>
    readonly job_title: FieldRef<"JobArticleTranslation", 'String'>
    readonly meta_description: FieldRef<"JobArticleTranslation", 'String'>
    readonly meta_title: FieldRef<"JobArticleTranslation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JobArticleTranslation findUnique
   */
  export type JobArticleTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    /**
     * Filter, which JobArticleTranslation to fetch.
     */
    where: JobArticleTranslationWhereUniqueInput
  }

  /**
   * JobArticleTranslation findUniqueOrThrow
   */
  export type JobArticleTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    /**
     * Filter, which JobArticleTranslation to fetch.
     */
    where: JobArticleTranslationWhereUniqueInput
  }

  /**
   * JobArticleTranslation findFirst
   */
  export type JobArticleTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    /**
     * Filter, which JobArticleTranslation to fetch.
     */
    where?: JobArticleTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobArticleTranslations to fetch.
     */
    orderBy?: JobArticleTranslationOrderByWithRelationInput | JobArticleTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobArticleTranslations.
     */
    cursor?: JobArticleTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobArticleTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobArticleTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobArticleTranslations.
     */
    distinct?: JobArticleTranslationScalarFieldEnum | JobArticleTranslationScalarFieldEnum[]
  }

  /**
   * JobArticleTranslation findFirstOrThrow
   */
  export type JobArticleTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    /**
     * Filter, which JobArticleTranslation to fetch.
     */
    where?: JobArticleTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobArticleTranslations to fetch.
     */
    orderBy?: JobArticleTranslationOrderByWithRelationInput | JobArticleTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobArticleTranslations.
     */
    cursor?: JobArticleTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobArticleTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobArticleTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobArticleTranslations.
     */
    distinct?: JobArticleTranslationScalarFieldEnum | JobArticleTranslationScalarFieldEnum[]
  }

  /**
   * JobArticleTranslation findMany
   */
  export type JobArticleTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    /**
     * Filter, which JobArticleTranslations to fetch.
     */
    where?: JobArticleTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobArticleTranslations to fetch.
     */
    orderBy?: JobArticleTranslationOrderByWithRelationInput | JobArticleTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobArticleTranslations.
     */
    cursor?: JobArticleTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobArticleTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobArticleTranslations.
     */
    skip?: number
    distinct?: JobArticleTranslationScalarFieldEnum | JobArticleTranslationScalarFieldEnum[]
  }

  /**
   * JobArticleTranslation create
   */
  export type JobArticleTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a JobArticleTranslation.
     */
    data: XOR<JobArticleTranslationCreateInput, JobArticleTranslationUncheckedCreateInput>
  }

  /**
   * JobArticleTranslation createMany
   */
  export type JobArticleTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobArticleTranslations.
     */
    data: JobArticleTranslationCreateManyInput | JobArticleTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobArticleTranslation update
   */
  export type JobArticleTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a JobArticleTranslation.
     */
    data: XOR<JobArticleTranslationUpdateInput, JobArticleTranslationUncheckedUpdateInput>
    /**
     * Choose, which JobArticleTranslation to update.
     */
    where: JobArticleTranslationWhereUniqueInput
  }

  /**
   * JobArticleTranslation updateMany
   */
  export type JobArticleTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobArticleTranslations.
     */
    data: XOR<JobArticleTranslationUpdateManyMutationInput, JobArticleTranslationUncheckedUpdateManyInput>
    /**
     * Filter which JobArticleTranslations to update
     */
    where?: JobArticleTranslationWhereInput
  }

  /**
   * JobArticleTranslation upsert
   */
  export type JobArticleTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the JobArticleTranslation to update in case it exists.
     */
    where: JobArticleTranslationWhereUniqueInput
    /**
     * In case the JobArticleTranslation found by the `where` argument doesn't exist, create a new JobArticleTranslation with this data.
     */
    create: XOR<JobArticleTranslationCreateInput, JobArticleTranslationUncheckedCreateInput>
    /**
     * In case the JobArticleTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobArticleTranslationUpdateInput, JobArticleTranslationUncheckedUpdateInput>
  }

  /**
   * JobArticleTranslation delete
   */
  export type JobArticleTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
    /**
     * Filter which JobArticleTranslation to delete.
     */
    where: JobArticleTranslationWhereUniqueInput
  }

  /**
   * JobArticleTranslation deleteMany
   */
  export type JobArticleTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobArticleTranslations to delete
     */
    where?: JobArticleTranslationWhereInput
  }

  /**
   * JobArticleTranslation without action
   */
  export type JobArticleTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobArticleTranslation
     */
    select?: JobArticleTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobArticleTranslationInclude<ExtArgs> | null
  }


  /**
   * Model NewsCategory
   */

  export type AggregateNewsCategory = {
    _count: NewsCategoryCountAggregateOutputType | null
    _avg: NewsCategoryAvgAggregateOutputType | null
    _sum: NewsCategorySumAggregateOutputType | null
    _min: NewsCategoryMinAggregateOutputType | null
    _max: NewsCategoryMaxAggregateOutputType | null
  }

  export type NewsCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type NewsCategorySumAggregateOutputType = {
    id: number | null
  }

  export type NewsCategoryMinAggregateOutputType = {
    id: number | null
  }

  export type NewsCategoryMaxAggregateOutputType = {
    id: number | null
  }

  export type NewsCategoryCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type NewsCategoryAvgAggregateInputType = {
    id?: true
  }

  export type NewsCategorySumAggregateInputType = {
    id?: true
  }

  export type NewsCategoryMinAggregateInputType = {
    id?: true
  }

  export type NewsCategoryMaxAggregateInputType = {
    id?: true
  }

  export type NewsCategoryCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type NewsCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsCategory to aggregate.
     */
    where?: NewsCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsCategories to fetch.
     */
    orderBy?: NewsCategoryOrderByWithRelationInput | NewsCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NewsCategories
    **/
    _count?: true | NewsCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsCategoryMaxAggregateInputType
  }

  export type GetNewsCategoryAggregateType<T extends NewsCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsCategory[P]>
      : GetScalarType<T[P], AggregateNewsCategory[P]>
  }




  export type NewsCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsCategoryWhereInput
    orderBy?: NewsCategoryOrderByWithAggregationInput | NewsCategoryOrderByWithAggregationInput[]
    by: NewsCategoryScalarFieldEnum[] | NewsCategoryScalarFieldEnum
    having?: NewsCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCategoryCountAggregateInputType | true
    _avg?: NewsCategoryAvgAggregateInputType
    _sum?: NewsCategorySumAggregateInputType
    _min?: NewsCategoryMinAggregateInputType
    _max?: NewsCategoryMaxAggregateInputType
  }

  export type NewsCategoryGroupByOutputType = {
    id: number
    _count: NewsCategoryCountAggregateOutputType | null
    _avg: NewsCategoryAvgAggregateOutputType | null
    _sum: NewsCategorySumAggregateOutputType | null
    _min: NewsCategoryMinAggregateOutputType | null
    _max: NewsCategoryMaxAggregateOutputType | null
  }

  type GetNewsCategoryGroupByPayload<T extends NewsCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], NewsCategoryGroupByOutputType[P]>
        }
      >
    >


  export type NewsCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    News?: boolean | NewsCategory$NewsArgs<ExtArgs>
    translations?: boolean | NewsCategory$translationsArgs<ExtArgs>
    _count?: boolean | NewsCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["newsCategory"]>


  export type NewsCategorySelectScalar = {
    id?: boolean
  }

  export type NewsCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    News?: boolean | NewsCategory$NewsArgs<ExtArgs>
    translations?: boolean | NewsCategory$translationsArgs<ExtArgs>
    _count?: boolean | NewsCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $NewsCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NewsCategory"
    objects: {
      News: Prisma.$NewsPayload<ExtArgs>[]
      translations: Prisma.$NewsCategoryTranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
    }, ExtArgs["result"]["newsCategory"]>
    composites: {}
  }

  type NewsCategoryGetPayload<S extends boolean | null | undefined | NewsCategoryDefaultArgs> = $Result.GetResult<Prisma.$NewsCategoryPayload, S>

  type NewsCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewsCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewsCategoryCountAggregateInputType | true
    }

  export interface NewsCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NewsCategory'], meta: { name: 'NewsCategory' } }
    /**
     * Find zero or one NewsCategory that matches the filter.
     * @param {NewsCategoryFindUniqueArgs} args - Arguments to find a NewsCategory
     * @example
     * // Get one NewsCategory
     * const newsCategory = await prisma.newsCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewsCategoryFindUniqueArgs>(args: SelectSubset<T, NewsCategoryFindUniqueArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NewsCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NewsCategoryFindUniqueOrThrowArgs} args - Arguments to find a NewsCategory
     * @example
     * // Get one NewsCategory
     * const newsCategory = await prisma.newsCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewsCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, NewsCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NewsCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryFindFirstArgs} args - Arguments to find a NewsCategory
     * @example
     * // Get one NewsCategory
     * const newsCategory = await prisma.newsCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewsCategoryFindFirstArgs>(args?: SelectSubset<T, NewsCategoryFindFirstArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NewsCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryFindFirstOrThrowArgs} args - Arguments to find a NewsCategory
     * @example
     * // Get one NewsCategory
     * const newsCategory = await prisma.newsCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewsCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, NewsCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NewsCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewsCategories
     * const newsCategories = await prisma.newsCategory.findMany()
     * 
     * // Get first 10 NewsCategories
     * const newsCategories = await prisma.newsCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsCategoryWithIdOnly = await prisma.newsCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NewsCategoryFindManyArgs>(args?: SelectSubset<T, NewsCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NewsCategory.
     * @param {NewsCategoryCreateArgs} args - Arguments to create a NewsCategory.
     * @example
     * // Create one NewsCategory
     * const NewsCategory = await prisma.newsCategory.create({
     *   data: {
     *     // ... data to create a NewsCategory
     *   }
     * })
     * 
     */
    create<T extends NewsCategoryCreateArgs>(args: SelectSubset<T, NewsCategoryCreateArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NewsCategories.
     * @param {NewsCategoryCreateManyArgs} args - Arguments to create many NewsCategories.
     * @example
     * // Create many NewsCategories
     * const newsCategory = await prisma.newsCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewsCategoryCreateManyArgs>(args?: SelectSubset<T, NewsCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NewsCategory.
     * @param {NewsCategoryDeleteArgs} args - Arguments to delete one NewsCategory.
     * @example
     * // Delete one NewsCategory
     * const NewsCategory = await prisma.newsCategory.delete({
     *   where: {
     *     // ... filter to delete one NewsCategory
     *   }
     * })
     * 
     */
    delete<T extends NewsCategoryDeleteArgs>(args: SelectSubset<T, NewsCategoryDeleteArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NewsCategory.
     * @param {NewsCategoryUpdateArgs} args - Arguments to update one NewsCategory.
     * @example
     * // Update one NewsCategory
     * const newsCategory = await prisma.newsCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewsCategoryUpdateArgs>(args: SelectSubset<T, NewsCategoryUpdateArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NewsCategories.
     * @param {NewsCategoryDeleteManyArgs} args - Arguments to filter NewsCategories to delete.
     * @example
     * // Delete a few NewsCategories
     * const { count } = await prisma.newsCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewsCategoryDeleteManyArgs>(args?: SelectSubset<T, NewsCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewsCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewsCategories
     * const newsCategory = await prisma.newsCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewsCategoryUpdateManyArgs>(args: SelectSubset<T, NewsCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NewsCategory.
     * @param {NewsCategoryUpsertArgs} args - Arguments to update or create a NewsCategory.
     * @example
     * // Update or create a NewsCategory
     * const newsCategory = await prisma.newsCategory.upsert({
     *   create: {
     *     // ... data to create a NewsCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewsCategory we want to update
     *   }
     * })
     */
    upsert<T extends NewsCategoryUpsertArgs>(args: SelectSubset<T, NewsCategoryUpsertArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NewsCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryCountArgs} args - Arguments to filter NewsCategories to count.
     * @example
     * // Count the number of NewsCategories
     * const count = await prisma.newsCategory.count({
     *   where: {
     *     // ... the filter for the NewsCategories we want to count
     *   }
     * })
    **/
    count<T extends NewsCategoryCountArgs>(
      args?: Subset<T, NewsCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewsCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsCategoryAggregateArgs>(args: Subset<T, NewsCategoryAggregateArgs>): Prisma.PrismaPromise<GetNewsCategoryAggregateType<T>>

    /**
     * Group by NewsCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsCategoryGroupByArgs['orderBy'] }
        : { orderBy?: NewsCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NewsCategory model
   */
  readonly fields: NewsCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NewsCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    News<T extends NewsCategory$NewsArgs<ExtArgs> = {}>(args?: Subset<T, NewsCategory$NewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findMany"> | Null>
    translations<T extends NewsCategory$translationsArgs<ExtArgs> = {}>(args?: Subset<T, NewsCategory$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NewsCategory model
   */ 
  interface NewsCategoryFieldRefs {
    readonly id: FieldRef<"NewsCategory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * NewsCategory findUnique
   */
  export type NewsCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategory to fetch.
     */
    where: NewsCategoryWhereUniqueInput
  }

  /**
   * NewsCategory findUniqueOrThrow
   */
  export type NewsCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategory to fetch.
     */
    where: NewsCategoryWhereUniqueInput
  }

  /**
   * NewsCategory findFirst
   */
  export type NewsCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategory to fetch.
     */
    where?: NewsCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsCategories to fetch.
     */
    orderBy?: NewsCategoryOrderByWithRelationInput | NewsCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsCategories.
     */
    cursor?: NewsCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsCategories.
     */
    distinct?: NewsCategoryScalarFieldEnum | NewsCategoryScalarFieldEnum[]
  }

  /**
   * NewsCategory findFirstOrThrow
   */
  export type NewsCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategory to fetch.
     */
    where?: NewsCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsCategories to fetch.
     */
    orderBy?: NewsCategoryOrderByWithRelationInput | NewsCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsCategories.
     */
    cursor?: NewsCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsCategories.
     */
    distinct?: NewsCategoryScalarFieldEnum | NewsCategoryScalarFieldEnum[]
  }

  /**
   * NewsCategory findMany
   */
  export type NewsCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategories to fetch.
     */
    where?: NewsCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsCategories to fetch.
     */
    orderBy?: NewsCategoryOrderByWithRelationInput | NewsCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NewsCategories.
     */
    cursor?: NewsCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsCategories.
     */
    skip?: number
    distinct?: NewsCategoryScalarFieldEnum | NewsCategoryScalarFieldEnum[]
  }

  /**
   * NewsCategory create
   */
  export type NewsCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a NewsCategory.
     */
    data?: XOR<NewsCategoryCreateInput, NewsCategoryUncheckedCreateInput>
  }

  /**
   * NewsCategory createMany
   */
  export type NewsCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NewsCategories.
     */
    data: NewsCategoryCreateManyInput | NewsCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NewsCategory update
   */
  export type NewsCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a NewsCategory.
     */
    data: XOR<NewsCategoryUpdateInput, NewsCategoryUncheckedUpdateInput>
    /**
     * Choose, which NewsCategory to update.
     */
    where: NewsCategoryWhereUniqueInput
  }

  /**
   * NewsCategory updateMany
   */
  export type NewsCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NewsCategories.
     */
    data: XOR<NewsCategoryUpdateManyMutationInput, NewsCategoryUncheckedUpdateManyInput>
    /**
     * Filter which NewsCategories to update
     */
    where?: NewsCategoryWhereInput
  }

  /**
   * NewsCategory upsert
   */
  export type NewsCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the NewsCategory to update in case it exists.
     */
    where: NewsCategoryWhereUniqueInput
    /**
     * In case the NewsCategory found by the `where` argument doesn't exist, create a new NewsCategory with this data.
     */
    create: XOR<NewsCategoryCreateInput, NewsCategoryUncheckedCreateInput>
    /**
     * In case the NewsCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsCategoryUpdateInput, NewsCategoryUncheckedUpdateInput>
  }

  /**
   * NewsCategory delete
   */
  export type NewsCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
    /**
     * Filter which NewsCategory to delete.
     */
    where: NewsCategoryWhereUniqueInput
  }

  /**
   * NewsCategory deleteMany
   */
  export type NewsCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsCategories to delete
     */
    where?: NewsCategoryWhereInput
  }

  /**
   * NewsCategory.News
   */
  export type NewsCategory$NewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    where?: NewsWhereInput
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    cursor?: NewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * NewsCategory.translations
   */
  export type NewsCategory$translationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    where?: NewsCategoryTranslationWhereInput
    orderBy?: NewsCategoryTranslationOrderByWithRelationInput | NewsCategoryTranslationOrderByWithRelationInput[]
    cursor?: NewsCategoryTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NewsCategoryTranslationScalarFieldEnum | NewsCategoryTranslationScalarFieldEnum[]
  }

  /**
   * NewsCategory without action
   */
  export type NewsCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategory
     */
    select?: NewsCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryInclude<ExtArgs> | null
  }


  /**
   * Model NewsCategoryTranslation
   */

  export type AggregateNewsCategoryTranslation = {
    _count: NewsCategoryTranslationCountAggregateOutputType | null
    _avg: NewsCategoryTranslationAvgAggregateOutputType | null
    _sum: NewsCategoryTranslationSumAggregateOutputType | null
    _min: NewsCategoryTranslationMinAggregateOutputType | null
    _max: NewsCategoryTranslationMaxAggregateOutputType | null
  }

  export type NewsCategoryTranslationAvgAggregateOutputType = {
    id: number | null
    news_category_id: number | null
  }

  export type NewsCategoryTranslationSumAggregateOutputType = {
    id: number | null
    news_category_id: number | null
  }

  export type NewsCategoryTranslationMinAggregateOutputType = {
    id: number | null
    language: string | null
    name: string | null
    news_category_id: number | null
  }

  export type NewsCategoryTranslationMaxAggregateOutputType = {
    id: number | null
    language: string | null
    name: string | null
    news_category_id: number | null
  }

  export type NewsCategoryTranslationCountAggregateOutputType = {
    id: number
    language: number
    name: number
    news_category_id: number
    _all: number
  }


  export type NewsCategoryTranslationAvgAggregateInputType = {
    id?: true
    news_category_id?: true
  }

  export type NewsCategoryTranslationSumAggregateInputType = {
    id?: true
    news_category_id?: true
  }

  export type NewsCategoryTranslationMinAggregateInputType = {
    id?: true
    language?: true
    name?: true
    news_category_id?: true
  }

  export type NewsCategoryTranslationMaxAggregateInputType = {
    id?: true
    language?: true
    name?: true
    news_category_id?: true
  }

  export type NewsCategoryTranslationCountAggregateInputType = {
    id?: true
    language?: true
    name?: true
    news_category_id?: true
    _all?: true
  }

  export type NewsCategoryTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsCategoryTranslation to aggregate.
     */
    where?: NewsCategoryTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsCategoryTranslations to fetch.
     */
    orderBy?: NewsCategoryTranslationOrderByWithRelationInput | NewsCategoryTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsCategoryTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsCategoryTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsCategoryTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NewsCategoryTranslations
    **/
    _count?: true | NewsCategoryTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsCategoryTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsCategoryTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsCategoryTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsCategoryTranslationMaxAggregateInputType
  }

  export type GetNewsCategoryTranslationAggregateType<T extends NewsCategoryTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsCategoryTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsCategoryTranslation[P]>
      : GetScalarType<T[P], AggregateNewsCategoryTranslation[P]>
  }




  export type NewsCategoryTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsCategoryTranslationWhereInput
    orderBy?: NewsCategoryTranslationOrderByWithAggregationInput | NewsCategoryTranslationOrderByWithAggregationInput[]
    by: NewsCategoryTranslationScalarFieldEnum[] | NewsCategoryTranslationScalarFieldEnum
    having?: NewsCategoryTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCategoryTranslationCountAggregateInputType | true
    _avg?: NewsCategoryTranslationAvgAggregateInputType
    _sum?: NewsCategoryTranslationSumAggregateInputType
    _min?: NewsCategoryTranslationMinAggregateInputType
    _max?: NewsCategoryTranslationMaxAggregateInputType
  }

  export type NewsCategoryTranslationGroupByOutputType = {
    id: number
    language: string
    name: string
    news_category_id: number
    _count: NewsCategoryTranslationCountAggregateOutputType | null
    _avg: NewsCategoryTranslationAvgAggregateOutputType | null
    _sum: NewsCategoryTranslationSumAggregateOutputType | null
    _min: NewsCategoryTranslationMinAggregateOutputType | null
    _max: NewsCategoryTranslationMaxAggregateOutputType | null
  }

  type GetNewsCategoryTranslationGroupByPayload<T extends NewsCategoryTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsCategoryTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsCategoryTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsCategoryTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], NewsCategoryTranslationGroupByOutputType[P]>
        }
      >
    >


  export type NewsCategoryTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    language?: boolean
    name?: boolean
    news_category_id?: boolean
    news_category?: boolean | NewsCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["newsCategoryTranslation"]>


  export type NewsCategoryTranslationSelectScalar = {
    id?: boolean
    language?: boolean
    name?: boolean
    news_category_id?: boolean
  }

  export type NewsCategoryTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    news_category?: boolean | NewsCategoryDefaultArgs<ExtArgs>
  }

  export type $NewsCategoryTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NewsCategoryTranslation"
    objects: {
      news_category: Prisma.$NewsCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      language: string
      name: string
      news_category_id: number
    }, ExtArgs["result"]["newsCategoryTranslation"]>
    composites: {}
  }

  type NewsCategoryTranslationGetPayload<S extends boolean | null | undefined | NewsCategoryTranslationDefaultArgs> = $Result.GetResult<Prisma.$NewsCategoryTranslationPayload, S>

  type NewsCategoryTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewsCategoryTranslationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewsCategoryTranslationCountAggregateInputType | true
    }

  export interface NewsCategoryTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NewsCategoryTranslation'], meta: { name: 'NewsCategoryTranslation' } }
    /**
     * Find zero or one NewsCategoryTranslation that matches the filter.
     * @param {NewsCategoryTranslationFindUniqueArgs} args - Arguments to find a NewsCategoryTranslation
     * @example
     * // Get one NewsCategoryTranslation
     * const newsCategoryTranslation = await prisma.newsCategoryTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewsCategoryTranslationFindUniqueArgs>(args: SelectSubset<T, NewsCategoryTranslationFindUniqueArgs<ExtArgs>>): Prisma__NewsCategoryTranslationClient<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NewsCategoryTranslation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NewsCategoryTranslationFindUniqueOrThrowArgs} args - Arguments to find a NewsCategoryTranslation
     * @example
     * // Get one NewsCategoryTranslation
     * const newsCategoryTranslation = await prisma.newsCategoryTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewsCategoryTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, NewsCategoryTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewsCategoryTranslationClient<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NewsCategoryTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryTranslationFindFirstArgs} args - Arguments to find a NewsCategoryTranslation
     * @example
     * // Get one NewsCategoryTranslation
     * const newsCategoryTranslation = await prisma.newsCategoryTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewsCategoryTranslationFindFirstArgs>(args?: SelectSubset<T, NewsCategoryTranslationFindFirstArgs<ExtArgs>>): Prisma__NewsCategoryTranslationClient<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NewsCategoryTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryTranslationFindFirstOrThrowArgs} args - Arguments to find a NewsCategoryTranslation
     * @example
     * // Get one NewsCategoryTranslation
     * const newsCategoryTranslation = await prisma.newsCategoryTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewsCategoryTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, NewsCategoryTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewsCategoryTranslationClient<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NewsCategoryTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewsCategoryTranslations
     * const newsCategoryTranslations = await prisma.newsCategoryTranslation.findMany()
     * 
     * // Get first 10 NewsCategoryTranslations
     * const newsCategoryTranslations = await prisma.newsCategoryTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsCategoryTranslationWithIdOnly = await prisma.newsCategoryTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NewsCategoryTranslationFindManyArgs>(args?: SelectSubset<T, NewsCategoryTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NewsCategoryTranslation.
     * @param {NewsCategoryTranslationCreateArgs} args - Arguments to create a NewsCategoryTranslation.
     * @example
     * // Create one NewsCategoryTranslation
     * const NewsCategoryTranslation = await prisma.newsCategoryTranslation.create({
     *   data: {
     *     // ... data to create a NewsCategoryTranslation
     *   }
     * })
     * 
     */
    create<T extends NewsCategoryTranslationCreateArgs>(args: SelectSubset<T, NewsCategoryTranslationCreateArgs<ExtArgs>>): Prisma__NewsCategoryTranslationClient<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NewsCategoryTranslations.
     * @param {NewsCategoryTranslationCreateManyArgs} args - Arguments to create many NewsCategoryTranslations.
     * @example
     * // Create many NewsCategoryTranslations
     * const newsCategoryTranslation = await prisma.newsCategoryTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewsCategoryTranslationCreateManyArgs>(args?: SelectSubset<T, NewsCategoryTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NewsCategoryTranslation.
     * @param {NewsCategoryTranslationDeleteArgs} args - Arguments to delete one NewsCategoryTranslation.
     * @example
     * // Delete one NewsCategoryTranslation
     * const NewsCategoryTranslation = await prisma.newsCategoryTranslation.delete({
     *   where: {
     *     // ... filter to delete one NewsCategoryTranslation
     *   }
     * })
     * 
     */
    delete<T extends NewsCategoryTranslationDeleteArgs>(args: SelectSubset<T, NewsCategoryTranslationDeleteArgs<ExtArgs>>): Prisma__NewsCategoryTranslationClient<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NewsCategoryTranslation.
     * @param {NewsCategoryTranslationUpdateArgs} args - Arguments to update one NewsCategoryTranslation.
     * @example
     * // Update one NewsCategoryTranslation
     * const newsCategoryTranslation = await prisma.newsCategoryTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewsCategoryTranslationUpdateArgs>(args: SelectSubset<T, NewsCategoryTranslationUpdateArgs<ExtArgs>>): Prisma__NewsCategoryTranslationClient<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NewsCategoryTranslations.
     * @param {NewsCategoryTranslationDeleteManyArgs} args - Arguments to filter NewsCategoryTranslations to delete.
     * @example
     * // Delete a few NewsCategoryTranslations
     * const { count } = await prisma.newsCategoryTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewsCategoryTranslationDeleteManyArgs>(args?: SelectSubset<T, NewsCategoryTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewsCategoryTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewsCategoryTranslations
     * const newsCategoryTranslation = await prisma.newsCategoryTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewsCategoryTranslationUpdateManyArgs>(args: SelectSubset<T, NewsCategoryTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NewsCategoryTranslation.
     * @param {NewsCategoryTranslationUpsertArgs} args - Arguments to update or create a NewsCategoryTranslation.
     * @example
     * // Update or create a NewsCategoryTranslation
     * const newsCategoryTranslation = await prisma.newsCategoryTranslation.upsert({
     *   create: {
     *     // ... data to create a NewsCategoryTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewsCategoryTranslation we want to update
     *   }
     * })
     */
    upsert<T extends NewsCategoryTranslationUpsertArgs>(args: SelectSubset<T, NewsCategoryTranslationUpsertArgs<ExtArgs>>): Prisma__NewsCategoryTranslationClient<$Result.GetResult<Prisma.$NewsCategoryTranslationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NewsCategoryTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryTranslationCountArgs} args - Arguments to filter NewsCategoryTranslations to count.
     * @example
     * // Count the number of NewsCategoryTranslations
     * const count = await prisma.newsCategoryTranslation.count({
     *   where: {
     *     // ... the filter for the NewsCategoryTranslations we want to count
     *   }
     * })
    **/
    count<T extends NewsCategoryTranslationCountArgs>(
      args?: Subset<T, NewsCategoryTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCategoryTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewsCategoryTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsCategoryTranslationAggregateArgs>(args: Subset<T, NewsCategoryTranslationAggregateArgs>): Prisma.PrismaPromise<GetNewsCategoryTranslationAggregateType<T>>

    /**
     * Group by NewsCategoryTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCategoryTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsCategoryTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsCategoryTranslationGroupByArgs['orderBy'] }
        : { orderBy?: NewsCategoryTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsCategoryTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsCategoryTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NewsCategoryTranslation model
   */
  readonly fields: NewsCategoryTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NewsCategoryTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsCategoryTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    news_category<T extends NewsCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NewsCategoryDefaultArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NewsCategoryTranslation model
   */ 
  interface NewsCategoryTranslationFieldRefs {
    readonly id: FieldRef<"NewsCategoryTranslation", 'Int'>
    readonly language: FieldRef<"NewsCategoryTranslation", 'String'>
    readonly name: FieldRef<"NewsCategoryTranslation", 'String'>
    readonly news_category_id: FieldRef<"NewsCategoryTranslation", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * NewsCategoryTranslation findUnique
   */
  export type NewsCategoryTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategoryTranslation to fetch.
     */
    where: NewsCategoryTranslationWhereUniqueInput
  }

  /**
   * NewsCategoryTranslation findUniqueOrThrow
   */
  export type NewsCategoryTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategoryTranslation to fetch.
     */
    where: NewsCategoryTranslationWhereUniqueInput
  }

  /**
   * NewsCategoryTranslation findFirst
   */
  export type NewsCategoryTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategoryTranslation to fetch.
     */
    where?: NewsCategoryTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsCategoryTranslations to fetch.
     */
    orderBy?: NewsCategoryTranslationOrderByWithRelationInput | NewsCategoryTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsCategoryTranslations.
     */
    cursor?: NewsCategoryTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsCategoryTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsCategoryTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsCategoryTranslations.
     */
    distinct?: NewsCategoryTranslationScalarFieldEnum | NewsCategoryTranslationScalarFieldEnum[]
  }

  /**
   * NewsCategoryTranslation findFirstOrThrow
   */
  export type NewsCategoryTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategoryTranslation to fetch.
     */
    where?: NewsCategoryTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsCategoryTranslations to fetch.
     */
    orderBy?: NewsCategoryTranslationOrderByWithRelationInput | NewsCategoryTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsCategoryTranslations.
     */
    cursor?: NewsCategoryTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsCategoryTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsCategoryTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsCategoryTranslations.
     */
    distinct?: NewsCategoryTranslationScalarFieldEnum | NewsCategoryTranslationScalarFieldEnum[]
  }

  /**
   * NewsCategoryTranslation findMany
   */
  export type NewsCategoryTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsCategoryTranslations to fetch.
     */
    where?: NewsCategoryTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsCategoryTranslations to fetch.
     */
    orderBy?: NewsCategoryTranslationOrderByWithRelationInput | NewsCategoryTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NewsCategoryTranslations.
     */
    cursor?: NewsCategoryTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsCategoryTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsCategoryTranslations.
     */
    skip?: number
    distinct?: NewsCategoryTranslationScalarFieldEnum | NewsCategoryTranslationScalarFieldEnum[]
  }

  /**
   * NewsCategoryTranslation create
   */
  export type NewsCategoryTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a NewsCategoryTranslation.
     */
    data: XOR<NewsCategoryTranslationCreateInput, NewsCategoryTranslationUncheckedCreateInput>
  }

  /**
   * NewsCategoryTranslation createMany
   */
  export type NewsCategoryTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NewsCategoryTranslations.
     */
    data: NewsCategoryTranslationCreateManyInput | NewsCategoryTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NewsCategoryTranslation update
   */
  export type NewsCategoryTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a NewsCategoryTranslation.
     */
    data: XOR<NewsCategoryTranslationUpdateInput, NewsCategoryTranslationUncheckedUpdateInput>
    /**
     * Choose, which NewsCategoryTranslation to update.
     */
    where: NewsCategoryTranslationWhereUniqueInput
  }

  /**
   * NewsCategoryTranslation updateMany
   */
  export type NewsCategoryTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NewsCategoryTranslations.
     */
    data: XOR<NewsCategoryTranslationUpdateManyMutationInput, NewsCategoryTranslationUncheckedUpdateManyInput>
    /**
     * Filter which NewsCategoryTranslations to update
     */
    where?: NewsCategoryTranslationWhereInput
  }

  /**
   * NewsCategoryTranslation upsert
   */
  export type NewsCategoryTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the NewsCategoryTranslation to update in case it exists.
     */
    where: NewsCategoryTranslationWhereUniqueInput
    /**
     * In case the NewsCategoryTranslation found by the `where` argument doesn't exist, create a new NewsCategoryTranslation with this data.
     */
    create: XOR<NewsCategoryTranslationCreateInput, NewsCategoryTranslationUncheckedCreateInput>
    /**
     * In case the NewsCategoryTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsCategoryTranslationUpdateInput, NewsCategoryTranslationUncheckedUpdateInput>
  }

  /**
   * NewsCategoryTranslation delete
   */
  export type NewsCategoryTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
    /**
     * Filter which NewsCategoryTranslation to delete.
     */
    where: NewsCategoryTranslationWhereUniqueInput
  }

  /**
   * NewsCategoryTranslation deleteMany
   */
  export type NewsCategoryTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsCategoryTranslations to delete
     */
    where?: NewsCategoryTranslationWhereInput
  }

  /**
   * NewsCategoryTranslation without action
   */
  export type NewsCategoryTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCategoryTranslation
     */
    select?: NewsCategoryTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsCategoryTranslationInclude<ExtArgs> | null
  }


  /**
   * Model SystemConfig
   */

  export type AggregateSystemConfig = {
    _count: SystemConfigCountAggregateOutputType | null
    _avg: SystemConfigAvgAggregateOutputType | null
    _sum: SystemConfigSumAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  export type SystemConfigAvgAggregateOutputType = {
    id: number | null
  }

  export type SystemConfigSumAggregateOutputType = {
    id: number | null
  }

  export type SystemConfigMinAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SystemConfigMaxAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SystemConfigCountAggregateOutputType = {
    id: number
    key: number
    value: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SystemConfigAvgAggregateInputType = {
    id?: true
  }

  export type SystemConfigSumAggregateInputType = {
    id?: true
  }

  export type SystemConfigMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    created_at?: true
    updated_at?: true
  }

  export type SystemConfigMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    created_at?: true
    updated_at?: true
  }

  export type SystemConfigCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SystemConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfig to aggregate.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemConfigs
    **/
    _count?: true | SystemConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemConfigMaxAggregateInputType
  }

  export type GetSystemConfigAggregateType<T extends SystemConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemConfig[P]>
      : GetScalarType<T[P], AggregateSystemConfig[P]>
  }




  export type SystemConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemConfigWhereInput
    orderBy?: SystemConfigOrderByWithAggregationInput | SystemConfigOrderByWithAggregationInput[]
    by: SystemConfigScalarFieldEnum[] | SystemConfigScalarFieldEnum
    having?: SystemConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemConfigCountAggregateInputType | true
    _avg?: SystemConfigAvgAggregateInputType
    _sum?: SystemConfigSumAggregateInputType
    _min?: SystemConfigMinAggregateInputType
    _max?: SystemConfigMaxAggregateInputType
  }

  export type SystemConfigGroupByOutputType = {
    id: number
    key: string
    value: string
    created_at: Date
    updated_at: Date
    _count: SystemConfigCountAggregateOutputType | null
    _avg: SystemConfigAvgAggregateOutputType | null
    _sum: SystemConfigSumAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  type GetSystemConfigGroupByPayload<T extends SystemConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
        }
      >
    >


  export type SystemConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["systemConfig"]>


  export type SystemConfigSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type $SystemConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      value: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["systemConfig"]>
    composites: {}
  }

  type SystemConfigGetPayload<S extends boolean | null | undefined | SystemConfigDefaultArgs> = $Result.GetResult<Prisma.$SystemConfigPayload, S>

  type SystemConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemConfigCountAggregateInputType | true
    }

  export interface SystemConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemConfig'], meta: { name: 'SystemConfig' } }
    /**
     * Find zero or one SystemConfig that matches the filter.
     * @param {SystemConfigFindUniqueArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemConfigFindUniqueArgs>(args: SelectSubset<T, SystemConfigFindUniqueArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemConfigFindUniqueOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemConfigFindFirstArgs>(args?: SelectSubset<T, SystemConfigFindFirstArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany()
     * 
     * // Get first 10 SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemConfigFindManyArgs>(args?: SelectSubset<T, SystemConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemConfig.
     * @param {SystemConfigCreateArgs} args - Arguments to create a SystemConfig.
     * @example
     * // Create one SystemConfig
     * const SystemConfig = await prisma.systemConfig.create({
     *   data: {
     *     // ... data to create a SystemConfig
     *   }
     * })
     * 
     */
    create<T extends SystemConfigCreateArgs>(args: SelectSubset<T, SystemConfigCreateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemConfigs.
     * @param {SystemConfigCreateManyArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemConfigCreateManyArgs>(args?: SelectSubset<T, SystemConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SystemConfig.
     * @param {SystemConfigDeleteArgs} args - Arguments to delete one SystemConfig.
     * @example
     * // Delete one SystemConfig
     * const SystemConfig = await prisma.systemConfig.delete({
     *   where: {
     *     // ... filter to delete one SystemConfig
     *   }
     * })
     * 
     */
    delete<T extends SystemConfigDeleteArgs>(args: SelectSubset<T, SystemConfigDeleteArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemConfig.
     * @param {SystemConfigUpdateArgs} args - Arguments to update one SystemConfig.
     * @example
     * // Update one SystemConfig
     * const systemConfig = await prisma.systemConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemConfigUpdateArgs>(args: SelectSubset<T, SystemConfigUpdateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemConfigs.
     * @param {SystemConfigDeleteManyArgs} args - Arguments to filter SystemConfigs to delete.
     * @example
     * // Delete a few SystemConfigs
     * const { count } = await prisma.systemConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemConfigDeleteManyArgs>(args?: SelectSubset<T, SystemConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemConfigUpdateManyArgs>(args: SelectSubset<T, SystemConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemConfig.
     * @param {SystemConfigUpsertArgs} args - Arguments to update or create a SystemConfig.
     * @example
     * // Update or create a SystemConfig
     * const systemConfig = await prisma.systemConfig.upsert({
     *   create: {
     *     // ... data to create a SystemConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemConfig we want to update
     *   }
     * })
     */
    upsert<T extends SystemConfigUpsertArgs>(args: SelectSubset<T, SystemConfigUpsertArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigCountArgs} args - Arguments to filter SystemConfigs to count.
     * @example
     * // Count the number of SystemConfigs
     * const count = await prisma.systemConfig.count({
     *   where: {
     *     // ... the filter for the SystemConfigs we want to count
     *   }
     * })
    **/
    count<T extends SystemConfigCountArgs>(
      args?: Subset<T, SystemConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemConfigAggregateArgs>(args: Subset<T, SystemConfigAggregateArgs>): Prisma.PrismaPromise<GetSystemConfigAggregateType<T>>

    /**
     * Group by SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemConfigGroupByArgs['orderBy'] }
        : { orderBy?: SystemConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemConfig model
   */
  readonly fields: SystemConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemConfig model
   */ 
  interface SystemConfigFieldRefs {
    readonly id: FieldRef<"SystemConfig", 'Int'>
    readonly key: FieldRef<"SystemConfig", 'String'>
    readonly value: FieldRef<"SystemConfig", 'String'>
    readonly created_at: FieldRef<"SystemConfig", 'DateTime'>
    readonly updated_at: FieldRef<"SystemConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemConfig findUnique
   */
  export type SystemConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findUniqueOrThrow
   */
  export type SystemConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findFirst
   */
  export type SystemConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findFirstOrThrow
   */
  export type SystemConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findMany
   */
  export type SystemConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfigs to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig create
   */
  export type SystemConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemConfig.
     */
    data: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
  }

  /**
   * SystemConfig createMany
   */
  export type SystemConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig update
   */
  export type SystemConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemConfig.
     */
    data: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
    /**
     * Choose, which SystemConfig to update.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig updateMany
   */
  export type SystemConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
  }

  /**
   * SystemConfig upsert
   */
  export type SystemConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemConfig to update in case it exists.
     */
    where: SystemConfigWhereUniqueInput
    /**
     * In case the SystemConfig found by the `where` argument doesn't exist, create a new SystemConfig with this data.
     */
    create: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
    /**
     * In case the SystemConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
  }

  /**
   * SystemConfig delete
   */
  export type SystemConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter which SystemConfig to delete.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig deleteMany
   */
  export type SystemConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfigs to delete
     */
    where?: SystemConfigWhereInput
  }

  /**
   * SystemConfig without action
   */
  export type SystemConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
  }


  /**
   * Model News
   */

  export type AggregateNews = {
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  export type NewsAvgAggregateOutputType = {
    id: number | null
    author_id: number | null
    category_id: number | null
  }

  export type NewsSumAggregateOutputType = {
    id: number | null
    author_id: number | null
    category_id: number | null
  }

  export type NewsMinAggregateOutputType = {
    id: number | null
    main_image: string | null
    published_at: Date | null
    author_id: number | null
    tag: string | null
    category_id: number | null
  }

  export type NewsMaxAggregateOutputType = {
    id: number | null
    main_image: string | null
    published_at: Date | null
    author_id: number | null
    tag: string | null
    category_id: number | null
  }

  export type NewsCountAggregateOutputType = {
    id: number
    main_image: number
    published_at: number
    author_id: number
    tag: number
    category_id: number
    _all: number
  }


  export type NewsAvgAggregateInputType = {
    id?: true
    author_id?: true
    category_id?: true
  }

  export type NewsSumAggregateInputType = {
    id?: true
    author_id?: true
    category_id?: true
  }

  export type NewsMinAggregateInputType = {
    id?: true
    main_image?: true
    published_at?: true
    author_id?: true
    tag?: true
    category_id?: true
  }

  export type NewsMaxAggregateInputType = {
    id?: true
    main_image?: true
    published_at?: true
    author_id?: true
    tag?: true
    category_id?: true
  }

  export type NewsCountAggregateInputType = {
    id?: true
    main_image?: true
    published_at?: true
    author_id?: true
    tag?: true
    category_id?: true
    _all?: true
  }

  export type NewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which News to aggregate.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned News
    **/
    _count?: true | NewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsMaxAggregateInputType
  }

  export type GetNewsAggregateType<T extends NewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNews[P]>
      : GetScalarType<T[P], AggregateNews[P]>
  }




  export type NewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsWhereInput
    orderBy?: NewsOrderByWithAggregationInput | NewsOrderByWithAggregationInput[]
    by: NewsScalarFieldEnum[] | NewsScalarFieldEnum
    having?: NewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCountAggregateInputType | true
    _avg?: NewsAvgAggregateInputType
    _sum?: NewsSumAggregateInputType
    _min?: NewsMinAggregateInputType
    _max?: NewsMaxAggregateInputType
  }

  export type NewsGroupByOutputType = {
    id: number
    main_image: string
    published_at: Date
    author_id: number
    tag: string | null
    category_id: number
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  type GetNewsGroupByPayload<T extends NewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsGroupByOutputType[P]>
            : GetScalarType<T[P], NewsGroupByOutputType[P]>
        }
      >
    >


  export type NewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    main_image?: boolean
    published_at?: boolean
    author_id?: boolean
    tag?: boolean
    category_id?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    NewsCategory?: boolean | NewsCategoryDefaultArgs<ExtArgs>
    NewsTranslation?: boolean | News$NewsTranslationArgs<ExtArgs>
    _count?: boolean | NewsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["news"]>


  export type NewsSelectScalar = {
    id?: boolean
    main_image?: boolean
    published_at?: boolean
    author_id?: boolean
    tag?: boolean
    category_id?: boolean
  }

  export type NewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    NewsCategory?: boolean | NewsCategoryDefaultArgs<ExtArgs>
    NewsTranslation?: boolean | News$NewsTranslationArgs<ExtArgs>
    _count?: boolean | NewsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $NewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "News"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      NewsCategory: Prisma.$NewsCategoryPayload<ExtArgs>
      NewsTranslation: Prisma.$NewsTranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      main_image: string
      published_at: Date
      author_id: number
      tag: string | null
      category_id: number
    }, ExtArgs["result"]["news"]>
    composites: {}
  }

  type NewsGetPayload<S extends boolean | null | undefined | NewsDefaultArgs> = $Result.GetResult<Prisma.$NewsPayload, S>

  type NewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewsCountAggregateInputType | true
    }

  export interface NewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['News'], meta: { name: 'News' } }
    /**
     * Find zero or one News that matches the filter.
     * @param {NewsFindUniqueArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewsFindUniqueArgs>(args: SelectSubset<T, NewsFindUniqueArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one News that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NewsFindUniqueOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewsFindUniqueOrThrowArgs>(args: SelectSubset<T, NewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewsFindFirstArgs>(args?: SelectSubset<T, NewsFindFirstArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first News that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewsFindFirstOrThrowArgs>(args?: SelectSubset<T, NewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all News
     * const news = await prisma.news.findMany()
     * 
     * // Get first 10 News
     * const news = await prisma.news.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsWithIdOnly = await prisma.news.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NewsFindManyArgs>(args?: SelectSubset<T, NewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a News.
     * @param {NewsCreateArgs} args - Arguments to create a News.
     * @example
     * // Create one News
     * const News = await prisma.news.create({
     *   data: {
     *     // ... data to create a News
     *   }
     * })
     * 
     */
    create<T extends NewsCreateArgs>(args: SelectSubset<T, NewsCreateArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many News.
     * @param {NewsCreateManyArgs} args - Arguments to create many News.
     * @example
     * // Create many News
     * const news = await prisma.news.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewsCreateManyArgs>(args?: SelectSubset<T, NewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a News.
     * @param {NewsDeleteArgs} args - Arguments to delete one News.
     * @example
     * // Delete one News
     * const News = await prisma.news.delete({
     *   where: {
     *     // ... filter to delete one News
     *   }
     * })
     * 
     */
    delete<T extends NewsDeleteArgs>(args: SelectSubset<T, NewsDeleteArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one News.
     * @param {NewsUpdateArgs} args - Arguments to update one News.
     * @example
     * // Update one News
     * const news = await prisma.news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewsUpdateArgs>(args: SelectSubset<T, NewsUpdateArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more News.
     * @param {NewsDeleteManyArgs} args - Arguments to filter News to delete.
     * @example
     * // Delete a few News
     * const { count } = await prisma.news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewsDeleteManyArgs>(args?: SelectSubset<T, NewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many News
     * const news = await prisma.news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewsUpdateManyArgs>(args: SelectSubset<T, NewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one News.
     * @param {NewsUpsertArgs} args - Arguments to update or create a News.
     * @example
     * // Update or create a News
     * const news = await prisma.news.upsert({
     *   create: {
     *     // ... data to create a News
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the News we want to update
     *   }
     * })
     */
    upsert<T extends NewsUpsertArgs>(args: SelectSubset<T, NewsUpsertArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCountArgs} args - Arguments to filter News to count.
     * @example
     * // Count the number of News
     * const count = await prisma.news.count({
     *   where: {
     *     // ... the filter for the News we want to count
     *   }
     * })
    **/
    count<T extends NewsCountArgs>(
      args?: Subset<T, NewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsAggregateArgs>(args: Subset<T, NewsAggregateArgs>): Prisma.PrismaPromise<GetNewsAggregateType<T>>

    /**
     * Group by News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsGroupByArgs['orderBy'] }
        : { orderBy?: NewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the News model
   */
  readonly fields: NewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for News.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    NewsCategory<T extends NewsCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NewsCategoryDefaultArgs<ExtArgs>>): Prisma__NewsCategoryClient<$Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    NewsTranslation<T extends News$NewsTranslationArgs<ExtArgs> = {}>(args?: Subset<T, News$NewsTranslationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the News model
   */ 
  interface NewsFieldRefs {
    readonly id: FieldRef<"News", 'Int'>
    readonly main_image: FieldRef<"News", 'String'>
    readonly published_at: FieldRef<"News", 'DateTime'>
    readonly author_id: FieldRef<"News", 'Int'>
    readonly tag: FieldRef<"News", 'String'>
    readonly category_id: FieldRef<"News", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * News findUnique
   */
  export type NewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News findUniqueOrThrow
   */
  export type NewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News findFirst
   */
  export type NewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * News findFirstOrThrow
   */
  export type NewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * News findMany
   */
  export type NewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * News create
   */
  export type NewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * The data needed to create a News.
     */
    data: XOR<NewsCreateInput, NewsUncheckedCreateInput>
  }

  /**
   * News createMany
   */
  export type NewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many News.
     */
    data: NewsCreateManyInput | NewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * News update
   */
  export type NewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * The data needed to update a News.
     */
    data: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
    /**
     * Choose, which News to update.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News updateMany
   */
  export type NewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update News.
     */
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyInput>
    /**
     * Filter which News to update
     */
    where?: NewsWhereInput
  }

  /**
   * News upsert
   */
  export type NewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * The filter to search for the News to update in case it exists.
     */
    where: NewsWhereUniqueInput
    /**
     * In case the News found by the `where` argument doesn't exist, create a new News with this data.
     */
    create: XOR<NewsCreateInput, NewsUncheckedCreateInput>
    /**
     * In case the News was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
  }

  /**
   * News delete
   */
  export type NewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter which News to delete.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News deleteMany
   */
  export type NewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which News to delete
     */
    where?: NewsWhereInput
  }

  /**
   * News.NewsTranslation
   */
  export type News$NewsTranslationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    where?: NewsTranslationWhereInput
    orderBy?: NewsTranslationOrderByWithRelationInput | NewsTranslationOrderByWithRelationInput[]
    cursor?: NewsTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NewsTranslationScalarFieldEnum | NewsTranslationScalarFieldEnum[]
  }

  /**
   * News without action
   */
  export type NewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
  }


  /**
   * Model NewsTranslation
   */

  export type AggregateNewsTranslation = {
    _count: NewsTranslationCountAggregateOutputType | null
    _avg: NewsTranslationAvgAggregateOutputType | null
    _sum: NewsTranslationSumAggregateOutputType | null
    _min: NewsTranslationMinAggregateOutputType | null
    _max: NewsTranslationMaxAggregateOutputType | null
  }

  export type NewsTranslationAvgAggregateOutputType = {
    id: number | null
    news_id: number | null
  }

  export type NewsTranslationSumAggregateOutputType = {
    id: number | null
    news_id: number | null
  }

  export type NewsTranslationMinAggregateOutputType = {
    id: number | null
    news_id: number | null
    language: string | null
    title: string | null
    content: string | null
  }

  export type NewsTranslationMaxAggregateOutputType = {
    id: number | null
    news_id: number | null
    language: string | null
    title: string | null
    content: string | null
  }

  export type NewsTranslationCountAggregateOutputType = {
    id: number
    news_id: number
    language: number
    title: number
    content: number
    _all: number
  }


  export type NewsTranslationAvgAggregateInputType = {
    id?: true
    news_id?: true
  }

  export type NewsTranslationSumAggregateInputType = {
    id?: true
    news_id?: true
  }

  export type NewsTranslationMinAggregateInputType = {
    id?: true
    news_id?: true
    language?: true
    title?: true
    content?: true
  }

  export type NewsTranslationMaxAggregateInputType = {
    id?: true
    news_id?: true
    language?: true
    title?: true
    content?: true
  }

  export type NewsTranslationCountAggregateInputType = {
    id?: true
    news_id?: true
    language?: true
    title?: true
    content?: true
    _all?: true
  }

  export type NewsTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsTranslation to aggregate.
     */
    where?: NewsTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsTranslations to fetch.
     */
    orderBy?: NewsTranslationOrderByWithRelationInput | NewsTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NewsTranslations
    **/
    _count?: true | NewsTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsTranslationMaxAggregateInputType
  }

  export type GetNewsTranslationAggregateType<T extends NewsTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsTranslation[P]>
      : GetScalarType<T[P], AggregateNewsTranslation[P]>
  }




  export type NewsTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsTranslationWhereInput
    orderBy?: NewsTranslationOrderByWithAggregationInput | NewsTranslationOrderByWithAggregationInput[]
    by: NewsTranslationScalarFieldEnum[] | NewsTranslationScalarFieldEnum
    having?: NewsTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsTranslationCountAggregateInputType | true
    _avg?: NewsTranslationAvgAggregateInputType
    _sum?: NewsTranslationSumAggregateInputType
    _min?: NewsTranslationMinAggregateInputType
    _max?: NewsTranslationMaxAggregateInputType
  }

  export type NewsTranslationGroupByOutputType = {
    id: number
    news_id: number
    language: string
    title: string
    content: string
    _count: NewsTranslationCountAggregateOutputType | null
    _avg: NewsTranslationAvgAggregateOutputType | null
    _sum: NewsTranslationSumAggregateOutputType | null
    _min: NewsTranslationMinAggregateOutputType | null
    _max: NewsTranslationMaxAggregateOutputType | null
  }

  type GetNewsTranslationGroupByPayload<T extends NewsTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], NewsTranslationGroupByOutputType[P]>
        }
      >
    >


  export type NewsTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    news_id?: boolean
    language?: boolean
    title?: boolean
    content?: boolean
    News?: boolean | NewsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["newsTranslation"]>


  export type NewsTranslationSelectScalar = {
    id?: boolean
    news_id?: boolean
    language?: boolean
    title?: boolean
    content?: boolean
  }

  export type NewsTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    News?: boolean | NewsDefaultArgs<ExtArgs>
  }

  export type $NewsTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NewsTranslation"
    objects: {
      News: Prisma.$NewsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      news_id: number
      language: string
      title: string
      content: string
    }, ExtArgs["result"]["newsTranslation"]>
    composites: {}
  }

  type NewsTranslationGetPayload<S extends boolean | null | undefined | NewsTranslationDefaultArgs> = $Result.GetResult<Prisma.$NewsTranslationPayload, S>

  type NewsTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewsTranslationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewsTranslationCountAggregateInputType | true
    }

  export interface NewsTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NewsTranslation'], meta: { name: 'NewsTranslation' } }
    /**
     * Find zero or one NewsTranslation that matches the filter.
     * @param {NewsTranslationFindUniqueArgs} args - Arguments to find a NewsTranslation
     * @example
     * // Get one NewsTranslation
     * const newsTranslation = await prisma.newsTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewsTranslationFindUniqueArgs>(args: SelectSubset<T, NewsTranslationFindUniqueArgs<ExtArgs>>): Prisma__NewsTranslationClient<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NewsTranslation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NewsTranslationFindUniqueOrThrowArgs} args - Arguments to find a NewsTranslation
     * @example
     * // Get one NewsTranslation
     * const newsTranslation = await prisma.newsTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewsTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, NewsTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewsTranslationClient<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NewsTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsTranslationFindFirstArgs} args - Arguments to find a NewsTranslation
     * @example
     * // Get one NewsTranslation
     * const newsTranslation = await prisma.newsTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewsTranslationFindFirstArgs>(args?: SelectSubset<T, NewsTranslationFindFirstArgs<ExtArgs>>): Prisma__NewsTranslationClient<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NewsTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsTranslationFindFirstOrThrowArgs} args - Arguments to find a NewsTranslation
     * @example
     * // Get one NewsTranslation
     * const newsTranslation = await prisma.newsTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewsTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, NewsTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewsTranslationClient<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NewsTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewsTranslations
     * const newsTranslations = await prisma.newsTranslation.findMany()
     * 
     * // Get first 10 NewsTranslations
     * const newsTranslations = await prisma.newsTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsTranslationWithIdOnly = await prisma.newsTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NewsTranslationFindManyArgs>(args?: SelectSubset<T, NewsTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NewsTranslation.
     * @param {NewsTranslationCreateArgs} args - Arguments to create a NewsTranslation.
     * @example
     * // Create one NewsTranslation
     * const NewsTranslation = await prisma.newsTranslation.create({
     *   data: {
     *     // ... data to create a NewsTranslation
     *   }
     * })
     * 
     */
    create<T extends NewsTranslationCreateArgs>(args: SelectSubset<T, NewsTranslationCreateArgs<ExtArgs>>): Prisma__NewsTranslationClient<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NewsTranslations.
     * @param {NewsTranslationCreateManyArgs} args - Arguments to create many NewsTranslations.
     * @example
     * // Create many NewsTranslations
     * const newsTranslation = await prisma.newsTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewsTranslationCreateManyArgs>(args?: SelectSubset<T, NewsTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NewsTranslation.
     * @param {NewsTranslationDeleteArgs} args - Arguments to delete one NewsTranslation.
     * @example
     * // Delete one NewsTranslation
     * const NewsTranslation = await prisma.newsTranslation.delete({
     *   where: {
     *     // ... filter to delete one NewsTranslation
     *   }
     * })
     * 
     */
    delete<T extends NewsTranslationDeleteArgs>(args: SelectSubset<T, NewsTranslationDeleteArgs<ExtArgs>>): Prisma__NewsTranslationClient<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NewsTranslation.
     * @param {NewsTranslationUpdateArgs} args - Arguments to update one NewsTranslation.
     * @example
     * // Update one NewsTranslation
     * const newsTranslation = await prisma.newsTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewsTranslationUpdateArgs>(args: SelectSubset<T, NewsTranslationUpdateArgs<ExtArgs>>): Prisma__NewsTranslationClient<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NewsTranslations.
     * @param {NewsTranslationDeleteManyArgs} args - Arguments to filter NewsTranslations to delete.
     * @example
     * // Delete a few NewsTranslations
     * const { count } = await prisma.newsTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewsTranslationDeleteManyArgs>(args?: SelectSubset<T, NewsTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewsTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewsTranslations
     * const newsTranslation = await prisma.newsTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewsTranslationUpdateManyArgs>(args: SelectSubset<T, NewsTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NewsTranslation.
     * @param {NewsTranslationUpsertArgs} args - Arguments to update or create a NewsTranslation.
     * @example
     * // Update or create a NewsTranslation
     * const newsTranslation = await prisma.newsTranslation.upsert({
     *   create: {
     *     // ... data to create a NewsTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewsTranslation we want to update
     *   }
     * })
     */
    upsert<T extends NewsTranslationUpsertArgs>(args: SelectSubset<T, NewsTranslationUpsertArgs<ExtArgs>>): Prisma__NewsTranslationClient<$Result.GetResult<Prisma.$NewsTranslationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NewsTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsTranslationCountArgs} args - Arguments to filter NewsTranslations to count.
     * @example
     * // Count the number of NewsTranslations
     * const count = await prisma.newsTranslation.count({
     *   where: {
     *     // ... the filter for the NewsTranslations we want to count
     *   }
     * })
    **/
    count<T extends NewsTranslationCountArgs>(
      args?: Subset<T, NewsTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewsTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsTranslationAggregateArgs>(args: Subset<T, NewsTranslationAggregateArgs>): Prisma.PrismaPromise<GetNewsTranslationAggregateType<T>>

    /**
     * Group by NewsTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsTranslationGroupByArgs['orderBy'] }
        : { orderBy?: NewsTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NewsTranslation model
   */
  readonly fields: NewsTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NewsTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    News<T extends NewsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NewsDefaultArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NewsTranslation model
   */ 
  interface NewsTranslationFieldRefs {
    readonly id: FieldRef<"NewsTranslation", 'Int'>
    readonly news_id: FieldRef<"NewsTranslation", 'Int'>
    readonly language: FieldRef<"NewsTranslation", 'String'>
    readonly title: FieldRef<"NewsTranslation", 'String'>
    readonly content: FieldRef<"NewsTranslation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NewsTranslation findUnique
   */
  export type NewsTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsTranslation to fetch.
     */
    where: NewsTranslationWhereUniqueInput
  }

  /**
   * NewsTranslation findUniqueOrThrow
   */
  export type NewsTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsTranslation to fetch.
     */
    where: NewsTranslationWhereUniqueInput
  }

  /**
   * NewsTranslation findFirst
   */
  export type NewsTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsTranslation to fetch.
     */
    where?: NewsTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsTranslations to fetch.
     */
    orderBy?: NewsTranslationOrderByWithRelationInput | NewsTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsTranslations.
     */
    cursor?: NewsTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsTranslations.
     */
    distinct?: NewsTranslationScalarFieldEnum | NewsTranslationScalarFieldEnum[]
  }

  /**
   * NewsTranslation findFirstOrThrow
   */
  export type NewsTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsTranslation to fetch.
     */
    where?: NewsTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsTranslations to fetch.
     */
    orderBy?: NewsTranslationOrderByWithRelationInput | NewsTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsTranslations.
     */
    cursor?: NewsTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsTranslations.
     */
    distinct?: NewsTranslationScalarFieldEnum | NewsTranslationScalarFieldEnum[]
  }

  /**
   * NewsTranslation findMany
   */
  export type NewsTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which NewsTranslations to fetch.
     */
    where?: NewsTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsTranslations to fetch.
     */
    orderBy?: NewsTranslationOrderByWithRelationInput | NewsTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NewsTranslations.
     */
    cursor?: NewsTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsTranslations.
     */
    skip?: number
    distinct?: NewsTranslationScalarFieldEnum | NewsTranslationScalarFieldEnum[]
  }

  /**
   * NewsTranslation create
   */
  export type NewsTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a NewsTranslation.
     */
    data: XOR<NewsTranslationCreateInput, NewsTranslationUncheckedCreateInput>
  }

  /**
   * NewsTranslation createMany
   */
  export type NewsTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NewsTranslations.
     */
    data: NewsTranslationCreateManyInput | NewsTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NewsTranslation update
   */
  export type NewsTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a NewsTranslation.
     */
    data: XOR<NewsTranslationUpdateInput, NewsTranslationUncheckedUpdateInput>
    /**
     * Choose, which NewsTranslation to update.
     */
    where: NewsTranslationWhereUniqueInput
  }

  /**
   * NewsTranslation updateMany
   */
  export type NewsTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NewsTranslations.
     */
    data: XOR<NewsTranslationUpdateManyMutationInput, NewsTranslationUncheckedUpdateManyInput>
    /**
     * Filter which NewsTranslations to update
     */
    where?: NewsTranslationWhereInput
  }

  /**
   * NewsTranslation upsert
   */
  export type NewsTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the NewsTranslation to update in case it exists.
     */
    where: NewsTranslationWhereUniqueInput
    /**
     * In case the NewsTranslation found by the `where` argument doesn't exist, create a new NewsTranslation with this data.
     */
    create: XOR<NewsTranslationCreateInput, NewsTranslationUncheckedCreateInput>
    /**
     * In case the NewsTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsTranslationUpdateInput, NewsTranslationUncheckedUpdateInput>
  }

  /**
   * NewsTranslation delete
   */
  export type NewsTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
    /**
     * Filter which NewsTranslation to delete.
     */
    where: NewsTranslationWhereUniqueInput
  }

  /**
   * NewsTranslation deleteMany
   */
  export type NewsTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsTranslations to delete
     */
    where?: NewsTranslationWhereInput
  }

  /**
   * NewsTranslation without action
   */
  export type NewsTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsTranslation
     */
    select?: NewsTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsTranslationInclude<ExtArgs> | null
  }


  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    id: number | null
  }

  export type ServiceSumAggregateOutputType = {
    id: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: number | null
    main_image: string | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: number | null
    main_image: string | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    main_image: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    id?: true
  }

  export type ServiceSumAggregateInputType = {
    id?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    main_image?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    main_image?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    main_image?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: number
    main_image: string
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    main_image?: boolean
    ServiceTranslation?: boolean | Service$ServiceTranslationArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>


  export type ServiceSelectScalar = {
    id?: boolean
    main_image?: boolean
  }

  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceTranslation?: boolean | Service$ServiceTranslationArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      ServiceTranslation: Prisma.$ServiceTranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      main_image: string
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceFindUniqueArgs>(args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceFindFirstArgs>(args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceFindManyArgs>(args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends ServiceCreateArgs>(args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Services.
     * @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCreateManyArgs>(args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends ServiceDeleteArgs>(args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceUpdateArgs>(args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceDeleteManyArgs>(args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceUpdateManyArgs>(args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends ServiceUpsertArgs>(args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ServiceTranslation<T extends Service$ServiceTranslationArgs<ExtArgs> = {}>(args?: Subset<T, Service$ServiceTranslationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Service model
   */ 
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'Int'>
    readonly main_image: FieldRef<"Service", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }

  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
  }

  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }

  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
  }

  /**
   * Service.ServiceTranslation
   */
  export type Service$ServiceTranslationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    where?: ServiceTranslationWhereInput
    orderBy?: ServiceTranslationOrderByWithRelationInput | ServiceTranslationOrderByWithRelationInput[]
    cursor?: ServiceTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceTranslationScalarFieldEnum | ServiceTranslationScalarFieldEnum[]
  }

  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
  }


  /**
   * Model ServiceTranslation
   */

  export type AggregateServiceTranslation = {
    _count: ServiceTranslationCountAggregateOutputType | null
    _avg: ServiceTranslationAvgAggregateOutputType | null
    _sum: ServiceTranslationSumAggregateOutputType | null
    _min: ServiceTranslationMinAggregateOutputType | null
    _max: ServiceTranslationMaxAggregateOutputType | null
  }

  export type ServiceTranslationAvgAggregateOutputType = {
    id: number | null
    service_id: number | null
  }

  export type ServiceTranslationSumAggregateOutputType = {
    id: number | null
    service_id: number | null
  }

  export type ServiceTranslationMinAggregateOutputType = {
    id: number | null
    service_id: number | null
    language: string | null
    title: string | null
    content: string | null
  }

  export type ServiceTranslationMaxAggregateOutputType = {
    id: number | null
    service_id: number | null
    language: string | null
    title: string | null
    content: string | null
  }

  export type ServiceTranslationCountAggregateOutputType = {
    id: number
    service_id: number
    language: number
    title: number
    content: number
    features: number
    _all: number
  }


  export type ServiceTranslationAvgAggregateInputType = {
    id?: true
    service_id?: true
  }

  export type ServiceTranslationSumAggregateInputType = {
    id?: true
    service_id?: true
  }

  export type ServiceTranslationMinAggregateInputType = {
    id?: true
    service_id?: true
    language?: true
    title?: true
    content?: true
  }

  export type ServiceTranslationMaxAggregateInputType = {
    id?: true
    service_id?: true
    language?: true
    title?: true
    content?: true
  }

  export type ServiceTranslationCountAggregateInputType = {
    id?: true
    service_id?: true
    language?: true
    title?: true
    content?: true
    features?: true
    _all?: true
  }

  export type ServiceTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceTranslation to aggregate.
     */
    where?: ServiceTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceTranslations to fetch.
     */
    orderBy?: ServiceTranslationOrderByWithRelationInput | ServiceTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceTranslations
    **/
    _count?: true | ServiceTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceTranslationMaxAggregateInputType
  }

  export type GetServiceTranslationAggregateType<T extends ServiceTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceTranslation[P]>
      : GetScalarType<T[P], AggregateServiceTranslation[P]>
  }




  export type ServiceTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceTranslationWhereInput
    orderBy?: ServiceTranslationOrderByWithAggregationInput | ServiceTranslationOrderByWithAggregationInput[]
    by: ServiceTranslationScalarFieldEnum[] | ServiceTranslationScalarFieldEnum
    having?: ServiceTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceTranslationCountAggregateInputType | true
    _avg?: ServiceTranslationAvgAggregateInputType
    _sum?: ServiceTranslationSumAggregateInputType
    _min?: ServiceTranslationMinAggregateInputType
    _max?: ServiceTranslationMaxAggregateInputType
  }

  export type ServiceTranslationGroupByOutputType = {
    id: number
    service_id: number
    language: string
    title: string
    content: string
    features: JsonValue
    _count: ServiceTranslationCountAggregateOutputType | null
    _avg: ServiceTranslationAvgAggregateOutputType | null
    _sum: ServiceTranslationSumAggregateOutputType | null
    _min: ServiceTranslationMinAggregateOutputType | null
    _max: ServiceTranslationMaxAggregateOutputType | null
  }

  type GetServiceTranslationGroupByPayload<T extends ServiceTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceTranslationGroupByOutputType[P]>
        }
      >
    >


  export type ServiceTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    service_id?: boolean
    language?: boolean
    title?: boolean
    content?: boolean
    features?: boolean
    Service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceTranslation"]>


  export type ServiceTranslationSelectScalar = {
    id?: boolean
    service_id?: boolean
    language?: boolean
    title?: boolean
    content?: boolean
    features?: boolean
  }

  export type ServiceTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Service?: boolean | ServiceDefaultArgs<ExtArgs>
  }

  export type $ServiceTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceTranslation"
    objects: {
      Service: Prisma.$ServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      service_id: number
      language: string
      title: string
      content: string
      features: Prisma.JsonValue
    }, ExtArgs["result"]["serviceTranslation"]>
    composites: {}
  }

  type ServiceTranslationGetPayload<S extends boolean | null | undefined | ServiceTranslationDefaultArgs> = $Result.GetResult<Prisma.$ServiceTranslationPayload, S>

  type ServiceTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServiceTranslationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServiceTranslationCountAggregateInputType | true
    }

  export interface ServiceTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceTranslation'], meta: { name: 'ServiceTranslation' } }
    /**
     * Find zero or one ServiceTranslation that matches the filter.
     * @param {ServiceTranslationFindUniqueArgs} args - Arguments to find a ServiceTranslation
     * @example
     * // Get one ServiceTranslation
     * const serviceTranslation = await prisma.serviceTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceTranslationFindUniqueArgs>(args: SelectSubset<T, ServiceTranslationFindUniqueArgs<ExtArgs>>): Prisma__ServiceTranslationClient<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ServiceTranslation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ServiceTranslationFindUniqueOrThrowArgs} args - Arguments to find a ServiceTranslation
     * @example
     * // Get one ServiceTranslation
     * const serviceTranslation = await prisma.serviceTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceTranslationClient<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ServiceTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTranslationFindFirstArgs} args - Arguments to find a ServiceTranslation
     * @example
     * // Get one ServiceTranslation
     * const serviceTranslation = await prisma.serviceTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceTranslationFindFirstArgs>(args?: SelectSubset<T, ServiceTranslationFindFirstArgs<ExtArgs>>): Prisma__ServiceTranslationClient<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ServiceTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTranslationFindFirstOrThrowArgs} args - Arguments to find a ServiceTranslation
     * @example
     * // Get one ServiceTranslation
     * const serviceTranslation = await prisma.serviceTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceTranslationClient<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ServiceTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceTranslations
     * const serviceTranslations = await prisma.serviceTranslation.findMany()
     * 
     * // Get first 10 ServiceTranslations
     * const serviceTranslations = await prisma.serviceTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceTranslationWithIdOnly = await prisma.serviceTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceTranslationFindManyArgs>(args?: SelectSubset<T, ServiceTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ServiceTranslation.
     * @param {ServiceTranslationCreateArgs} args - Arguments to create a ServiceTranslation.
     * @example
     * // Create one ServiceTranslation
     * const ServiceTranslation = await prisma.serviceTranslation.create({
     *   data: {
     *     // ... data to create a ServiceTranslation
     *   }
     * })
     * 
     */
    create<T extends ServiceTranslationCreateArgs>(args: SelectSubset<T, ServiceTranslationCreateArgs<ExtArgs>>): Prisma__ServiceTranslationClient<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ServiceTranslations.
     * @param {ServiceTranslationCreateManyArgs} args - Arguments to create many ServiceTranslations.
     * @example
     * // Create many ServiceTranslations
     * const serviceTranslation = await prisma.serviceTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceTranslationCreateManyArgs>(args?: SelectSubset<T, ServiceTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceTranslation.
     * @param {ServiceTranslationDeleteArgs} args - Arguments to delete one ServiceTranslation.
     * @example
     * // Delete one ServiceTranslation
     * const ServiceTranslation = await prisma.serviceTranslation.delete({
     *   where: {
     *     // ... filter to delete one ServiceTranslation
     *   }
     * })
     * 
     */
    delete<T extends ServiceTranslationDeleteArgs>(args: SelectSubset<T, ServiceTranslationDeleteArgs<ExtArgs>>): Prisma__ServiceTranslationClient<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ServiceTranslation.
     * @param {ServiceTranslationUpdateArgs} args - Arguments to update one ServiceTranslation.
     * @example
     * // Update one ServiceTranslation
     * const serviceTranslation = await prisma.serviceTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceTranslationUpdateArgs>(args: SelectSubset<T, ServiceTranslationUpdateArgs<ExtArgs>>): Prisma__ServiceTranslationClient<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ServiceTranslations.
     * @param {ServiceTranslationDeleteManyArgs} args - Arguments to filter ServiceTranslations to delete.
     * @example
     * // Delete a few ServiceTranslations
     * const { count } = await prisma.serviceTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceTranslationDeleteManyArgs>(args?: SelectSubset<T, ServiceTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceTranslations
     * const serviceTranslation = await prisma.serviceTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceTranslationUpdateManyArgs>(args: SelectSubset<T, ServiceTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceTranslation.
     * @param {ServiceTranslationUpsertArgs} args - Arguments to update or create a ServiceTranslation.
     * @example
     * // Update or create a ServiceTranslation
     * const serviceTranslation = await prisma.serviceTranslation.upsert({
     *   create: {
     *     // ... data to create a ServiceTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceTranslation we want to update
     *   }
     * })
     */
    upsert<T extends ServiceTranslationUpsertArgs>(args: SelectSubset<T, ServiceTranslationUpsertArgs<ExtArgs>>): Prisma__ServiceTranslationClient<$Result.GetResult<Prisma.$ServiceTranslationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ServiceTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTranslationCountArgs} args - Arguments to filter ServiceTranslations to count.
     * @example
     * // Count the number of ServiceTranslations
     * const count = await prisma.serviceTranslation.count({
     *   where: {
     *     // ... the filter for the ServiceTranslations we want to count
     *   }
     * })
    **/
    count<T extends ServiceTranslationCountArgs>(
      args?: Subset<T, ServiceTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceTranslationAggregateArgs>(args: Subset<T, ServiceTranslationAggregateArgs>): Prisma.PrismaPromise<GetServiceTranslationAggregateType<T>>

    /**
     * Group by ServiceTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceTranslationGroupByArgs['orderBy'] }
        : { orderBy?: ServiceTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceTranslation model
   */
  readonly fields: ServiceTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceTranslation model
   */ 
  interface ServiceTranslationFieldRefs {
    readonly id: FieldRef<"ServiceTranslation", 'Int'>
    readonly service_id: FieldRef<"ServiceTranslation", 'Int'>
    readonly language: FieldRef<"ServiceTranslation", 'String'>
    readonly title: FieldRef<"ServiceTranslation", 'String'>
    readonly content: FieldRef<"ServiceTranslation", 'String'>
    readonly features: FieldRef<"ServiceTranslation", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ServiceTranslation findUnique
   */
  export type ServiceTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ServiceTranslation to fetch.
     */
    where: ServiceTranslationWhereUniqueInput
  }

  /**
   * ServiceTranslation findUniqueOrThrow
   */
  export type ServiceTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ServiceTranslation to fetch.
     */
    where: ServiceTranslationWhereUniqueInput
  }

  /**
   * ServiceTranslation findFirst
   */
  export type ServiceTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ServiceTranslation to fetch.
     */
    where?: ServiceTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceTranslations to fetch.
     */
    orderBy?: ServiceTranslationOrderByWithRelationInput | ServiceTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceTranslations.
     */
    cursor?: ServiceTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceTranslations.
     */
    distinct?: ServiceTranslationScalarFieldEnum | ServiceTranslationScalarFieldEnum[]
  }

  /**
   * ServiceTranslation findFirstOrThrow
   */
  export type ServiceTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ServiceTranslation to fetch.
     */
    where?: ServiceTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceTranslations to fetch.
     */
    orderBy?: ServiceTranslationOrderByWithRelationInput | ServiceTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceTranslations.
     */
    cursor?: ServiceTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceTranslations.
     */
    distinct?: ServiceTranslationScalarFieldEnum | ServiceTranslationScalarFieldEnum[]
  }

  /**
   * ServiceTranslation findMany
   */
  export type ServiceTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ServiceTranslations to fetch.
     */
    where?: ServiceTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceTranslations to fetch.
     */
    orderBy?: ServiceTranslationOrderByWithRelationInput | ServiceTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceTranslations.
     */
    cursor?: ServiceTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceTranslations.
     */
    skip?: number
    distinct?: ServiceTranslationScalarFieldEnum | ServiceTranslationScalarFieldEnum[]
  }

  /**
   * ServiceTranslation create
   */
  export type ServiceTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceTranslation.
     */
    data: XOR<ServiceTranslationCreateInput, ServiceTranslationUncheckedCreateInput>
  }

  /**
   * ServiceTranslation createMany
   */
  export type ServiceTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceTranslations.
     */
    data: ServiceTranslationCreateManyInput | ServiceTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceTranslation update
   */
  export type ServiceTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceTranslation.
     */
    data: XOR<ServiceTranslationUpdateInput, ServiceTranslationUncheckedUpdateInput>
    /**
     * Choose, which ServiceTranslation to update.
     */
    where: ServiceTranslationWhereUniqueInput
  }

  /**
   * ServiceTranslation updateMany
   */
  export type ServiceTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceTranslations.
     */
    data: XOR<ServiceTranslationUpdateManyMutationInput, ServiceTranslationUncheckedUpdateManyInput>
    /**
     * Filter which ServiceTranslations to update
     */
    where?: ServiceTranslationWhereInput
  }

  /**
   * ServiceTranslation upsert
   */
  export type ServiceTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceTranslation to update in case it exists.
     */
    where: ServiceTranslationWhereUniqueInput
    /**
     * In case the ServiceTranslation found by the `where` argument doesn't exist, create a new ServiceTranslation with this data.
     */
    create: XOR<ServiceTranslationCreateInput, ServiceTranslationUncheckedCreateInput>
    /**
     * In case the ServiceTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceTranslationUpdateInput, ServiceTranslationUncheckedUpdateInput>
  }

  /**
   * ServiceTranslation delete
   */
  export type ServiceTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter which ServiceTranslation to delete.
     */
    where: ServiceTranslationWhereUniqueInput
  }

  /**
   * ServiceTranslation deleteMany
   */
  export type ServiceTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceTranslations to delete
     */
    where?: ServiceTranslationWhereInput
  }

  /**
   * ServiceTranslation without action
   */
  export type ServiceTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceTranslation
     */
    select?: ServiceTranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceTranslationInclude<ExtArgs> | null
  }


  /**
   * Model Container
   */

  export type AggregateContainer = {
    _count: ContainerCountAggregateOutputType | null
    _avg: ContainerAvgAggregateOutputType | null
    _sum: ContainerSumAggregateOutputType | null
    _min: ContainerMinAggregateOutputType | null
    _max: ContainerMaxAggregateOutputType | null
  }

  export type ContainerAvgAggregateOutputType = {
    id: number | null
    weight: number | null
  }

  export type ContainerSumAggregateOutputType = {
    id: number | null
    weight: number | null
  }

  export type ContainerMinAggregateOutputType = {
    id: number | null
    weight: number | null
    vehicleNumber: string | null
    containerNumber: string | null
    customer: string | null
    importExport: $Enums.ImportExport | null
    shippingLine: string | null
    seal: string | null
    serviceType: string | null
    yardInDate: Date | null
    yardOutDate: Date | null
    yardPosition: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContainerMaxAggregateOutputType = {
    id: number | null
    weight: number | null
    vehicleNumber: string | null
    containerNumber: string | null
    customer: string | null
    importExport: $Enums.ImportExport | null
    shippingLine: string | null
    seal: string | null
    serviceType: string | null
    yardInDate: Date | null
    yardOutDate: Date | null
    yardPosition: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContainerCountAggregateOutputType = {
    id: number
    weight: number
    vehicleNumber: number
    containerNumber: number
    customer: number
    importExport: number
    shippingLine: number
    seal: number
    serviceType: number
    yardInDate: number
    yardOutDate: number
    yardPosition: number
    note: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContainerAvgAggregateInputType = {
    id?: true
    weight?: true
  }

  export type ContainerSumAggregateInputType = {
    id?: true
    weight?: true
  }

  export type ContainerMinAggregateInputType = {
    id?: true
    weight?: true
    vehicleNumber?: true
    containerNumber?: true
    customer?: true
    importExport?: true
    shippingLine?: true
    seal?: true
    serviceType?: true
    yardInDate?: true
    yardOutDate?: true
    yardPosition?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContainerMaxAggregateInputType = {
    id?: true
    weight?: true
    vehicleNumber?: true
    containerNumber?: true
    customer?: true
    importExport?: true
    shippingLine?: true
    seal?: true
    serviceType?: true
    yardInDate?: true
    yardOutDate?: true
    yardPosition?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContainerCountAggregateInputType = {
    id?: true
    weight?: true
    vehicleNumber?: true
    containerNumber?: true
    customer?: true
    importExport?: true
    shippingLine?: true
    seal?: true
    serviceType?: true
    yardInDate?: true
    yardOutDate?: true
    yardPosition?: true
    note?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContainerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Container to aggregate.
     */
    where?: ContainerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Containers to fetch.
     */
    orderBy?: ContainerOrderByWithRelationInput | ContainerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContainerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Containers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Containers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Containers
    **/
    _count?: true | ContainerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContainerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContainerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContainerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContainerMaxAggregateInputType
  }

  export type GetContainerAggregateType<T extends ContainerAggregateArgs> = {
        [P in keyof T & keyof AggregateContainer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContainer[P]>
      : GetScalarType<T[P], AggregateContainer[P]>
  }




  export type ContainerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContainerWhereInput
    orderBy?: ContainerOrderByWithAggregationInput | ContainerOrderByWithAggregationInput[]
    by: ContainerScalarFieldEnum[] | ContainerScalarFieldEnum
    having?: ContainerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContainerCountAggregateInputType | true
    _avg?: ContainerAvgAggregateInputType
    _sum?: ContainerSumAggregateInputType
    _min?: ContainerMinAggregateInputType
    _max?: ContainerMaxAggregateInputType
  }

  export type ContainerGroupByOutputType = {
    id: number
    weight: number | null
    vehicleNumber: string | null
    containerNumber: string
    customer: string | null
    importExport: $Enums.ImportExport
    shippingLine: string | null
    seal: string | null
    serviceType: string | null
    yardInDate: Date | null
    yardOutDate: Date | null
    yardPosition: string | null
    note: string | null
    createdAt: Date
    updatedAt: Date
    _count: ContainerCountAggregateOutputType | null
    _avg: ContainerAvgAggregateOutputType | null
    _sum: ContainerSumAggregateOutputType | null
    _min: ContainerMinAggregateOutputType | null
    _max: ContainerMaxAggregateOutputType | null
  }

  type GetContainerGroupByPayload<T extends ContainerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContainerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContainerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContainerGroupByOutputType[P]>
            : GetScalarType<T[P], ContainerGroupByOutputType[P]>
        }
      >
    >


  export type ContainerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    weight?: boolean
    vehicleNumber?: boolean
    containerNumber?: boolean
    customer?: boolean
    importExport?: boolean
    shippingLine?: boolean
    seal?: boolean
    serviceType?: boolean
    yardInDate?: boolean
    yardOutDate?: boolean
    yardPosition?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["container"]>


  export type ContainerSelectScalar = {
    id?: boolean
    weight?: boolean
    vehicleNumber?: boolean
    containerNumber?: boolean
    customer?: boolean
    importExport?: boolean
    shippingLine?: boolean
    seal?: boolean
    serviceType?: boolean
    yardInDate?: boolean
    yardOutDate?: boolean
    yardPosition?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ContainerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Container"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      weight: number | null
      vehicleNumber: string | null
      containerNumber: string
      customer: string | null
      importExport: $Enums.ImportExport
      shippingLine: string | null
      seal: string | null
      serviceType: string | null
      yardInDate: Date | null
      yardOutDate: Date | null
      yardPosition: string | null
      note: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["container"]>
    composites: {}
  }

  type ContainerGetPayload<S extends boolean | null | undefined | ContainerDefaultArgs> = $Result.GetResult<Prisma.$ContainerPayload, S>

  type ContainerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContainerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContainerCountAggregateInputType | true
    }

  export interface ContainerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Container'], meta: { name: 'Container' } }
    /**
     * Find zero or one Container that matches the filter.
     * @param {ContainerFindUniqueArgs} args - Arguments to find a Container
     * @example
     * // Get one Container
     * const container = await prisma.container.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContainerFindUniqueArgs>(args: SelectSubset<T, ContainerFindUniqueArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Container that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContainerFindUniqueOrThrowArgs} args - Arguments to find a Container
     * @example
     * // Get one Container
     * const container = await prisma.container.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContainerFindUniqueOrThrowArgs>(args: SelectSubset<T, ContainerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Container that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerFindFirstArgs} args - Arguments to find a Container
     * @example
     * // Get one Container
     * const container = await prisma.container.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContainerFindFirstArgs>(args?: SelectSubset<T, ContainerFindFirstArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Container that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerFindFirstOrThrowArgs} args - Arguments to find a Container
     * @example
     * // Get one Container
     * const container = await prisma.container.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContainerFindFirstOrThrowArgs>(args?: SelectSubset<T, ContainerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Containers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Containers
     * const containers = await prisma.container.findMany()
     * 
     * // Get first 10 Containers
     * const containers = await prisma.container.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const containerWithIdOnly = await prisma.container.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContainerFindManyArgs>(args?: SelectSubset<T, ContainerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Container.
     * @param {ContainerCreateArgs} args - Arguments to create a Container.
     * @example
     * // Create one Container
     * const Container = await prisma.container.create({
     *   data: {
     *     // ... data to create a Container
     *   }
     * })
     * 
     */
    create<T extends ContainerCreateArgs>(args: SelectSubset<T, ContainerCreateArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Containers.
     * @param {ContainerCreateManyArgs} args - Arguments to create many Containers.
     * @example
     * // Create many Containers
     * const container = await prisma.container.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContainerCreateManyArgs>(args?: SelectSubset<T, ContainerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Container.
     * @param {ContainerDeleteArgs} args - Arguments to delete one Container.
     * @example
     * // Delete one Container
     * const Container = await prisma.container.delete({
     *   where: {
     *     // ... filter to delete one Container
     *   }
     * })
     * 
     */
    delete<T extends ContainerDeleteArgs>(args: SelectSubset<T, ContainerDeleteArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Container.
     * @param {ContainerUpdateArgs} args - Arguments to update one Container.
     * @example
     * // Update one Container
     * const container = await prisma.container.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContainerUpdateArgs>(args: SelectSubset<T, ContainerUpdateArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Containers.
     * @param {ContainerDeleteManyArgs} args - Arguments to filter Containers to delete.
     * @example
     * // Delete a few Containers
     * const { count } = await prisma.container.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContainerDeleteManyArgs>(args?: SelectSubset<T, ContainerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Containers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Containers
     * const container = await prisma.container.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContainerUpdateManyArgs>(args: SelectSubset<T, ContainerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Container.
     * @param {ContainerUpsertArgs} args - Arguments to update or create a Container.
     * @example
     * // Update or create a Container
     * const container = await prisma.container.upsert({
     *   create: {
     *     // ... data to create a Container
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Container we want to update
     *   }
     * })
     */
    upsert<T extends ContainerUpsertArgs>(args: SelectSubset<T, ContainerUpsertArgs<ExtArgs>>): Prisma__ContainerClient<$Result.GetResult<Prisma.$ContainerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Containers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerCountArgs} args - Arguments to filter Containers to count.
     * @example
     * // Count the number of Containers
     * const count = await prisma.container.count({
     *   where: {
     *     // ... the filter for the Containers we want to count
     *   }
     * })
    **/
    count<T extends ContainerCountArgs>(
      args?: Subset<T, ContainerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContainerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Container.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContainerAggregateArgs>(args: Subset<T, ContainerAggregateArgs>): Prisma.PrismaPromise<GetContainerAggregateType<T>>

    /**
     * Group by Container.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContainerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContainerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContainerGroupByArgs['orderBy'] }
        : { orderBy?: ContainerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContainerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContainerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Container model
   */
  readonly fields: ContainerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Container.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContainerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Container model
   */ 
  interface ContainerFieldRefs {
    readonly id: FieldRef<"Container", 'Int'>
    readonly weight: FieldRef<"Container", 'Float'>
    readonly vehicleNumber: FieldRef<"Container", 'String'>
    readonly containerNumber: FieldRef<"Container", 'String'>
    readonly customer: FieldRef<"Container", 'String'>
    readonly importExport: FieldRef<"Container", 'ImportExport'>
    readonly shippingLine: FieldRef<"Container", 'String'>
    readonly seal: FieldRef<"Container", 'String'>
    readonly serviceType: FieldRef<"Container", 'String'>
    readonly yardInDate: FieldRef<"Container", 'DateTime'>
    readonly yardOutDate: FieldRef<"Container", 'DateTime'>
    readonly yardPosition: FieldRef<"Container", 'String'>
    readonly note: FieldRef<"Container", 'String'>
    readonly createdAt: FieldRef<"Container", 'DateTime'>
    readonly updatedAt: FieldRef<"Container", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Container findUnique
   */
  export type ContainerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Filter, which Container to fetch.
     */
    where: ContainerWhereUniqueInput
  }

  /**
   * Container findUniqueOrThrow
   */
  export type ContainerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Filter, which Container to fetch.
     */
    where: ContainerWhereUniqueInput
  }

  /**
   * Container findFirst
   */
  export type ContainerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Filter, which Container to fetch.
     */
    where?: ContainerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Containers to fetch.
     */
    orderBy?: ContainerOrderByWithRelationInput | ContainerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Containers.
     */
    cursor?: ContainerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Containers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Containers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Containers.
     */
    distinct?: ContainerScalarFieldEnum | ContainerScalarFieldEnum[]
  }

  /**
   * Container findFirstOrThrow
   */
  export type ContainerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Filter, which Container to fetch.
     */
    where?: ContainerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Containers to fetch.
     */
    orderBy?: ContainerOrderByWithRelationInput | ContainerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Containers.
     */
    cursor?: ContainerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Containers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Containers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Containers.
     */
    distinct?: ContainerScalarFieldEnum | ContainerScalarFieldEnum[]
  }

  /**
   * Container findMany
   */
  export type ContainerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Filter, which Containers to fetch.
     */
    where?: ContainerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Containers to fetch.
     */
    orderBy?: ContainerOrderByWithRelationInput | ContainerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Containers.
     */
    cursor?: ContainerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Containers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Containers.
     */
    skip?: number
    distinct?: ContainerScalarFieldEnum | ContainerScalarFieldEnum[]
  }

  /**
   * Container create
   */
  export type ContainerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * The data needed to create a Container.
     */
    data: XOR<ContainerCreateInput, ContainerUncheckedCreateInput>
  }

  /**
   * Container createMany
   */
  export type ContainerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Containers.
     */
    data: ContainerCreateManyInput | ContainerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Container update
   */
  export type ContainerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * The data needed to update a Container.
     */
    data: XOR<ContainerUpdateInput, ContainerUncheckedUpdateInput>
    /**
     * Choose, which Container to update.
     */
    where: ContainerWhereUniqueInput
  }

  /**
   * Container updateMany
   */
  export type ContainerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Containers.
     */
    data: XOR<ContainerUpdateManyMutationInput, ContainerUncheckedUpdateManyInput>
    /**
     * Filter which Containers to update
     */
    where?: ContainerWhereInput
  }

  /**
   * Container upsert
   */
  export type ContainerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * The filter to search for the Container to update in case it exists.
     */
    where: ContainerWhereUniqueInput
    /**
     * In case the Container found by the `where` argument doesn't exist, create a new Container with this data.
     */
    create: XOR<ContainerCreateInput, ContainerUncheckedCreateInput>
    /**
     * In case the Container was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContainerUpdateInput, ContainerUncheckedUpdateInput>
  }

  /**
   * Container delete
   */
  export type ContainerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
    /**
     * Filter which Container to delete.
     */
    where: ContainerWhereUniqueInput
  }

  /**
   * Container deleteMany
   */
  export type ContainerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Containers to delete
     */
    where?: ContainerWhereInput
  }

  /**
   * Container without action
   */
  export type ContainerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Container
     */
    select?: ContainerSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password_hash: 'password_hash',
    role_id: 'role_id',
    avatar: 'avatar',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    action: 'action',
    subject: 'subject'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const JobArticleScalarFieldEnum: {
    id: 'id',
    author_id: 'author_id',
    status: 'status',
    published_at: 'published_at',
    created_at: 'created_at',
    job_deadline: 'job_deadline',
    primary_image: 'primary_image',
    updated_at: 'updated_at'
  };

  export type JobArticleScalarFieldEnum = (typeof JobArticleScalarFieldEnum)[keyof typeof JobArticleScalarFieldEnum]


  export const JobArticleTranslationScalarFieldEnum: {
    id: 'id',
    language: 'language',
    slug: 'slug',
    content: 'content',
    job_article_id: 'job_article_id',
    job_benefits: 'job_benefits',
    job_description: 'job_description',
    job_location: 'job_location',
    job_position: 'job_position',
    job_requirements: 'job_requirements',
    job_title: 'job_title',
    meta_description: 'meta_description',
    meta_title: 'meta_title'
  };

  export type JobArticleTranslationScalarFieldEnum = (typeof JobArticleTranslationScalarFieldEnum)[keyof typeof JobArticleTranslationScalarFieldEnum]


  export const NewsCategoryScalarFieldEnum: {
    id: 'id'
  };

  export type NewsCategoryScalarFieldEnum = (typeof NewsCategoryScalarFieldEnum)[keyof typeof NewsCategoryScalarFieldEnum]


  export const NewsCategoryTranslationScalarFieldEnum: {
    id: 'id',
    language: 'language',
    name: 'name',
    news_category_id: 'news_category_id'
  };

  export type NewsCategoryTranslationScalarFieldEnum = (typeof NewsCategoryTranslationScalarFieldEnum)[keyof typeof NewsCategoryTranslationScalarFieldEnum]


  export const SystemConfigScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SystemConfigScalarFieldEnum = (typeof SystemConfigScalarFieldEnum)[keyof typeof SystemConfigScalarFieldEnum]


  export const NewsScalarFieldEnum: {
    id: 'id',
    main_image: 'main_image',
    published_at: 'published_at',
    author_id: 'author_id',
    tag: 'tag',
    category_id: 'category_id'
  };

  export type NewsScalarFieldEnum = (typeof NewsScalarFieldEnum)[keyof typeof NewsScalarFieldEnum]


  export const NewsTranslationScalarFieldEnum: {
    id: 'id',
    news_id: 'news_id',
    language: 'language',
    title: 'title',
    content: 'content'
  };

  export type NewsTranslationScalarFieldEnum = (typeof NewsTranslationScalarFieldEnum)[keyof typeof NewsTranslationScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    main_image: 'main_image'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const ServiceTranslationScalarFieldEnum: {
    id: 'id',
    service_id: 'service_id',
    language: 'language',
    title: 'title',
    content: 'content',
    features: 'features'
  };

  export type ServiceTranslationScalarFieldEnum = (typeof ServiceTranslationScalarFieldEnum)[keyof typeof ServiceTranslationScalarFieldEnum]


  export const ContainerScalarFieldEnum: {
    id: 'id',
    weight: 'weight',
    vehicleNumber: 'vehicleNumber',
    containerNumber: 'containerNumber',
    customer: 'customer',
    importExport: 'importExport',
    shippingLine: 'shippingLine',
    seal: 'seal',
    serviceType: 'serviceType',
    yardInDate: 'yardInDate',
    yardOutDate: 'yardOutDate',
    yardPosition: 'yardPosition',
    note: 'note',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContainerScalarFieldEnum = (typeof ContainerScalarFieldEnum)[keyof typeof ContainerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'ArticleStatus'
   */
  export type EnumArticleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ArticleStatus'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'ImportExport'
   */
  export type EnumImportExportFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ImportExport'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    role_id?: IntFilter<"User"> | number
    avatar?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    job_articles?: JobArticleListRelationFilter
    News?: NewsListRelationFilter
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    role_id?: SortOrder
    avatar?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    job_articles?: JobArticleOrderByRelationAggregateInput
    News?: NewsOrderByRelationAggregateInput
    role?: RoleOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password_hash?: StringFilter<"User"> | string
    role_id?: IntFilter<"User"> | number
    avatar?: StringNullableFilter<"User"> | string | null
    job_articles?: JobArticleListRelationFilter
    News?: NewsListRelationFilter
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    role_id?: SortOrder
    avatar?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password_hash?: StringWithAggregatesFilter<"User"> | string
    role_id?: IntWithAggregatesFilter<"User"> | number
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    name?: StringFilter<"Role"> | string
    users?: UserListRelationFilter
    permissions?: PermissionListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
    permissions?: PermissionOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    users?: UserListRelationFilter
    permissions?: PermissionListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    name?: StringWithAggregatesFilter<"Role"> | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: IntFilter<"Permission"> | number
    action?: StringFilter<"Permission"> | string
    subject?: StringFilter<"Permission"> | string
    roles?: RoleListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    subject?: SortOrder
    roles?: RoleOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    action_subject?: PermissionActionSubjectCompoundUniqueInput
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    action?: StringFilter<"Permission"> | string
    subject?: StringFilter<"Permission"> | string
    roles?: RoleListRelationFilter
  }, "id" | "action_subject">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    subject?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _avg?: PermissionAvgOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
    _sum?: PermissionSumOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Permission"> | number
    action?: StringWithAggregatesFilter<"Permission"> | string
    subject?: StringWithAggregatesFilter<"Permission"> | string
  }

  export type JobArticleWhereInput = {
    AND?: JobArticleWhereInput | JobArticleWhereInput[]
    OR?: JobArticleWhereInput[]
    NOT?: JobArticleWhereInput | JobArticleWhereInput[]
    id?: IntFilter<"JobArticle"> | number
    author_id?: IntFilter<"JobArticle"> | number
    status?: EnumArticleStatusFilter<"JobArticle"> | $Enums.ArticleStatus
    published_at?: DateTimeNullableFilter<"JobArticle"> | Date | string | null
    created_at?: DateTimeFilter<"JobArticle"> | Date | string
    job_deadline?: DateTimeFilter<"JobArticle"> | Date | string
    primary_image?: StringFilter<"JobArticle"> | string
    updated_at?: DateTimeFilter<"JobArticle"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    translations?: JobArticleTranslationListRelationFilter
  }

  export type JobArticleOrderByWithRelationInput = {
    id?: SortOrder
    author_id?: SortOrder
    status?: SortOrder
    published_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    job_deadline?: SortOrder
    primary_image?: SortOrder
    updated_at?: SortOrder
    author?: UserOrderByWithRelationInput
    translations?: JobArticleTranslationOrderByRelationAggregateInput
  }

  export type JobArticleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobArticleWhereInput | JobArticleWhereInput[]
    OR?: JobArticleWhereInput[]
    NOT?: JobArticleWhereInput | JobArticleWhereInput[]
    author_id?: IntFilter<"JobArticle"> | number
    status?: EnumArticleStatusFilter<"JobArticle"> | $Enums.ArticleStatus
    published_at?: DateTimeNullableFilter<"JobArticle"> | Date | string | null
    created_at?: DateTimeFilter<"JobArticle"> | Date | string
    job_deadline?: DateTimeFilter<"JobArticle"> | Date | string
    primary_image?: StringFilter<"JobArticle"> | string
    updated_at?: DateTimeFilter<"JobArticle"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    translations?: JobArticleTranslationListRelationFilter
  }, "id">

  export type JobArticleOrderByWithAggregationInput = {
    id?: SortOrder
    author_id?: SortOrder
    status?: SortOrder
    published_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    job_deadline?: SortOrder
    primary_image?: SortOrder
    updated_at?: SortOrder
    _count?: JobArticleCountOrderByAggregateInput
    _avg?: JobArticleAvgOrderByAggregateInput
    _max?: JobArticleMaxOrderByAggregateInput
    _min?: JobArticleMinOrderByAggregateInput
    _sum?: JobArticleSumOrderByAggregateInput
  }

  export type JobArticleScalarWhereWithAggregatesInput = {
    AND?: JobArticleScalarWhereWithAggregatesInput | JobArticleScalarWhereWithAggregatesInput[]
    OR?: JobArticleScalarWhereWithAggregatesInput[]
    NOT?: JobArticleScalarWhereWithAggregatesInput | JobArticleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobArticle"> | number
    author_id?: IntWithAggregatesFilter<"JobArticle"> | number
    status?: EnumArticleStatusWithAggregatesFilter<"JobArticle"> | $Enums.ArticleStatus
    published_at?: DateTimeNullableWithAggregatesFilter<"JobArticle"> | Date | string | null
    created_at?: DateTimeWithAggregatesFilter<"JobArticle"> | Date | string
    job_deadline?: DateTimeWithAggregatesFilter<"JobArticle"> | Date | string
    primary_image?: StringWithAggregatesFilter<"JobArticle"> | string
    updated_at?: DateTimeWithAggregatesFilter<"JobArticle"> | Date | string
  }

  export type JobArticleTranslationWhereInput = {
    AND?: JobArticleTranslationWhereInput | JobArticleTranslationWhereInput[]
    OR?: JobArticleTranslationWhereInput[]
    NOT?: JobArticleTranslationWhereInput | JobArticleTranslationWhereInput[]
    id?: IntFilter<"JobArticleTranslation"> | number
    language?: StringFilter<"JobArticleTranslation"> | string
    slug?: StringNullableFilter<"JobArticleTranslation"> | string | null
    content?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_article_id?: IntFilter<"JobArticleTranslation"> | number
    job_benefits?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_description?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_location?: StringFilter<"JobArticleTranslation"> | string
    job_position?: StringFilter<"JobArticleTranslation"> | string
    job_requirements?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_title?: StringFilter<"JobArticleTranslation"> | string
    meta_description?: StringNullableFilter<"JobArticleTranslation"> | string | null
    meta_title?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_article?: XOR<JobArticleRelationFilter, JobArticleWhereInput>
  }

  export type JobArticleTranslationOrderByWithRelationInput = {
    id?: SortOrder
    language?: SortOrder
    slug?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    job_article_id?: SortOrder
    job_benefits?: SortOrderInput | SortOrder
    job_description?: SortOrderInput | SortOrder
    job_location?: SortOrder
    job_position?: SortOrder
    job_requirements?: SortOrderInput | SortOrder
    job_title?: SortOrder
    meta_description?: SortOrderInput | SortOrder
    meta_title?: SortOrderInput | SortOrder
    job_article?: JobArticleOrderByWithRelationInput
  }

  export type JobArticleTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    job_article_id_language?: JobArticleTranslationJob_article_idLanguageCompoundUniqueInput
    slug_language?: JobArticleTranslationSlugLanguageCompoundUniqueInput
    AND?: JobArticleTranslationWhereInput | JobArticleTranslationWhereInput[]
    OR?: JobArticleTranslationWhereInput[]
    NOT?: JobArticleTranslationWhereInput | JobArticleTranslationWhereInput[]
    language?: StringFilter<"JobArticleTranslation"> | string
    slug?: StringNullableFilter<"JobArticleTranslation"> | string | null
    content?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_article_id?: IntFilter<"JobArticleTranslation"> | number
    job_benefits?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_description?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_location?: StringFilter<"JobArticleTranslation"> | string
    job_position?: StringFilter<"JobArticleTranslation"> | string
    job_requirements?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_title?: StringFilter<"JobArticleTranslation"> | string
    meta_description?: StringNullableFilter<"JobArticleTranslation"> | string | null
    meta_title?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_article?: XOR<JobArticleRelationFilter, JobArticleWhereInput>
  }, "id" | "job_article_id_language" | "slug_language">

  export type JobArticleTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    language?: SortOrder
    slug?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    job_article_id?: SortOrder
    job_benefits?: SortOrderInput | SortOrder
    job_description?: SortOrderInput | SortOrder
    job_location?: SortOrder
    job_position?: SortOrder
    job_requirements?: SortOrderInput | SortOrder
    job_title?: SortOrder
    meta_description?: SortOrderInput | SortOrder
    meta_title?: SortOrderInput | SortOrder
    _count?: JobArticleTranslationCountOrderByAggregateInput
    _avg?: JobArticleTranslationAvgOrderByAggregateInput
    _max?: JobArticleTranslationMaxOrderByAggregateInput
    _min?: JobArticleTranslationMinOrderByAggregateInput
    _sum?: JobArticleTranslationSumOrderByAggregateInput
  }

  export type JobArticleTranslationScalarWhereWithAggregatesInput = {
    AND?: JobArticleTranslationScalarWhereWithAggregatesInput | JobArticleTranslationScalarWhereWithAggregatesInput[]
    OR?: JobArticleTranslationScalarWhereWithAggregatesInput[]
    NOT?: JobArticleTranslationScalarWhereWithAggregatesInput | JobArticleTranslationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobArticleTranslation"> | number
    language?: StringWithAggregatesFilter<"JobArticleTranslation"> | string
    slug?: StringNullableWithAggregatesFilter<"JobArticleTranslation"> | string | null
    content?: StringNullableWithAggregatesFilter<"JobArticleTranslation"> | string | null
    job_article_id?: IntWithAggregatesFilter<"JobArticleTranslation"> | number
    job_benefits?: StringNullableWithAggregatesFilter<"JobArticleTranslation"> | string | null
    job_description?: StringNullableWithAggregatesFilter<"JobArticleTranslation"> | string | null
    job_location?: StringWithAggregatesFilter<"JobArticleTranslation"> | string
    job_position?: StringWithAggregatesFilter<"JobArticleTranslation"> | string
    job_requirements?: StringNullableWithAggregatesFilter<"JobArticleTranslation"> | string | null
    job_title?: StringWithAggregatesFilter<"JobArticleTranslation"> | string
    meta_description?: StringNullableWithAggregatesFilter<"JobArticleTranslation"> | string | null
    meta_title?: StringNullableWithAggregatesFilter<"JobArticleTranslation"> | string | null
  }

  export type NewsCategoryWhereInput = {
    AND?: NewsCategoryWhereInput | NewsCategoryWhereInput[]
    OR?: NewsCategoryWhereInput[]
    NOT?: NewsCategoryWhereInput | NewsCategoryWhereInput[]
    id?: IntFilter<"NewsCategory"> | number
    News?: NewsListRelationFilter
    translations?: NewsCategoryTranslationListRelationFilter
  }

  export type NewsCategoryOrderByWithRelationInput = {
    id?: SortOrder
    News?: NewsOrderByRelationAggregateInput
    translations?: NewsCategoryTranslationOrderByRelationAggregateInput
  }

  export type NewsCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NewsCategoryWhereInput | NewsCategoryWhereInput[]
    OR?: NewsCategoryWhereInput[]
    NOT?: NewsCategoryWhereInput | NewsCategoryWhereInput[]
    News?: NewsListRelationFilter
    translations?: NewsCategoryTranslationListRelationFilter
  }, "id">

  export type NewsCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: NewsCategoryCountOrderByAggregateInput
    _avg?: NewsCategoryAvgOrderByAggregateInput
    _max?: NewsCategoryMaxOrderByAggregateInput
    _min?: NewsCategoryMinOrderByAggregateInput
    _sum?: NewsCategorySumOrderByAggregateInput
  }

  export type NewsCategoryScalarWhereWithAggregatesInput = {
    AND?: NewsCategoryScalarWhereWithAggregatesInput | NewsCategoryScalarWhereWithAggregatesInput[]
    OR?: NewsCategoryScalarWhereWithAggregatesInput[]
    NOT?: NewsCategoryScalarWhereWithAggregatesInput | NewsCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NewsCategory"> | number
  }

  export type NewsCategoryTranslationWhereInput = {
    AND?: NewsCategoryTranslationWhereInput | NewsCategoryTranslationWhereInput[]
    OR?: NewsCategoryTranslationWhereInput[]
    NOT?: NewsCategoryTranslationWhereInput | NewsCategoryTranslationWhereInput[]
    id?: IntFilter<"NewsCategoryTranslation"> | number
    language?: StringFilter<"NewsCategoryTranslation"> | string
    name?: StringFilter<"NewsCategoryTranslation"> | string
    news_category_id?: IntFilter<"NewsCategoryTranslation"> | number
    news_category?: XOR<NewsCategoryRelationFilter, NewsCategoryWhereInput>
  }

  export type NewsCategoryTranslationOrderByWithRelationInput = {
    id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    news_category_id?: SortOrder
    news_category?: NewsCategoryOrderByWithRelationInput
  }

  export type NewsCategoryTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    news_category_id_language?: NewsCategoryTranslationNews_category_idLanguageCompoundUniqueInput
    language_name?: NewsCategoryTranslationLanguageNameCompoundUniqueInput
    AND?: NewsCategoryTranslationWhereInput | NewsCategoryTranslationWhereInput[]
    OR?: NewsCategoryTranslationWhereInput[]
    NOT?: NewsCategoryTranslationWhereInput | NewsCategoryTranslationWhereInput[]
    language?: StringFilter<"NewsCategoryTranslation"> | string
    name?: StringFilter<"NewsCategoryTranslation"> | string
    news_category_id?: IntFilter<"NewsCategoryTranslation"> | number
    news_category?: XOR<NewsCategoryRelationFilter, NewsCategoryWhereInput>
  }, "id" | "news_category_id_language" | "language_name">

  export type NewsCategoryTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    news_category_id?: SortOrder
    _count?: NewsCategoryTranslationCountOrderByAggregateInput
    _avg?: NewsCategoryTranslationAvgOrderByAggregateInput
    _max?: NewsCategoryTranslationMaxOrderByAggregateInput
    _min?: NewsCategoryTranslationMinOrderByAggregateInput
    _sum?: NewsCategoryTranslationSumOrderByAggregateInput
  }

  export type NewsCategoryTranslationScalarWhereWithAggregatesInput = {
    AND?: NewsCategoryTranslationScalarWhereWithAggregatesInput | NewsCategoryTranslationScalarWhereWithAggregatesInput[]
    OR?: NewsCategoryTranslationScalarWhereWithAggregatesInput[]
    NOT?: NewsCategoryTranslationScalarWhereWithAggregatesInput | NewsCategoryTranslationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NewsCategoryTranslation"> | number
    language?: StringWithAggregatesFilter<"NewsCategoryTranslation"> | string
    name?: StringWithAggregatesFilter<"NewsCategoryTranslation"> | string
    news_category_id?: IntWithAggregatesFilter<"NewsCategoryTranslation"> | number
  }

  export type SystemConfigWhereInput = {
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    id?: IntFilter<"SystemConfig"> | number
    key?: StringFilter<"SystemConfig"> | string
    value?: StringFilter<"SystemConfig"> | string
    created_at?: DateTimeFilter<"SystemConfig"> | Date | string
    updated_at?: DateTimeFilter<"SystemConfig"> | Date | string
  }

  export type SystemConfigOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SystemConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    key?: string
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    value?: StringFilter<"SystemConfig"> | string
    created_at?: DateTimeFilter<"SystemConfig"> | Date | string
    updated_at?: DateTimeFilter<"SystemConfig"> | Date | string
  }, "id" | "key">

  export type SystemConfigOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: SystemConfigCountOrderByAggregateInput
    _avg?: SystemConfigAvgOrderByAggregateInput
    _max?: SystemConfigMaxOrderByAggregateInput
    _min?: SystemConfigMinOrderByAggregateInput
    _sum?: SystemConfigSumOrderByAggregateInput
  }

  export type SystemConfigScalarWhereWithAggregatesInput = {
    AND?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    OR?: SystemConfigScalarWhereWithAggregatesInput[]
    NOT?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemConfig"> | number
    key?: StringWithAggregatesFilter<"SystemConfig"> | string
    value?: StringWithAggregatesFilter<"SystemConfig"> | string
    created_at?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
  }

  export type NewsWhereInput = {
    AND?: NewsWhereInput | NewsWhereInput[]
    OR?: NewsWhereInput[]
    NOT?: NewsWhereInput | NewsWhereInput[]
    id?: IntFilter<"News"> | number
    main_image?: StringFilter<"News"> | string
    published_at?: DateTimeFilter<"News"> | Date | string
    author_id?: IntFilter<"News"> | number
    tag?: StringNullableFilter<"News"> | string | null
    category_id?: IntFilter<"News"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    NewsCategory?: XOR<NewsCategoryRelationFilter, NewsCategoryWhereInput>
    NewsTranslation?: NewsTranslationListRelationFilter
  }

  export type NewsOrderByWithRelationInput = {
    id?: SortOrder
    main_image?: SortOrder
    published_at?: SortOrder
    author_id?: SortOrder
    tag?: SortOrderInput | SortOrder
    category_id?: SortOrder
    User?: UserOrderByWithRelationInput
    NewsCategory?: NewsCategoryOrderByWithRelationInput
    NewsTranslation?: NewsTranslationOrderByRelationAggregateInput
  }

  export type NewsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NewsWhereInput | NewsWhereInput[]
    OR?: NewsWhereInput[]
    NOT?: NewsWhereInput | NewsWhereInput[]
    main_image?: StringFilter<"News"> | string
    published_at?: DateTimeFilter<"News"> | Date | string
    author_id?: IntFilter<"News"> | number
    tag?: StringNullableFilter<"News"> | string | null
    category_id?: IntFilter<"News"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    NewsCategory?: XOR<NewsCategoryRelationFilter, NewsCategoryWhereInput>
    NewsTranslation?: NewsTranslationListRelationFilter
  }, "id">

  export type NewsOrderByWithAggregationInput = {
    id?: SortOrder
    main_image?: SortOrder
    published_at?: SortOrder
    author_id?: SortOrder
    tag?: SortOrderInput | SortOrder
    category_id?: SortOrder
    _count?: NewsCountOrderByAggregateInput
    _avg?: NewsAvgOrderByAggregateInput
    _max?: NewsMaxOrderByAggregateInput
    _min?: NewsMinOrderByAggregateInput
    _sum?: NewsSumOrderByAggregateInput
  }

  export type NewsScalarWhereWithAggregatesInput = {
    AND?: NewsScalarWhereWithAggregatesInput | NewsScalarWhereWithAggregatesInput[]
    OR?: NewsScalarWhereWithAggregatesInput[]
    NOT?: NewsScalarWhereWithAggregatesInput | NewsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"News"> | number
    main_image?: StringWithAggregatesFilter<"News"> | string
    published_at?: DateTimeWithAggregatesFilter<"News"> | Date | string
    author_id?: IntWithAggregatesFilter<"News"> | number
    tag?: StringNullableWithAggregatesFilter<"News"> | string | null
    category_id?: IntWithAggregatesFilter<"News"> | number
  }

  export type NewsTranslationWhereInput = {
    AND?: NewsTranslationWhereInput | NewsTranslationWhereInput[]
    OR?: NewsTranslationWhereInput[]
    NOT?: NewsTranslationWhereInput | NewsTranslationWhereInput[]
    id?: IntFilter<"NewsTranslation"> | number
    news_id?: IntFilter<"NewsTranslation"> | number
    language?: StringFilter<"NewsTranslation"> | string
    title?: StringFilter<"NewsTranslation"> | string
    content?: StringFilter<"NewsTranslation"> | string
    News?: XOR<NewsRelationFilter, NewsWhereInput>
  }

  export type NewsTranslationOrderByWithRelationInput = {
    id?: SortOrder
    news_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
    News?: NewsOrderByWithRelationInput
  }

  export type NewsTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    news_id_language?: NewsTranslationNews_idLanguageCompoundUniqueInput
    AND?: NewsTranslationWhereInput | NewsTranslationWhereInput[]
    OR?: NewsTranslationWhereInput[]
    NOT?: NewsTranslationWhereInput | NewsTranslationWhereInput[]
    news_id?: IntFilter<"NewsTranslation"> | number
    language?: StringFilter<"NewsTranslation"> | string
    title?: StringFilter<"NewsTranslation"> | string
    content?: StringFilter<"NewsTranslation"> | string
    News?: XOR<NewsRelationFilter, NewsWhereInput>
  }, "id" | "news_id_language">

  export type NewsTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    news_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
    _count?: NewsTranslationCountOrderByAggregateInput
    _avg?: NewsTranslationAvgOrderByAggregateInput
    _max?: NewsTranslationMaxOrderByAggregateInput
    _min?: NewsTranslationMinOrderByAggregateInput
    _sum?: NewsTranslationSumOrderByAggregateInput
  }

  export type NewsTranslationScalarWhereWithAggregatesInput = {
    AND?: NewsTranslationScalarWhereWithAggregatesInput | NewsTranslationScalarWhereWithAggregatesInput[]
    OR?: NewsTranslationScalarWhereWithAggregatesInput[]
    NOT?: NewsTranslationScalarWhereWithAggregatesInput | NewsTranslationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NewsTranslation"> | number
    news_id?: IntWithAggregatesFilter<"NewsTranslation"> | number
    language?: StringWithAggregatesFilter<"NewsTranslation"> | string
    title?: StringWithAggregatesFilter<"NewsTranslation"> | string
    content?: StringWithAggregatesFilter<"NewsTranslation"> | string
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: IntFilter<"Service"> | number
    main_image?: StringFilter<"Service"> | string
    ServiceTranslation?: ServiceTranslationListRelationFilter
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    main_image?: SortOrder
    ServiceTranslation?: ServiceTranslationOrderByRelationAggregateInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    main_image?: StringFilter<"Service"> | string
    ServiceTranslation?: ServiceTranslationListRelationFilter
  }, "id">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    main_image?: SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Service"> | number
    main_image?: StringWithAggregatesFilter<"Service"> | string
  }

  export type ServiceTranslationWhereInput = {
    AND?: ServiceTranslationWhereInput | ServiceTranslationWhereInput[]
    OR?: ServiceTranslationWhereInput[]
    NOT?: ServiceTranslationWhereInput | ServiceTranslationWhereInput[]
    id?: IntFilter<"ServiceTranslation"> | number
    service_id?: IntFilter<"ServiceTranslation"> | number
    language?: StringFilter<"ServiceTranslation"> | string
    title?: StringFilter<"ServiceTranslation"> | string
    content?: StringFilter<"ServiceTranslation"> | string
    features?: JsonFilter<"ServiceTranslation">
    Service?: XOR<ServiceRelationFilter, ServiceWhereInput>
  }

  export type ServiceTranslationOrderByWithRelationInput = {
    id?: SortOrder
    service_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
    features?: SortOrder
    Service?: ServiceOrderByWithRelationInput
  }

  export type ServiceTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    service_id_language?: ServiceTranslationService_idLanguageCompoundUniqueInput
    AND?: ServiceTranslationWhereInput | ServiceTranslationWhereInput[]
    OR?: ServiceTranslationWhereInput[]
    NOT?: ServiceTranslationWhereInput | ServiceTranslationWhereInput[]
    service_id?: IntFilter<"ServiceTranslation"> | number
    language?: StringFilter<"ServiceTranslation"> | string
    title?: StringFilter<"ServiceTranslation"> | string
    content?: StringFilter<"ServiceTranslation"> | string
    features?: JsonFilter<"ServiceTranslation">
    Service?: XOR<ServiceRelationFilter, ServiceWhereInput>
  }, "id" | "service_id_language">

  export type ServiceTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    service_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
    features?: SortOrder
    _count?: ServiceTranslationCountOrderByAggregateInput
    _avg?: ServiceTranslationAvgOrderByAggregateInput
    _max?: ServiceTranslationMaxOrderByAggregateInput
    _min?: ServiceTranslationMinOrderByAggregateInput
    _sum?: ServiceTranslationSumOrderByAggregateInput
  }

  export type ServiceTranslationScalarWhereWithAggregatesInput = {
    AND?: ServiceTranslationScalarWhereWithAggregatesInput | ServiceTranslationScalarWhereWithAggregatesInput[]
    OR?: ServiceTranslationScalarWhereWithAggregatesInput[]
    NOT?: ServiceTranslationScalarWhereWithAggregatesInput | ServiceTranslationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ServiceTranslation"> | number
    service_id?: IntWithAggregatesFilter<"ServiceTranslation"> | number
    language?: StringWithAggregatesFilter<"ServiceTranslation"> | string
    title?: StringWithAggregatesFilter<"ServiceTranslation"> | string
    content?: StringWithAggregatesFilter<"ServiceTranslation"> | string
    features?: JsonWithAggregatesFilter<"ServiceTranslation">
  }

  export type ContainerWhereInput = {
    AND?: ContainerWhereInput | ContainerWhereInput[]
    OR?: ContainerWhereInput[]
    NOT?: ContainerWhereInput | ContainerWhereInput[]
    id?: IntFilter<"Container"> | number
    weight?: FloatNullableFilter<"Container"> | number | null
    vehicleNumber?: StringNullableFilter<"Container"> | string | null
    containerNumber?: StringFilter<"Container"> | string
    customer?: StringNullableFilter<"Container"> | string | null
    importExport?: EnumImportExportFilter<"Container"> | $Enums.ImportExport
    shippingLine?: StringNullableFilter<"Container"> | string | null
    seal?: StringNullableFilter<"Container"> | string | null
    serviceType?: StringNullableFilter<"Container"> | string | null
    yardInDate?: DateTimeNullableFilter<"Container"> | Date | string | null
    yardOutDate?: DateTimeNullableFilter<"Container"> | Date | string | null
    yardPosition?: StringNullableFilter<"Container"> | string | null
    note?: StringNullableFilter<"Container"> | string | null
    createdAt?: DateTimeFilter<"Container"> | Date | string
    updatedAt?: DateTimeFilter<"Container"> | Date | string
  }

  export type ContainerOrderByWithRelationInput = {
    id?: SortOrder
    weight?: SortOrderInput | SortOrder
    vehicleNumber?: SortOrderInput | SortOrder
    containerNumber?: SortOrder
    customer?: SortOrderInput | SortOrder
    importExport?: SortOrder
    shippingLine?: SortOrderInput | SortOrder
    seal?: SortOrderInput | SortOrder
    serviceType?: SortOrderInput | SortOrder
    yardInDate?: SortOrderInput | SortOrder
    yardOutDate?: SortOrderInput | SortOrder
    yardPosition?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContainerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    containerNumber?: string
    AND?: ContainerWhereInput | ContainerWhereInput[]
    OR?: ContainerWhereInput[]
    NOT?: ContainerWhereInput | ContainerWhereInput[]
    weight?: FloatNullableFilter<"Container"> | number | null
    vehicleNumber?: StringNullableFilter<"Container"> | string | null
    customer?: StringNullableFilter<"Container"> | string | null
    importExport?: EnumImportExportFilter<"Container"> | $Enums.ImportExport
    shippingLine?: StringNullableFilter<"Container"> | string | null
    seal?: StringNullableFilter<"Container"> | string | null
    serviceType?: StringNullableFilter<"Container"> | string | null
    yardInDate?: DateTimeNullableFilter<"Container"> | Date | string | null
    yardOutDate?: DateTimeNullableFilter<"Container"> | Date | string | null
    yardPosition?: StringNullableFilter<"Container"> | string | null
    note?: StringNullableFilter<"Container"> | string | null
    createdAt?: DateTimeFilter<"Container"> | Date | string
    updatedAt?: DateTimeFilter<"Container"> | Date | string
  }, "id" | "containerNumber">

  export type ContainerOrderByWithAggregationInput = {
    id?: SortOrder
    weight?: SortOrderInput | SortOrder
    vehicleNumber?: SortOrderInput | SortOrder
    containerNumber?: SortOrder
    customer?: SortOrderInput | SortOrder
    importExport?: SortOrder
    shippingLine?: SortOrderInput | SortOrder
    seal?: SortOrderInput | SortOrder
    serviceType?: SortOrderInput | SortOrder
    yardInDate?: SortOrderInput | SortOrder
    yardOutDate?: SortOrderInput | SortOrder
    yardPosition?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContainerCountOrderByAggregateInput
    _avg?: ContainerAvgOrderByAggregateInput
    _max?: ContainerMaxOrderByAggregateInput
    _min?: ContainerMinOrderByAggregateInput
    _sum?: ContainerSumOrderByAggregateInput
  }

  export type ContainerScalarWhereWithAggregatesInput = {
    AND?: ContainerScalarWhereWithAggregatesInput | ContainerScalarWhereWithAggregatesInput[]
    OR?: ContainerScalarWhereWithAggregatesInput[]
    NOT?: ContainerScalarWhereWithAggregatesInput | ContainerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Container"> | number
    weight?: FloatNullableWithAggregatesFilter<"Container"> | number | null
    vehicleNumber?: StringNullableWithAggregatesFilter<"Container"> | string | null
    containerNumber?: StringWithAggregatesFilter<"Container"> | string
    customer?: StringNullableWithAggregatesFilter<"Container"> | string | null
    importExport?: EnumImportExportWithAggregatesFilter<"Container"> | $Enums.ImportExport
    shippingLine?: StringNullableWithAggregatesFilter<"Container"> | string | null
    seal?: StringNullableWithAggregatesFilter<"Container"> | string | null
    serviceType?: StringNullableWithAggregatesFilter<"Container"> | string | null
    yardInDate?: DateTimeNullableWithAggregatesFilter<"Container"> | Date | string | null
    yardOutDate?: DateTimeNullableWithAggregatesFilter<"Container"> | Date | string | null
    yardPosition?: StringNullableWithAggregatesFilter<"Container"> | string | null
    note?: StringNullableWithAggregatesFilter<"Container"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Container"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Container"> | Date | string
  }

  export type UserCreateInput = {
    username: string
    password_hash: string
    avatar?: string | null
    email?: string | null
    job_articles?: JobArticleCreateNestedManyWithoutAuthorInput
    News?: NewsCreateNestedManyWithoutUserInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password_hash: string
    role_id: number
    avatar?: string | null
    email?: string | null
    job_articles?: JobArticleUncheckedCreateNestedManyWithoutAuthorInput
    News?: NewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    job_articles?: JobArticleUpdateManyWithoutAuthorNestedInput
    News?: NewsUpdateManyWithoutUserNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    job_articles?: JobArticleUncheckedUpdateManyWithoutAuthorNestedInput
    News?: NewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password_hash: string
    role_id: number
    avatar?: string | null
    email?: string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutRoleInput
    permissions?: PermissionCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
    permissions?: PermissionUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRoleNestedInput
    permissions?: PermissionUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
    permissions?: PermissionUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    name: string
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionCreateInput = {
    action: string
    subject: string
    roles?: RoleCreateNestedManyWithoutPermissionsInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: number
    action: string
    subject: string
    roles?: RoleUncheckedCreateNestedManyWithoutPermissionsInput
  }

  export type PermissionUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    roles?: RoleUpdateManyWithoutPermissionsNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    roles?: RoleUncheckedUpdateManyWithoutPermissionsNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: number
    action: string
    subject: string
  }

  export type PermissionUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type JobArticleCreateInput = {
    status: $Enums.ArticleStatus
    published_at?: Date | string | null
    created_at?: Date | string
    job_deadline: Date | string
    primary_image: string
    updated_at?: Date | string
    author: UserCreateNestedOneWithoutJob_articlesInput
    translations?: JobArticleTranslationCreateNestedManyWithoutJob_articleInput
  }

  export type JobArticleUncheckedCreateInput = {
    id?: number
    author_id: number
    status: $Enums.ArticleStatus
    published_at?: Date | string | null
    created_at?: Date | string
    job_deadline: Date | string
    primary_image: string
    updated_at?: Date | string
    translations?: JobArticleTranslationUncheckedCreateNestedManyWithoutJob_articleInput
  }

  export type JobArticleUpdateInput = {
    status?: EnumArticleStatusFieldUpdateOperationsInput | $Enums.ArticleStatus
    published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    primary_image?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutJob_articlesNestedInput
    translations?: JobArticleTranslationUpdateManyWithoutJob_articleNestedInput
  }

  export type JobArticleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: IntFieldUpdateOperationsInput | number
    status?: EnumArticleStatusFieldUpdateOperationsInput | $Enums.ArticleStatus
    published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    primary_image?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    translations?: JobArticleTranslationUncheckedUpdateManyWithoutJob_articleNestedInput
  }

  export type JobArticleCreateManyInput = {
    id?: number
    author_id: number
    status: $Enums.ArticleStatus
    published_at?: Date | string | null
    created_at?: Date | string
    job_deadline: Date | string
    primary_image: string
    updated_at?: Date | string
  }

  export type JobArticleUpdateManyMutationInput = {
    status?: EnumArticleStatusFieldUpdateOperationsInput | $Enums.ArticleStatus
    published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    primary_image?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobArticleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: IntFieldUpdateOperationsInput | number
    status?: EnumArticleStatusFieldUpdateOperationsInput | $Enums.ArticleStatus
    published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    primary_image?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobArticleTranslationCreateInput = {
    language: string
    slug?: string | null
    content?: string | null
    job_benefits?: string | null
    job_description?: string | null
    job_location: string
    job_position: string
    job_requirements?: string | null
    job_title: string
    meta_description?: string | null
    meta_title?: string | null
    job_article: JobArticleCreateNestedOneWithoutTranslationsInput
  }

  export type JobArticleTranslationUncheckedCreateInput = {
    id?: number
    language: string
    slug?: string | null
    content?: string | null
    job_article_id: number
    job_benefits?: string | null
    job_description?: string | null
    job_location: string
    job_position: string
    job_requirements?: string | null
    job_title: string
    meta_description?: string | null
    meta_title?: string | null
  }

  export type JobArticleTranslationUpdateInput = {
    language?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    job_benefits?: NullableStringFieldUpdateOperationsInput | string | null
    job_description?: NullableStringFieldUpdateOperationsInput | string | null
    job_location?: StringFieldUpdateOperationsInput | string
    job_position?: StringFieldUpdateOperationsInput | string
    job_requirements?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: StringFieldUpdateOperationsInput | string
    meta_description?: NullableStringFieldUpdateOperationsInput | string | null
    meta_title?: NullableStringFieldUpdateOperationsInput | string | null
    job_article?: JobArticleUpdateOneRequiredWithoutTranslationsNestedInput
  }

  export type JobArticleTranslationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    job_article_id?: IntFieldUpdateOperationsInput | number
    job_benefits?: NullableStringFieldUpdateOperationsInput | string | null
    job_description?: NullableStringFieldUpdateOperationsInput | string | null
    job_location?: StringFieldUpdateOperationsInput | string
    job_position?: StringFieldUpdateOperationsInput | string
    job_requirements?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: StringFieldUpdateOperationsInput | string
    meta_description?: NullableStringFieldUpdateOperationsInput | string | null
    meta_title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobArticleTranslationCreateManyInput = {
    id?: number
    language: string
    slug?: string | null
    content?: string | null
    job_article_id: number
    job_benefits?: string | null
    job_description?: string | null
    job_location: string
    job_position: string
    job_requirements?: string | null
    job_title: string
    meta_description?: string | null
    meta_title?: string | null
  }

  export type JobArticleTranslationUpdateManyMutationInput = {
    language?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    job_benefits?: NullableStringFieldUpdateOperationsInput | string | null
    job_description?: NullableStringFieldUpdateOperationsInput | string | null
    job_location?: StringFieldUpdateOperationsInput | string
    job_position?: StringFieldUpdateOperationsInput | string
    job_requirements?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: StringFieldUpdateOperationsInput | string
    meta_description?: NullableStringFieldUpdateOperationsInput | string | null
    meta_title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobArticleTranslationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    job_article_id?: IntFieldUpdateOperationsInput | number
    job_benefits?: NullableStringFieldUpdateOperationsInput | string | null
    job_description?: NullableStringFieldUpdateOperationsInput | string | null
    job_location?: StringFieldUpdateOperationsInput | string
    job_position?: StringFieldUpdateOperationsInput | string
    job_requirements?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: StringFieldUpdateOperationsInput | string
    meta_description?: NullableStringFieldUpdateOperationsInput | string | null
    meta_title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NewsCategoryCreateInput = {
    News?: NewsCreateNestedManyWithoutNewsCategoryInput
    translations?: NewsCategoryTranslationCreateNestedManyWithoutNews_categoryInput
  }

  export type NewsCategoryUncheckedCreateInput = {
    id?: number
    News?: NewsUncheckedCreateNestedManyWithoutNewsCategoryInput
    translations?: NewsCategoryTranslationUncheckedCreateNestedManyWithoutNews_categoryInput
  }

  export type NewsCategoryUpdateInput = {
    News?: NewsUpdateManyWithoutNewsCategoryNestedInput
    translations?: NewsCategoryTranslationUpdateManyWithoutNews_categoryNestedInput
  }

  export type NewsCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    News?: NewsUncheckedUpdateManyWithoutNewsCategoryNestedInput
    translations?: NewsCategoryTranslationUncheckedUpdateManyWithoutNews_categoryNestedInput
  }

  export type NewsCategoryCreateManyInput = {
    id?: number
  }

  export type NewsCategoryUpdateManyMutationInput = {

  }

  export type NewsCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type NewsCategoryTranslationCreateInput = {
    language: string
    name: string
    news_category: NewsCategoryCreateNestedOneWithoutTranslationsInput
  }

  export type NewsCategoryTranslationUncheckedCreateInput = {
    id?: number
    language: string
    name: string
    news_category_id: number
  }

  export type NewsCategoryTranslationUpdateInput = {
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    news_category?: NewsCategoryUpdateOneRequiredWithoutTranslationsNestedInput
  }

  export type NewsCategoryTranslationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    news_category_id?: IntFieldUpdateOperationsInput | number
  }

  export type NewsCategoryTranslationCreateManyInput = {
    id?: number
    language: string
    name: string
    news_category_id: number
  }

  export type NewsCategoryTranslationUpdateManyMutationInput = {
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type NewsCategoryTranslationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    news_category_id?: IntFieldUpdateOperationsInput | number
  }

  export type SystemConfigCreateInput = {
    key: string
    value: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SystemConfigUncheckedCreateInput = {
    id?: number
    key: string
    value: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SystemConfigUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateManyInput = {
    id?: number
    key: string
    value: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SystemConfigUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsCreateInput = {
    main_image: string
    published_at?: Date | string
    tag?: string | null
    User: UserCreateNestedOneWithoutNewsInput
    NewsCategory: NewsCategoryCreateNestedOneWithoutNewsInput
    NewsTranslation?: NewsTranslationCreateNestedManyWithoutNewsInput
  }

  export type NewsUncheckedCreateInput = {
    id?: number
    main_image: string
    published_at?: Date | string
    author_id: number
    tag?: string | null
    category_id: number
    NewsTranslation?: NewsTranslationUncheckedCreateNestedManyWithoutNewsInput
  }

  export type NewsUpdateInput = {
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneRequiredWithoutNewsNestedInput
    NewsCategory?: NewsCategoryUpdateOneRequiredWithoutNewsNestedInput
    NewsTranslation?: NewsTranslationUpdateManyWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    NewsTranslation?: NewsTranslationUncheckedUpdateManyWithoutNewsNestedInput
  }

  export type NewsCreateManyInput = {
    id?: number
    main_image: string
    published_at?: Date | string
    author_id: number
    tag?: string | null
    category_id: number
  }

  export type NewsUpdateManyMutationInput = {
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type NewsTranslationCreateInput = {
    language: string
    title: string
    content: string
    News: NewsCreateNestedOneWithoutNewsTranslationInput
  }

  export type NewsTranslationUncheckedCreateInput = {
    id?: number
    news_id: number
    language: string
    title: string
    content: string
  }

  export type NewsTranslationUpdateInput = {
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    News?: NewsUpdateOneRequiredWithoutNewsTranslationNestedInput
  }

  export type NewsTranslationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    news_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NewsTranslationCreateManyInput = {
    id?: number
    news_id: number
    language: string
    title: string
    content: string
  }

  export type NewsTranslationUpdateManyMutationInput = {
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NewsTranslationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    news_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceCreateInput = {
    main_image: string
    ServiceTranslation?: ServiceTranslationCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: number
    main_image: string
    ServiceTranslation?: ServiceTranslationUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceUpdateInput = {
    main_image?: StringFieldUpdateOperationsInput | string
    ServiceTranslation?: ServiceTranslationUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
    ServiceTranslation?: ServiceTranslationUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceCreateManyInput = {
    id?: number
    main_image: string
  }

  export type ServiceUpdateManyMutationInput = {
    main_image?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceTranslationCreateInput = {
    language: string
    title: string
    content: string
    features: JsonNullValueInput | InputJsonValue
    Service: ServiceCreateNestedOneWithoutServiceTranslationInput
  }

  export type ServiceTranslationUncheckedCreateInput = {
    id?: number
    service_id: number
    language: string
    title: string
    content: string
    features: JsonNullValueInput | InputJsonValue
  }

  export type ServiceTranslationUpdateInput = {
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    features?: JsonNullValueInput | InputJsonValue
    Service?: ServiceUpdateOneRequiredWithoutServiceTranslationNestedInput
  }

  export type ServiceTranslationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    features?: JsonNullValueInput | InputJsonValue
  }

  export type ServiceTranslationCreateManyInput = {
    id?: number
    service_id: number
    language: string
    title: string
    content: string
    features: JsonNullValueInput | InputJsonValue
  }

  export type ServiceTranslationUpdateManyMutationInput = {
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    features?: JsonNullValueInput | InputJsonValue
  }

  export type ServiceTranslationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    features?: JsonNullValueInput | InputJsonValue
  }

  export type ContainerCreateInput = {
    weight?: number | null
    vehicleNumber?: string | null
    containerNumber: string
    customer?: string | null
    importExport: $Enums.ImportExport
    shippingLine?: string | null
    seal?: string | null
    serviceType?: string | null
    yardInDate?: Date | string | null
    yardOutDate?: Date | string | null
    yardPosition?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContainerUncheckedCreateInput = {
    id?: number
    weight?: number | null
    vehicleNumber?: string | null
    containerNumber: string
    customer?: string | null
    importExport: $Enums.ImportExport
    shippingLine?: string | null
    seal?: string | null
    serviceType?: string | null
    yardInDate?: Date | string | null
    yardOutDate?: Date | string | null
    yardPosition?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContainerUpdateInput = {
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    containerNumber?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    importExport?: EnumImportExportFieldUpdateOperationsInput | $Enums.ImportExport
    shippingLine?: NullableStringFieldUpdateOperationsInput | string | null
    seal?: NullableStringFieldUpdateOperationsInput | string | null
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    yardInDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yardOutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yardPosition?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    containerNumber?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    importExport?: EnumImportExportFieldUpdateOperationsInput | $Enums.ImportExport
    shippingLine?: NullableStringFieldUpdateOperationsInput | string | null
    seal?: NullableStringFieldUpdateOperationsInput | string | null
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    yardInDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yardOutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yardPosition?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerCreateManyInput = {
    id?: number
    weight?: number | null
    vehicleNumber?: string | null
    containerNumber: string
    customer?: string | null
    importExport: $Enums.ImportExport
    shippingLine?: string | null
    seal?: string | null
    serviceType?: string | null
    yardInDate?: Date | string | null
    yardOutDate?: Date | string | null
    yardPosition?: string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContainerUpdateManyMutationInput = {
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    containerNumber?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    importExport?: EnumImportExportFieldUpdateOperationsInput | $Enums.ImportExport
    shippingLine?: NullableStringFieldUpdateOperationsInput | string | null
    seal?: NullableStringFieldUpdateOperationsInput | string | null
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    yardInDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yardOutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yardPosition?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContainerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleNumber?: NullableStringFieldUpdateOperationsInput | string | null
    containerNumber?: StringFieldUpdateOperationsInput | string
    customer?: NullableStringFieldUpdateOperationsInput | string | null
    importExport?: EnumImportExportFieldUpdateOperationsInput | $Enums.ImportExport
    shippingLine?: NullableStringFieldUpdateOperationsInput | string | null
    seal?: NullableStringFieldUpdateOperationsInput | string | null
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    yardInDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yardOutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yardPosition?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type JobArticleListRelationFilter = {
    every?: JobArticleWhereInput
    some?: JobArticleWhereInput
    none?: JobArticleWhereInput
  }

  export type NewsListRelationFilter = {
    every?: NewsWhereInput
    some?: NewsWhereInput
    none?: NewsWhereInput
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type JobArticleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    role_id?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    role_id?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    role_id?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type PermissionListRelationFilter = {
    every?: PermissionWhereInput
    some?: PermissionWhereInput
    none?: PermissionWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionActionSubjectCompoundUniqueInput = {
    action: string
    subject: string
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    subject?: SortOrder
  }

  export type PermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    subject?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    subject?: SortOrder
  }

  export type PermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumArticleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ArticleStatus | EnumArticleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ArticleStatus[]
    notIn?: $Enums.ArticleStatus[]
    not?: NestedEnumArticleStatusFilter<$PrismaModel> | $Enums.ArticleStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type JobArticleTranslationListRelationFilter = {
    every?: JobArticleTranslationWhereInput
    some?: JobArticleTranslationWhereInput
    none?: JobArticleTranslationWhereInput
  }

  export type JobArticleTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobArticleCountOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    status?: SortOrder
    published_at?: SortOrder
    created_at?: SortOrder
    job_deadline?: SortOrder
    primary_image?: SortOrder
    updated_at?: SortOrder
  }

  export type JobArticleAvgOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
  }

  export type JobArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    status?: SortOrder
    published_at?: SortOrder
    created_at?: SortOrder
    job_deadline?: SortOrder
    primary_image?: SortOrder
    updated_at?: SortOrder
  }

  export type JobArticleMinOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    status?: SortOrder
    published_at?: SortOrder
    created_at?: SortOrder
    job_deadline?: SortOrder
    primary_image?: SortOrder
    updated_at?: SortOrder
  }

  export type JobArticleSumOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
  }

  export type EnumArticleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ArticleStatus | EnumArticleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ArticleStatus[]
    notIn?: $Enums.ArticleStatus[]
    not?: NestedEnumArticleStatusWithAggregatesFilter<$PrismaModel> | $Enums.ArticleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumArticleStatusFilter<$PrismaModel>
    _max?: NestedEnumArticleStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type JobArticleRelationFilter = {
    is?: JobArticleWhereInput
    isNot?: JobArticleWhereInput
  }

  export type JobArticleTranslationJob_article_idLanguageCompoundUniqueInput = {
    job_article_id: number
    language: string
  }

  export type JobArticleTranslationSlugLanguageCompoundUniqueInput = {
    slug: string
    language: string
  }

  export type JobArticleTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    slug?: SortOrder
    content?: SortOrder
    job_article_id?: SortOrder
    job_benefits?: SortOrder
    job_description?: SortOrder
    job_location?: SortOrder
    job_position?: SortOrder
    job_requirements?: SortOrder
    job_title?: SortOrder
    meta_description?: SortOrder
    meta_title?: SortOrder
  }

  export type JobArticleTranslationAvgOrderByAggregateInput = {
    id?: SortOrder
    job_article_id?: SortOrder
  }

  export type JobArticleTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    slug?: SortOrder
    content?: SortOrder
    job_article_id?: SortOrder
    job_benefits?: SortOrder
    job_description?: SortOrder
    job_location?: SortOrder
    job_position?: SortOrder
    job_requirements?: SortOrder
    job_title?: SortOrder
    meta_description?: SortOrder
    meta_title?: SortOrder
  }

  export type JobArticleTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    slug?: SortOrder
    content?: SortOrder
    job_article_id?: SortOrder
    job_benefits?: SortOrder
    job_description?: SortOrder
    job_location?: SortOrder
    job_position?: SortOrder
    job_requirements?: SortOrder
    job_title?: SortOrder
    meta_description?: SortOrder
    meta_title?: SortOrder
  }

  export type JobArticleTranslationSumOrderByAggregateInput = {
    id?: SortOrder
    job_article_id?: SortOrder
  }

  export type NewsCategoryTranslationListRelationFilter = {
    every?: NewsCategoryTranslationWhereInput
    some?: NewsCategoryTranslationWhereInput
    none?: NewsCategoryTranslationWhereInput
  }

  export type NewsCategoryTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NewsCategoryCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsCategoryMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsCategoryRelationFilter = {
    is?: NewsCategoryWhereInput
    isNot?: NewsCategoryWhereInput
  }

  export type NewsCategoryTranslationNews_category_idLanguageCompoundUniqueInput = {
    news_category_id: number
    language: string
  }

  export type NewsCategoryTranslationLanguageNameCompoundUniqueInput = {
    language: string
    name: string
  }

  export type NewsCategoryTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    news_category_id?: SortOrder
  }

  export type NewsCategoryTranslationAvgOrderByAggregateInput = {
    id?: SortOrder
    news_category_id?: SortOrder
  }

  export type NewsCategoryTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    news_category_id?: SortOrder
  }

  export type NewsCategoryTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    news_category_id?: SortOrder
  }

  export type NewsCategoryTranslationSumOrderByAggregateInput = {
    id?: SortOrder
    news_category_id?: SortOrder
  }

  export type SystemConfigCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SystemConfigAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SystemConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SystemConfigMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SystemConfigSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsTranslationListRelationFilter = {
    every?: NewsTranslationWhereInput
    some?: NewsTranslationWhereInput
    none?: NewsTranslationWhereInput
  }

  export type NewsTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NewsCountOrderByAggregateInput = {
    id?: SortOrder
    main_image?: SortOrder
    published_at?: SortOrder
    author_id?: SortOrder
    tag?: SortOrder
    category_id?: SortOrder
  }

  export type NewsAvgOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    category_id?: SortOrder
  }

  export type NewsMaxOrderByAggregateInput = {
    id?: SortOrder
    main_image?: SortOrder
    published_at?: SortOrder
    author_id?: SortOrder
    tag?: SortOrder
    category_id?: SortOrder
  }

  export type NewsMinOrderByAggregateInput = {
    id?: SortOrder
    main_image?: SortOrder
    published_at?: SortOrder
    author_id?: SortOrder
    tag?: SortOrder
    category_id?: SortOrder
  }

  export type NewsSumOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    category_id?: SortOrder
  }

  export type NewsRelationFilter = {
    is?: NewsWhereInput
    isNot?: NewsWhereInput
  }

  export type NewsTranslationNews_idLanguageCompoundUniqueInput = {
    news_id: number
    language: string
  }

  export type NewsTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    news_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type NewsTranslationAvgOrderByAggregateInput = {
    id?: SortOrder
    news_id?: SortOrder
  }

  export type NewsTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    news_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type NewsTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    news_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type NewsTranslationSumOrderByAggregateInput = {
    id?: SortOrder
    news_id?: SortOrder
  }

  export type ServiceTranslationListRelationFilter = {
    every?: ServiceTranslationWhereInput
    some?: ServiceTranslationWhereInput
    none?: ServiceTranslationWhereInput
  }

  export type ServiceTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    main_image?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    main_image?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    main_image?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ServiceRelationFilter = {
    is?: ServiceWhereInput
    isNot?: ServiceWhereInput
  }

  export type ServiceTranslationService_idLanguageCompoundUniqueInput = {
    service_id: number
    language: string
  }

  export type ServiceTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    service_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
    features?: SortOrder
  }

  export type ServiceTranslationAvgOrderByAggregateInput = {
    id?: SortOrder
    service_id?: SortOrder
  }

  export type ServiceTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    service_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type ServiceTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    service_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type ServiceTranslationSumOrderByAggregateInput = {
    id?: SortOrder
    service_id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumImportExportFilter<$PrismaModel = never> = {
    equals?: $Enums.ImportExport | EnumImportExportFieldRefInput<$PrismaModel>
    in?: $Enums.ImportExport[]
    notIn?: $Enums.ImportExport[]
    not?: NestedEnumImportExportFilter<$PrismaModel> | $Enums.ImportExport
  }

  export type ContainerCountOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    vehicleNumber?: SortOrder
    containerNumber?: SortOrder
    customer?: SortOrder
    importExport?: SortOrder
    shippingLine?: SortOrder
    seal?: SortOrder
    serviceType?: SortOrder
    yardInDate?: SortOrder
    yardOutDate?: SortOrder
    yardPosition?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContainerAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
  }

  export type ContainerMaxOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    vehicleNumber?: SortOrder
    containerNumber?: SortOrder
    customer?: SortOrder
    importExport?: SortOrder
    shippingLine?: SortOrder
    seal?: SortOrder
    serviceType?: SortOrder
    yardInDate?: SortOrder
    yardOutDate?: SortOrder
    yardPosition?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContainerMinOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    vehicleNumber?: SortOrder
    containerNumber?: SortOrder
    customer?: SortOrder
    importExport?: SortOrder
    shippingLine?: SortOrder
    seal?: SortOrder
    serviceType?: SortOrder
    yardInDate?: SortOrder
    yardOutDate?: SortOrder
    yardPosition?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContainerSumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumImportExportWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ImportExport | EnumImportExportFieldRefInput<$PrismaModel>
    in?: $Enums.ImportExport[]
    notIn?: $Enums.ImportExport[]
    not?: NestedEnumImportExportWithAggregatesFilter<$PrismaModel> | $Enums.ImportExport
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImportExportFilter<$PrismaModel>
    _max?: NestedEnumImportExportFilter<$PrismaModel>
  }

  export type JobArticleCreateNestedManyWithoutAuthorInput = {
    create?: XOR<JobArticleCreateWithoutAuthorInput, JobArticleUncheckedCreateWithoutAuthorInput> | JobArticleCreateWithoutAuthorInput[] | JobArticleUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: JobArticleCreateOrConnectWithoutAuthorInput | JobArticleCreateOrConnectWithoutAuthorInput[]
    createMany?: JobArticleCreateManyAuthorInputEnvelope
    connect?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
  }

  export type NewsCreateNestedManyWithoutUserInput = {
    create?: XOR<NewsCreateWithoutUserInput, NewsUncheckedCreateWithoutUserInput> | NewsCreateWithoutUserInput[] | NewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NewsCreateOrConnectWithoutUserInput | NewsCreateOrConnectWithoutUserInput[]
    createMany?: NewsCreateManyUserInputEnvelope
    connect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type JobArticleUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<JobArticleCreateWithoutAuthorInput, JobArticleUncheckedCreateWithoutAuthorInput> | JobArticleCreateWithoutAuthorInput[] | JobArticleUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: JobArticleCreateOrConnectWithoutAuthorInput | JobArticleCreateOrConnectWithoutAuthorInput[]
    createMany?: JobArticleCreateManyAuthorInputEnvelope
    connect?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
  }

  export type NewsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NewsCreateWithoutUserInput, NewsUncheckedCreateWithoutUserInput> | NewsCreateWithoutUserInput[] | NewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NewsCreateOrConnectWithoutUserInput | NewsCreateOrConnectWithoutUserInput[]
    createMany?: NewsCreateManyUserInputEnvelope
    connect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type JobArticleUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<JobArticleCreateWithoutAuthorInput, JobArticleUncheckedCreateWithoutAuthorInput> | JobArticleCreateWithoutAuthorInput[] | JobArticleUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: JobArticleCreateOrConnectWithoutAuthorInput | JobArticleCreateOrConnectWithoutAuthorInput[]
    upsert?: JobArticleUpsertWithWhereUniqueWithoutAuthorInput | JobArticleUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: JobArticleCreateManyAuthorInputEnvelope
    set?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
    disconnect?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
    delete?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
    connect?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
    update?: JobArticleUpdateWithWhereUniqueWithoutAuthorInput | JobArticleUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: JobArticleUpdateManyWithWhereWithoutAuthorInput | JobArticleUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: JobArticleScalarWhereInput | JobArticleScalarWhereInput[]
  }

  export type NewsUpdateManyWithoutUserNestedInput = {
    create?: XOR<NewsCreateWithoutUserInput, NewsUncheckedCreateWithoutUserInput> | NewsCreateWithoutUserInput[] | NewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NewsCreateOrConnectWithoutUserInput | NewsCreateOrConnectWithoutUserInput[]
    upsert?: NewsUpsertWithWhereUniqueWithoutUserInput | NewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NewsCreateManyUserInputEnvelope
    set?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    disconnect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    delete?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    connect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    update?: NewsUpdateWithWhereUniqueWithoutUserInput | NewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NewsUpdateManyWithWhereWithoutUserInput | NewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NewsScalarWhereInput | NewsScalarWhereInput[]
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobArticleUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<JobArticleCreateWithoutAuthorInput, JobArticleUncheckedCreateWithoutAuthorInput> | JobArticleCreateWithoutAuthorInput[] | JobArticleUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: JobArticleCreateOrConnectWithoutAuthorInput | JobArticleCreateOrConnectWithoutAuthorInput[]
    upsert?: JobArticleUpsertWithWhereUniqueWithoutAuthorInput | JobArticleUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: JobArticleCreateManyAuthorInputEnvelope
    set?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
    disconnect?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
    delete?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
    connect?: JobArticleWhereUniqueInput | JobArticleWhereUniqueInput[]
    update?: JobArticleUpdateWithWhereUniqueWithoutAuthorInput | JobArticleUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: JobArticleUpdateManyWithWhereWithoutAuthorInput | JobArticleUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: JobArticleScalarWhereInput | JobArticleScalarWhereInput[]
  }

  export type NewsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NewsCreateWithoutUserInput, NewsUncheckedCreateWithoutUserInput> | NewsCreateWithoutUserInput[] | NewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NewsCreateOrConnectWithoutUserInput | NewsCreateOrConnectWithoutUserInput[]
    upsert?: NewsUpsertWithWhereUniqueWithoutUserInput | NewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NewsCreateManyUserInputEnvelope
    set?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    disconnect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    delete?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    connect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    update?: NewsUpdateWithWhereUniqueWithoutUserInput | NewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NewsUpdateManyWithWhereWithoutUserInput | NewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NewsScalarWhereInput | NewsScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PermissionCreateNestedManyWithoutRolesInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput> | PermissionCreateWithoutRolesInput[] | PermissionUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput | PermissionCreateOrConnectWithoutRolesInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PermissionUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput> | PermissionCreateWithoutRolesInput[] | PermissionUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput | PermissionCreateOrConnectWithoutRolesInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PermissionUpdateManyWithoutRolesNestedInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput> | PermissionCreateWithoutRolesInput[] | PermissionUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput | PermissionCreateOrConnectWithoutRolesInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutRolesInput | PermissionUpsertWithWhereUniqueWithoutRolesInput[]
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutRolesInput | PermissionUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutRolesInput | PermissionUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PermissionUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput> | PermissionCreateWithoutRolesInput[] | PermissionUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput | PermissionCreateOrConnectWithoutRolesInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutRolesInput | PermissionUpsertWithWhereUniqueWithoutRolesInput[]
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutRolesInput | PermissionUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutRolesInput | PermissionUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type RoleCreateNestedManyWithoutPermissionsInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput> | RoleCreateWithoutPermissionsInput[] | RoleUncheckedCreateWithoutPermissionsInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput | RoleCreateOrConnectWithoutPermissionsInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutPermissionsInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput> | RoleCreateWithoutPermissionsInput[] | RoleUncheckedCreateWithoutPermissionsInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput | RoleCreateOrConnectWithoutPermissionsInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type RoleUpdateManyWithoutPermissionsNestedInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput> | RoleCreateWithoutPermissionsInput[] | RoleUncheckedCreateWithoutPermissionsInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput | RoleCreateOrConnectWithoutPermissionsInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutPermissionsInput | RoleUpsertWithWhereUniqueWithoutPermissionsInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutPermissionsInput | RoleUpdateWithWhereUniqueWithoutPermissionsInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutPermissionsInput | RoleUpdateManyWithWhereWithoutPermissionsInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutPermissionsNestedInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput> | RoleCreateWithoutPermissionsInput[] | RoleUncheckedCreateWithoutPermissionsInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput | RoleCreateOrConnectWithoutPermissionsInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutPermissionsInput | RoleUpsertWithWhereUniqueWithoutPermissionsInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutPermissionsInput | RoleUpdateWithWhereUniqueWithoutPermissionsInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutPermissionsInput | RoleUpdateManyWithWhereWithoutPermissionsInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutJob_articlesInput = {
    create?: XOR<UserCreateWithoutJob_articlesInput, UserUncheckedCreateWithoutJob_articlesInput>
    connectOrCreate?: UserCreateOrConnectWithoutJob_articlesInput
    connect?: UserWhereUniqueInput
  }

  export type JobArticleTranslationCreateNestedManyWithoutJob_articleInput = {
    create?: XOR<JobArticleTranslationCreateWithoutJob_articleInput, JobArticleTranslationUncheckedCreateWithoutJob_articleInput> | JobArticleTranslationCreateWithoutJob_articleInput[] | JobArticleTranslationUncheckedCreateWithoutJob_articleInput[]
    connectOrCreate?: JobArticleTranslationCreateOrConnectWithoutJob_articleInput | JobArticleTranslationCreateOrConnectWithoutJob_articleInput[]
    createMany?: JobArticleTranslationCreateManyJob_articleInputEnvelope
    connect?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
  }

  export type JobArticleTranslationUncheckedCreateNestedManyWithoutJob_articleInput = {
    create?: XOR<JobArticleTranslationCreateWithoutJob_articleInput, JobArticleTranslationUncheckedCreateWithoutJob_articleInput> | JobArticleTranslationCreateWithoutJob_articleInput[] | JobArticleTranslationUncheckedCreateWithoutJob_articleInput[]
    connectOrCreate?: JobArticleTranslationCreateOrConnectWithoutJob_articleInput | JobArticleTranslationCreateOrConnectWithoutJob_articleInput[]
    createMany?: JobArticleTranslationCreateManyJob_articleInputEnvelope
    connect?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
  }

  export type EnumArticleStatusFieldUpdateOperationsInput = {
    set?: $Enums.ArticleStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutJob_articlesNestedInput = {
    create?: XOR<UserCreateWithoutJob_articlesInput, UserUncheckedCreateWithoutJob_articlesInput>
    connectOrCreate?: UserCreateOrConnectWithoutJob_articlesInput
    upsert?: UserUpsertWithoutJob_articlesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJob_articlesInput, UserUpdateWithoutJob_articlesInput>, UserUncheckedUpdateWithoutJob_articlesInput>
  }

  export type JobArticleTranslationUpdateManyWithoutJob_articleNestedInput = {
    create?: XOR<JobArticleTranslationCreateWithoutJob_articleInput, JobArticleTranslationUncheckedCreateWithoutJob_articleInput> | JobArticleTranslationCreateWithoutJob_articleInput[] | JobArticleTranslationUncheckedCreateWithoutJob_articleInput[]
    connectOrCreate?: JobArticleTranslationCreateOrConnectWithoutJob_articleInput | JobArticleTranslationCreateOrConnectWithoutJob_articleInput[]
    upsert?: JobArticleTranslationUpsertWithWhereUniqueWithoutJob_articleInput | JobArticleTranslationUpsertWithWhereUniqueWithoutJob_articleInput[]
    createMany?: JobArticleTranslationCreateManyJob_articleInputEnvelope
    set?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
    disconnect?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
    delete?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
    connect?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
    update?: JobArticleTranslationUpdateWithWhereUniqueWithoutJob_articleInput | JobArticleTranslationUpdateWithWhereUniqueWithoutJob_articleInput[]
    updateMany?: JobArticleTranslationUpdateManyWithWhereWithoutJob_articleInput | JobArticleTranslationUpdateManyWithWhereWithoutJob_articleInput[]
    deleteMany?: JobArticleTranslationScalarWhereInput | JobArticleTranslationScalarWhereInput[]
  }

  export type JobArticleTranslationUncheckedUpdateManyWithoutJob_articleNestedInput = {
    create?: XOR<JobArticleTranslationCreateWithoutJob_articleInput, JobArticleTranslationUncheckedCreateWithoutJob_articleInput> | JobArticleTranslationCreateWithoutJob_articleInput[] | JobArticleTranslationUncheckedCreateWithoutJob_articleInput[]
    connectOrCreate?: JobArticleTranslationCreateOrConnectWithoutJob_articleInput | JobArticleTranslationCreateOrConnectWithoutJob_articleInput[]
    upsert?: JobArticleTranslationUpsertWithWhereUniqueWithoutJob_articleInput | JobArticleTranslationUpsertWithWhereUniqueWithoutJob_articleInput[]
    createMany?: JobArticleTranslationCreateManyJob_articleInputEnvelope
    set?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
    disconnect?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
    delete?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
    connect?: JobArticleTranslationWhereUniqueInput | JobArticleTranslationWhereUniqueInput[]
    update?: JobArticleTranslationUpdateWithWhereUniqueWithoutJob_articleInput | JobArticleTranslationUpdateWithWhereUniqueWithoutJob_articleInput[]
    updateMany?: JobArticleTranslationUpdateManyWithWhereWithoutJob_articleInput | JobArticleTranslationUpdateManyWithWhereWithoutJob_articleInput[]
    deleteMany?: JobArticleTranslationScalarWhereInput | JobArticleTranslationScalarWhereInput[]
  }

  export type JobArticleCreateNestedOneWithoutTranslationsInput = {
    create?: XOR<JobArticleCreateWithoutTranslationsInput, JobArticleUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: JobArticleCreateOrConnectWithoutTranslationsInput
    connect?: JobArticleWhereUniqueInput
  }

  export type JobArticleUpdateOneRequiredWithoutTranslationsNestedInput = {
    create?: XOR<JobArticleCreateWithoutTranslationsInput, JobArticleUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: JobArticleCreateOrConnectWithoutTranslationsInput
    upsert?: JobArticleUpsertWithoutTranslationsInput
    connect?: JobArticleWhereUniqueInput
    update?: XOR<XOR<JobArticleUpdateToOneWithWhereWithoutTranslationsInput, JobArticleUpdateWithoutTranslationsInput>, JobArticleUncheckedUpdateWithoutTranslationsInput>
  }

  export type NewsCreateNestedManyWithoutNewsCategoryInput = {
    create?: XOR<NewsCreateWithoutNewsCategoryInput, NewsUncheckedCreateWithoutNewsCategoryInput> | NewsCreateWithoutNewsCategoryInput[] | NewsUncheckedCreateWithoutNewsCategoryInput[]
    connectOrCreate?: NewsCreateOrConnectWithoutNewsCategoryInput | NewsCreateOrConnectWithoutNewsCategoryInput[]
    createMany?: NewsCreateManyNewsCategoryInputEnvelope
    connect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
  }

  export type NewsCategoryTranslationCreateNestedManyWithoutNews_categoryInput = {
    create?: XOR<NewsCategoryTranslationCreateWithoutNews_categoryInput, NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput> | NewsCategoryTranslationCreateWithoutNews_categoryInput[] | NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput[]
    connectOrCreate?: NewsCategoryTranslationCreateOrConnectWithoutNews_categoryInput | NewsCategoryTranslationCreateOrConnectWithoutNews_categoryInput[]
    createMany?: NewsCategoryTranslationCreateManyNews_categoryInputEnvelope
    connect?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
  }

  export type NewsUncheckedCreateNestedManyWithoutNewsCategoryInput = {
    create?: XOR<NewsCreateWithoutNewsCategoryInput, NewsUncheckedCreateWithoutNewsCategoryInput> | NewsCreateWithoutNewsCategoryInput[] | NewsUncheckedCreateWithoutNewsCategoryInput[]
    connectOrCreate?: NewsCreateOrConnectWithoutNewsCategoryInput | NewsCreateOrConnectWithoutNewsCategoryInput[]
    createMany?: NewsCreateManyNewsCategoryInputEnvelope
    connect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
  }

  export type NewsCategoryTranslationUncheckedCreateNestedManyWithoutNews_categoryInput = {
    create?: XOR<NewsCategoryTranslationCreateWithoutNews_categoryInput, NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput> | NewsCategoryTranslationCreateWithoutNews_categoryInput[] | NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput[]
    connectOrCreate?: NewsCategoryTranslationCreateOrConnectWithoutNews_categoryInput | NewsCategoryTranslationCreateOrConnectWithoutNews_categoryInput[]
    createMany?: NewsCategoryTranslationCreateManyNews_categoryInputEnvelope
    connect?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
  }

  export type NewsUpdateManyWithoutNewsCategoryNestedInput = {
    create?: XOR<NewsCreateWithoutNewsCategoryInput, NewsUncheckedCreateWithoutNewsCategoryInput> | NewsCreateWithoutNewsCategoryInput[] | NewsUncheckedCreateWithoutNewsCategoryInput[]
    connectOrCreate?: NewsCreateOrConnectWithoutNewsCategoryInput | NewsCreateOrConnectWithoutNewsCategoryInput[]
    upsert?: NewsUpsertWithWhereUniqueWithoutNewsCategoryInput | NewsUpsertWithWhereUniqueWithoutNewsCategoryInput[]
    createMany?: NewsCreateManyNewsCategoryInputEnvelope
    set?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    disconnect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    delete?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    connect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    update?: NewsUpdateWithWhereUniqueWithoutNewsCategoryInput | NewsUpdateWithWhereUniqueWithoutNewsCategoryInput[]
    updateMany?: NewsUpdateManyWithWhereWithoutNewsCategoryInput | NewsUpdateManyWithWhereWithoutNewsCategoryInput[]
    deleteMany?: NewsScalarWhereInput | NewsScalarWhereInput[]
  }

  export type NewsCategoryTranslationUpdateManyWithoutNews_categoryNestedInput = {
    create?: XOR<NewsCategoryTranslationCreateWithoutNews_categoryInput, NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput> | NewsCategoryTranslationCreateWithoutNews_categoryInput[] | NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput[]
    connectOrCreate?: NewsCategoryTranslationCreateOrConnectWithoutNews_categoryInput | NewsCategoryTranslationCreateOrConnectWithoutNews_categoryInput[]
    upsert?: NewsCategoryTranslationUpsertWithWhereUniqueWithoutNews_categoryInput | NewsCategoryTranslationUpsertWithWhereUniqueWithoutNews_categoryInput[]
    createMany?: NewsCategoryTranslationCreateManyNews_categoryInputEnvelope
    set?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
    disconnect?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
    delete?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
    connect?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
    update?: NewsCategoryTranslationUpdateWithWhereUniqueWithoutNews_categoryInput | NewsCategoryTranslationUpdateWithWhereUniqueWithoutNews_categoryInput[]
    updateMany?: NewsCategoryTranslationUpdateManyWithWhereWithoutNews_categoryInput | NewsCategoryTranslationUpdateManyWithWhereWithoutNews_categoryInput[]
    deleteMany?: NewsCategoryTranslationScalarWhereInput | NewsCategoryTranslationScalarWhereInput[]
  }

  export type NewsUncheckedUpdateManyWithoutNewsCategoryNestedInput = {
    create?: XOR<NewsCreateWithoutNewsCategoryInput, NewsUncheckedCreateWithoutNewsCategoryInput> | NewsCreateWithoutNewsCategoryInput[] | NewsUncheckedCreateWithoutNewsCategoryInput[]
    connectOrCreate?: NewsCreateOrConnectWithoutNewsCategoryInput | NewsCreateOrConnectWithoutNewsCategoryInput[]
    upsert?: NewsUpsertWithWhereUniqueWithoutNewsCategoryInput | NewsUpsertWithWhereUniqueWithoutNewsCategoryInput[]
    createMany?: NewsCreateManyNewsCategoryInputEnvelope
    set?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    disconnect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    delete?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    connect?: NewsWhereUniqueInput | NewsWhereUniqueInput[]
    update?: NewsUpdateWithWhereUniqueWithoutNewsCategoryInput | NewsUpdateWithWhereUniqueWithoutNewsCategoryInput[]
    updateMany?: NewsUpdateManyWithWhereWithoutNewsCategoryInput | NewsUpdateManyWithWhereWithoutNewsCategoryInput[]
    deleteMany?: NewsScalarWhereInput | NewsScalarWhereInput[]
  }

  export type NewsCategoryTranslationUncheckedUpdateManyWithoutNews_categoryNestedInput = {
    create?: XOR<NewsCategoryTranslationCreateWithoutNews_categoryInput, NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput> | NewsCategoryTranslationCreateWithoutNews_categoryInput[] | NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput[]
    connectOrCreate?: NewsCategoryTranslationCreateOrConnectWithoutNews_categoryInput | NewsCategoryTranslationCreateOrConnectWithoutNews_categoryInput[]
    upsert?: NewsCategoryTranslationUpsertWithWhereUniqueWithoutNews_categoryInput | NewsCategoryTranslationUpsertWithWhereUniqueWithoutNews_categoryInput[]
    createMany?: NewsCategoryTranslationCreateManyNews_categoryInputEnvelope
    set?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
    disconnect?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
    delete?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
    connect?: NewsCategoryTranslationWhereUniqueInput | NewsCategoryTranslationWhereUniqueInput[]
    update?: NewsCategoryTranslationUpdateWithWhereUniqueWithoutNews_categoryInput | NewsCategoryTranslationUpdateWithWhereUniqueWithoutNews_categoryInput[]
    updateMany?: NewsCategoryTranslationUpdateManyWithWhereWithoutNews_categoryInput | NewsCategoryTranslationUpdateManyWithWhereWithoutNews_categoryInput[]
    deleteMany?: NewsCategoryTranslationScalarWhereInput | NewsCategoryTranslationScalarWhereInput[]
  }

  export type NewsCategoryCreateNestedOneWithoutTranslationsInput = {
    create?: XOR<NewsCategoryCreateWithoutTranslationsInput, NewsCategoryUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: NewsCategoryCreateOrConnectWithoutTranslationsInput
    connect?: NewsCategoryWhereUniqueInput
  }

  export type NewsCategoryUpdateOneRequiredWithoutTranslationsNestedInput = {
    create?: XOR<NewsCategoryCreateWithoutTranslationsInput, NewsCategoryUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: NewsCategoryCreateOrConnectWithoutTranslationsInput
    upsert?: NewsCategoryUpsertWithoutTranslationsInput
    connect?: NewsCategoryWhereUniqueInput
    update?: XOR<XOR<NewsCategoryUpdateToOneWithWhereWithoutTranslationsInput, NewsCategoryUpdateWithoutTranslationsInput>, NewsCategoryUncheckedUpdateWithoutTranslationsInput>
  }

  export type UserCreateNestedOneWithoutNewsInput = {
    create?: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewsInput
    connect?: UserWhereUniqueInput
  }

  export type NewsCategoryCreateNestedOneWithoutNewsInput = {
    create?: XOR<NewsCategoryCreateWithoutNewsInput, NewsCategoryUncheckedCreateWithoutNewsInput>
    connectOrCreate?: NewsCategoryCreateOrConnectWithoutNewsInput
    connect?: NewsCategoryWhereUniqueInput
  }

  export type NewsTranslationCreateNestedManyWithoutNewsInput = {
    create?: XOR<NewsTranslationCreateWithoutNewsInput, NewsTranslationUncheckedCreateWithoutNewsInput> | NewsTranslationCreateWithoutNewsInput[] | NewsTranslationUncheckedCreateWithoutNewsInput[]
    connectOrCreate?: NewsTranslationCreateOrConnectWithoutNewsInput | NewsTranslationCreateOrConnectWithoutNewsInput[]
    createMany?: NewsTranslationCreateManyNewsInputEnvelope
    connect?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
  }

  export type NewsTranslationUncheckedCreateNestedManyWithoutNewsInput = {
    create?: XOR<NewsTranslationCreateWithoutNewsInput, NewsTranslationUncheckedCreateWithoutNewsInput> | NewsTranslationCreateWithoutNewsInput[] | NewsTranslationUncheckedCreateWithoutNewsInput[]
    connectOrCreate?: NewsTranslationCreateOrConnectWithoutNewsInput | NewsTranslationCreateOrConnectWithoutNewsInput[]
    createMany?: NewsTranslationCreateManyNewsInputEnvelope
    connect?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutNewsNestedInput = {
    create?: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewsInput
    upsert?: UserUpsertWithoutNewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNewsInput, UserUpdateWithoutNewsInput>, UserUncheckedUpdateWithoutNewsInput>
  }

  export type NewsCategoryUpdateOneRequiredWithoutNewsNestedInput = {
    create?: XOR<NewsCategoryCreateWithoutNewsInput, NewsCategoryUncheckedCreateWithoutNewsInput>
    connectOrCreate?: NewsCategoryCreateOrConnectWithoutNewsInput
    upsert?: NewsCategoryUpsertWithoutNewsInput
    connect?: NewsCategoryWhereUniqueInput
    update?: XOR<XOR<NewsCategoryUpdateToOneWithWhereWithoutNewsInput, NewsCategoryUpdateWithoutNewsInput>, NewsCategoryUncheckedUpdateWithoutNewsInput>
  }

  export type NewsTranslationUpdateManyWithoutNewsNestedInput = {
    create?: XOR<NewsTranslationCreateWithoutNewsInput, NewsTranslationUncheckedCreateWithoutNewsInput> | NewsTranslationCreateWithoutNewsInput[] | NewsTranslationUncheckedCreateWithoutNewsInput[]
    connectOrCreate?: NewsTranslationCreateOrConnectWithoutNewsInput | NewsTranslationCreateOrConnectWithoutNewsInput[]
    upsert?: NewsTranslationUpsertWithWhereUniqueWithoutNewsInput | NewsTranslationUpsertWithWhereUniqueWithoutNewsInput[]
    createMany?: NewsTranslationCreateManyNewsInputEnvelope
    set?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
    disconnect?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
    delete?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
    connect?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
    update?: NewsTranslationUpdateWithWhereUniqueWithoutNewsInput | NewsTranslationUpdateWithWhereUniqueWithoutNewsInput[]
    updateMany?: NewsTranslationUpdateManyWithWhereWithoutNewsInput | NewsTranslationUpdateManyWithWhereWithoutNewsInput[]
    deleteMany?: NewsTranslationScalarWhereInput | NewsTranslationScalarWhereInput[]
  }

  export type NewsTranslationUncheckedUpdateManyWithoutNewsNestedInput = {
    create?: XOR<NewsTranslationCreateWithoutNewsInput, NewsTranslationUncheckedCreateWithoutNewsInput> | NewsTranslationCreateWithoutNewsInput[] | NewsTranslationUncheckedCreateWithoutNewsInput[]
    connectOrCreate?: NewsTranslationCreateOrConnectWithoutNewsInput | NewsTranslationCreateOrConnectWithoutNewsInput[]
    upsert?: NewsTranslationUpsertWithWhereUniqueWithoutNewsInput | NewsTranslationUpsertWithWhereUniqueWithoutNewsInput[]
    createMany?: NewsTranslationCreateManyNewsInputEnvelope
    set?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
    disconnect?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
    delete?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
    connect?: NewsTranslationWhereUniqueInput | NewsTranslationWhereUniqueInput[]
    update?: NewsTranslationUpdateWithWhereUniqueWithoutNewsInput | NewsTranslationUpdateWithWhereUniqueWithoutNewsInput[]
    updateMany?: NewsTranslationUpdateManyWithWhereWithoutNewsInput | NewsTranslationUpdateManyWithWhereWithoutNewsInput[]
    deleteMany?: NewsTranslationScalarWhereInput | NewsTranslationScalarWhereInput[]
  }

  export type NewsCreateNestedOneWithoutNewsTranslationInput = {
    create?: XOR<NewsCreateWithoutNewsTranslationInput, NewsUncheckedCreateWithoutNewsTranslationInput>
    connectOrCreate?: NewsCreateOrConnectWithoutNewsTranslationInput
    connect?: NewsWhereUniqueInput
  }

  export type NewsUpdateOneRequiredWithoutNewsTranslationNestedInput = {
    create?: XOR<NewsCreateWithoutNewsTranslationInput, NewsUncheckedCreateWithoutNewsTranslationInput>
    connectOrCreate?: NewsCreateOrConnectWithoutNewsTranslationInput
    upsert?: NewsUpsertWithoutNewsTranslationInput
    connect?: NewsWhereUniqueInput
    update?: XOR<XOR<NewsUpdateToOneWithWhereWithoutNewsTranslationInput, NewsUpdateWithoutNewsTranslationInput>, NewsUncheckedUpdateWithoutNewsTranslationInput>
  }

  export type ServiceTranslationCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceTranslationCreateWithoutServiceInput, ServiceTranslationUncheckedCreateWithoutServiceInput> | ServiceTranslationCreateWithoutServiceInput[] | ServiceTranslationUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceTranslationCreateOrConnectWithoutServiceInput | ServiceTranslationCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceTranslationCreateManyServiceInputEnvelope
    connect?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
  }

  export type ServiceTranslationUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceTranslationCreateWithoutServiceInput, ServiceTranslationUncheckedCreateWithoutServiceInput> | ServiceTranslationCreateWithoutServiceInput[] | ServiceTranslationUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceTranslationCreateOrConnectWithoutServiceInput | ServiceTranslationCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceTranslationCreateManyServiceInputEnvelope
    connect?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
  }

  export type ServiceTranslationUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceTranslationCreateWithoutServiceInput, ServiceTranslationUncheckedCreateWithoutServiceInput> | ServiceTranslationCreateWithoutServiceInput[] | ServiceTranslationUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceTranslationCreateOrConnectWithoutServiceInput | ServiceTranslationCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceTranslationUpsertWithWhereUniqueWithoutServiceInput | ServiceTranslationUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceTranslationCreateManyServiceInputEnvelope
    set?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
    disconnect?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
    delete?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
    connect?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
    update?: ServiceTranslationUpdateWithWhereUniqueWithoutServiceInput | ServiceTranslationUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceTranslationUpdateManyWithWhereWithoutServiceInput | ServiceTranslationUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceTranslationScalarWhereInput | ServiceTranslationScalarWhereInput[]
  }

  export type ServiceTranslationUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceTranslationCreateWithoutServiceInput, ServiceTranslationUncheckedCreateWithoutServiceInput> | ServiceTranslationCreateWithoutServiceInput[] | ServiceTranslationUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceTranslationCreateOrConnectWithoutServiceInput | ServiceTranslationCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceTranslationUpsertWithWhereUniqueWithoutServiceInput | ServiceTranslationUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceTranslationCreateManyServiceInputEnvelope
    set?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
    disconnect?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
    delete?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
    connect?: ServiceTranslationWhereUniqueInput | ServiceTranslationWhereUniqueInput[]
    update?: ServiceTranslationUpdateWithWhereUniqueWithoutServiceInput | ServiceTranslationUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceTranslationUpdateManyWithWhereWithoutServiceInput | ServiceTranslationUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceTranslationScalarWhereInput | ServiceTranslationScalarWhereInput[]
  }

  export type ServiceCreateNestedOneWithoutServiceTranslationInput = {
    create?: XOR<ServiceCreateWithoutServiceTranslationInput, ServiceUncheckedCreateWithoutServiceTranslationInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceTranslationInput
    connect?: ServiceWhereUniqueInput
  }

  export type ServiceUpdateOneRequiredWithoutServiceTranslationNestedInput = {
    create?: XOR<ServiceCreateWithoutServiceTranslationInput, ServiceUncheckedCreateWithoutServiceTranslationInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceTranslationInput
    upsert?: ServiceUpsertWithoutServiceTranslationInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutServiceTranslationInput, ServiceUpdateWithoutServiceTranslationInput>, ServiceUncheckedUpdateWithoutServiceTranslationInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumImportExportFieldUpdateOperationsInput = {
    set?: $Enums.ImportExport
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumArticleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ArticleStatus | EnumArticleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ArticleStatus[]
    notIn?: $Enums.ArticleStatus[]
    not?: NestedEnumArticleStatusFilter<$PrismaModel> | $Enums.ArticleStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumArticleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ArticleStatus | EnumArticleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ArticleStatus[]
    notIn?: $Enums.ArticleStatus[]
    not?: NestedEnumArticleStatusWithAggregatesFilter<$PrismaModel> | $Enums.ArticleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumArticleStatusFilter<$PrismaModel>
    _max?: NestedEnumArticleStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumImportExportFilter<$PrismaModel = never> = {
    equals?: $Enums.ImportExport | EnumImportExportFieldRefInput<$PrismaModel>
    in?: $Enums.ImportExport[]
    notIn?: $Enums.ImportExport[]
    not?: NestedEnumImportExportFilter<$PrismaModel> | $Enums.ImportExport
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumImportExportWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ImportExport | EnumImportExportFieldRefInput<$PrismaModel>
    in?: $Enums.ImportExport[]
    notIn?: $Enums.ImportExport[]
    not?: NestedEnumImportExportWithAggregatesFilter<$PrismaModel> | $Enums.ImportExport
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImportExportFilter<$PrismaModel>
    _max?: NestedEnumImportExportFilter<$PrismaModel>
  }

  export type JobArticleCreateWithoutAuthorInput = {
    status: $Enums.ArticleStatus
    published_at?: Date | string | null
    created_at?: Date | string
    job_deadline: Date | string
    primary_image: string
    updated_at?: Date | string
    translations?: JobArticleTranslationCreateNestedManyWithoutJob_articleInput
  }

  export type JobArticleUncheckedCreateWithoutAuthorInput = {
    id?: number
    status: $Enums.ArticleStatus
    published_at?: Date | string | null
    created_at?: Date | string
    job_deadline: Date | string
    primary_image: string
    updated_at?: Date | string
    translations?: JobArticleTranslationUncheckedCreateNestedManyWithoutJob_articleInput
  }

  export type JobArticleCreateOrConnectWithoutAuthorInput = {
    where: JobArticleWhereUniqueInput
    create: XOR<JobArticleCreateWithoutAuthorInput, JobArticleUncheckedCreateWithoutAuthorInput>
  }

  export type JobArticleCreateManyAuthorInputEnvelope = {
    data: JobArticleCreateManyAuthorInput | JobArticleCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type NewsCreateWithoutUserInput = {
    main_image: string
    published_at?: Date | string
    tag?: string | null
    NewsCategory: NewsCategoryCreateNestedOneWithoutNewsInput
    NewsTranslation?: NewsTranslationCreateNestedManyWithoutNewsInput
  }

  export type NewsUncheckedCreateWithoutUserInput = {
    id?: number
    main_image: string
    published_at?: Date | string
    tag?: string | null
    category_id: number
    NewsTranslation?: NewsTranslationUncheckedCreateNestedManyWithoutNewsInput
  }

  export type NewsCreateOrConnectWithoutUserInput = {
    where: NewsWhereUniqueInput
    create: XOR<NewsCreateWithoutUserInput, NewsUncheckedCreateWithoutUserInput>
  }

  export type NewsCreateManyUserInputEnvelope = {
    data: NewsCreateManyUserInput | NewsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutUsersInput = {
    name: string
    permissions?: PermissionCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    permissions?: PermissionUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type JobArticleUpsertWithWhereUniqueWithoutAuthorInput = {
    where: JobArticleWhereUniqueInput
    update: XOR<JobArticleUpdateWithoutAuthorInput, JobArticleUncheckedUpdateWithoutAuthorInput>
    create: XOR<JobArticleCreateWithoutAuthorInput, JobArticleUncheckedCreateWithoutAuthorInput>
  }

  export type JobArticleUpdateWithWhereUniqueWithoutAuthorInput = {
    where: JobArticleWhereUniqueInput
    data: XOR<JobArticleUpdateWithoutAuthorInput, JobArticleUncheckedUpdateWithoutAuthorInput>
  }

  export type JobArticleUpdateManyWithWhereWithoutAuthorInput = {
    where: JobArticleScalarWhereInput
    data: XOR<JobArticleUpdateManyMutationInput, JobArticleUncheckedUpdateManyWithoutAuthorInput>
  }

  export type JobArticleScalarWhereInput = {
    AND?: JobArticleScalarWhereInput | JobArticleScalarWhereInput[]
    OR?: JobArticleScalarWhereInput[]
    NOT?: JobArticleScalarWhereInput | JobArticleScalarWhereInput[]
    id?: IntFilter<"JobArticle"> | number
    author_id?: IntFilter<"JobArticle"> | number
    status?: EnumArticleStatusFilter<"JobArticle"> | $Enums.ArticleStatus
    published_at?: DateTimeNullableFilter<"JobArticle"> | Date | string | null
    created_at?: DateTimeFilter<"JobArticle"> | Date | string
    job_deadline?: DateTimeFilter<"JobArticle"> | Date | string
    primary_image?: StringFilter<"JobArticle"> | string
    updated_at?: DateTimeFilter<"JobArticle"> | Date | string
  }

  export type NewsUpsertWithWhereUniqueWithoutUserInput = {
    where: NewsWhereUniqueInput
    update: XOR<NewsUpdateWithoutUserInput, NewsUncheckedUpdateWithoutUserInput>
    create: XOR<NewsCreateWithoutUserInput, NewsUncheckedCreateWithoutUserInput>
  }

  export type NewsUpdateWithWhereUniqueWithoutUserInput = {
    where: NewsWhereUniqueInput
    data: XOR<NewsUpdateWithoutUserInput, NewsUncheckedUpdateWithoutUserInput>
  }

  export type NewsUpdateManyWithWhereWithoutUserInput = {
    where: NewsScalarWhereInput
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyWithoutUserInput>
  }

  export type NewsScalarWhereInput = {
    AND?: NewsScalarWhereInput | NewsScalarWhereInput[]
    OR?: NewsScalarWhereInput[]
    NOT?: NewsScalarWhereInput | NewsScalarWhereInput[]
    id?: IntFilter<"News"> | number
    main_image?: StringFilter<"News"> | string
    published_at?: DateTimeFilter<"News"> | Date | string
    author_id?: IntFilter<"News"> | number
    tag?: StringNullableFilter<"News"> | string | null
    category_id?: IntFilter<"News"> | number
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    permissions?: PermissionUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    permissions?: PermissionUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type UserCreateWithoutRoleInput = {
    username: string
    password_hash: string
    avatar?: string | null
    email?: string | null
    job_articles?: JobArticleCreateNestedManyWithoutAuthorInput
    News?: NewsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: number
    username: string
    password_hash: string
    avatar?: string | null
    email?: string | null
    job_articles?: JobArticleUncheckedCreateNestedManyWithoutAuthorInput
    News?: NewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type PermissionCreateWithoutRolesInput = {
    action: string
    subject: string
  }

  export type PermissionUncheckedCreateWithoutRolesInput = {
    id?: number
    action: string
    subject: string
  }

  export type PermissionCreateOrConnectWithoutRolesInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    role_id?: IntFilter<"User"> | number
    avatar?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
  }

  export type PermissionUpsertWithWhereUniqueWithoutRolesInput = {
    where: PermissionWhereUniqueInput
    update: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
  }

  export type PermissionUpdateWithWhereUniqueWithoutRolesInput = {
    where: PermissionWhereUniqueInput
    data: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type PermissionUpdateManyWithWhereWithoutRolesInput = {
    where: PermissionScalarWhereInput
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyWithoutRolesInput>
  }

  export type PermissionScalarWhereInput = {
    AND?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    OR?: PermissionScalarWhereInput[]
    NOT?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    id?: IntFilter<"Permission"> | number
    action?: StringFilter<"Permission"> | string
    subject?: StringFilter<"Permission"> | string
  }

  export type RoleCreateWithoutPermissionsInput = {
    name: string
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutPermissionsInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
  }

  export type RoleUpsertWithWhereUniqueWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type RoleUpdateManyWithWhereWithoutPermissionsInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutPermissionsInput>
  }

  export type RoleScalarWhereInput = {
    AND?: RoleScalarWhereInput | RoleScalarWhereInput[]
    OR?: RoleScalarWhereInput[]
    NOT?: RoleScalarWhereInput | RoleScalarWhereInput[]
    id?: IntFilter<"Role"> | number
    name?: StringFilter<"Role"> | string
  }

  export type UserCreateWithoutJob_articlesInput = {
    username: string
    password_hash: string
    avatar?: string | null
    email?: string | null
    News?: NewsCreateNestedManyWithoutUserInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutJob_articlesInput = {
    id?: number
    username: string
    password_hash: string
    role_id: number
    avatar?: string | null
    email?: string | null
    News?: NewsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJob_articlesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJob_articlesInput, UserUncheckedCreateWithoutJob_articlesInput>
  }

  export type JobArticleTranslationCreateWithoutJob_articleInput = {
    language: string
    slug?: string | null
    content?: string | null
    job_benefits?: string | null
    job_description?: string | null
    job_location: string
    job_position: string
    job_requirements?: string | null
    job_title: string
    meta_description?: string | null
    meta_title?: string | null
  }

  export type JobArticleTranslationUncheckedCreateWithoutJob_articleInput = {
    id?: number
    language: string
    slug?: string | null
    content?: string | null
    job_benefits?: string | null
    job_description?: string | null
    job_location: string
    job_position: string
    job_requirements?: string | null
    job_title: string
    meta_description?: string | null
    meta_title?: string | null
  }

  export type JobArticleTranslationCreateOrConnectWithoutJob_articleInput = {
    where: JobArticleTranslationWhereUniqueInput
    create: XOR<JobArticleTranslationCreateWithoutJob_articleInput, JobArticleTranslationUncheckedCreateWithoutJob_articleInput>
  }

  export type JobArticleTranslationCreateManyJob_articleInputEnvelope = {
    data: JobArticleTranslationCreateManyJob_articleInput | JobArticleTranslationCreateManyJob_articleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutJob_articlesInput = {
    update: XOR<UserUpdateWithoutJob_articlesInput, UserUncheckedUpdateWithoutJob_articlesInput>
    create: XOR<UserCreateWithoutJob_articlesInput, UserUncheckedCreateWithoutJob_articlesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJob_articlesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJob_articlesInput, UserUncheckedUpdateWithoutJob_articlesInput>
  }

  export type UserUpdateWithoutJob_articlesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    News?: NewsUpdateManyWithoutUserNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutJob_articlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    News?: NewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobArticleTranslationUpsertWithWhereUniqueWithoutJob_articleInput = {
    where: JobArticleTranslationWhereUniqueInput
    update: XOR<JobArticleTranslationUpdateWithoutJob_articleInput, JobArticleTranslationUncheckedUpdateWithoutJob_articleInput>
    create: XOR<JobArticleTranslationCreateWithoutJob_articleInput, JobArticleTranslationUncheckedCreateWithoutJob_articleInput>
  }

  export type JobArticleTranslationUpdateWithWhereUniqueWithoutJob_articleInput = {
    where: JobArticleTranslationWhereUniqueInput
    data: XOR<JobArticleTranslationUpdateWithoutJob_articleInput, JobArticleTranslationUncheckedUpdateWithoutJob_articleInput>
  }

  export type JobArticleTranslationUpdateManyWithWhereWithoutJob_articleInput = {
    where: JobArticleTranslationScalarWhereInput
    data: XOR<JobArticleTranslationUpdateManyMutationInput, JobArticleTranslationUncheckedUpdateManyWithoutJob_articleInput>
  }

  export type JobArticleTranslationScalarWhereInput = {
    AND?: JobArticleTranslationScalarWhereInput | JobArticleTranslationScalarWhereInput[]
    OR?: JobArticleTranslationScalarWhereInput[]
    NOT?: JobArticleTranslationScalarWhereInput | JobArticleTranslationScalarWhereInput[]
    id?: IntFilter<"JobArticleTranslation"> | number
    language?: StringFilter<"JobArticleTranslation"> | string
    slug?: StringNullableFilter<"JobArticleTranslation"> | string | null
    content?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_article_id?: IntFilter<"JobArticleTranslation"> | number
    job_benefits?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_description?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_location?: StringFilter<"JobArticleTranslation"> | string
    job_position?: StringFilter<"JobArticleTranslation"> | string
    job_requirements?: StringNullableFilter<"JobArticleTranslation"> | string | null
    job_title?: StringFilter<"JobArticleTranslation"> | string
    meta_description?: StringNullableFilter<"JobArticleTranslation"> | string | null
    meta_title?: StringNullableFilter<"JobArticleTranslation"> | string | null
  }

  export type JobArticleCreateWithoutTranslationsInput = {
    status: $Enums.ArticleStatus
    published_at?: Date | string | null
    created_at?: Date | string
    job_deadline: Date | string
    primary_image: string
    updated_at?: Date | string
    author: UserCreateNestedOneWithoutJob_articlesInput
  }

  export type JobArticleUncheckedCreateWithoutTranslationsInput = {
    id?: number
    author_id: number
    status: $Enums.ArticleStatus
    published_at?: Date | string | null
    created_at?: Date | string
    job_deadline: Date | string
    primary_image: string
    updated_at?: Date | string
  }

  export type JobArticleCreateOrConnectWithoutTranslationsInput = {
    where: JobArticleWhereUniqueInput
    create: XOR<JobArticleCreateWithoutTranslationsInput, JobArticleUncheckedCreateWithoutTranslationsInput>
  }

  export type JobArticleUpsertWithoutTranslationsInput = {
    update: XOR<JobArticleUpdateWithoutTranslationsInput, JobArticleUncheckedUpdateWithoutTranslationsInput>
    create: XOR<JobArticleCreateWithoutTranslationsInput, JobArticleUncheckedCreateWithoutTranslationsInput>
    where?: JobArticleWhereInput
  }

  export type JobArticleUpdateToOneWithWhereWithoutTranslationsInput = {
    where?: JobArticleWhereInput
    data: XOR<JobArticleUpdateWithoutTranslationsInput, JobArticleUncheckedUpdateWithoutTranslationsInput>
  }

  export type JobArticleUpdateWithoutTranslationsInput = {
    status?: EnumArticleStatusFieldUpdateOperationsInput | $Enums.ArticleStatus
    published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    primary_image?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutJob_articlesNestedInput
  }

  export type JobArticleUncheckedUpdateWithoutTranslationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: IntFieldUpdateOperationsInput | number
    status?: EnumArticleStatusFieldUpdateOperationsInput | $Enums.ArticleStatus
    published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    primary_image?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsCreateWithoutNewsCategoryInput = {
    main_image: string
    published_at?: Date | string
    tag?: string | null
    User: UserCreateNestedOneWithoutNewsInput
    NewsTranslation?: NewsTranslationCreateNestedManyWithoutNewsInput
  }

  export type NewsUncheckedCreateWithoutNewsCategoryInput = {
    id?: number
    main_image: string
    published_at?: Date | string
    author_id: number
    tag?: string | null
    NewsTranslation?: NewsTranslationUncheckedCreateNestedManyWithoutNewsInput
  }

  export type NewsCreateOrConnectWithoutNewsCategoryInput = {
    where: NewsWhereUniqueInput
    create: XOR<NewsCreateWithoutNewsCategoryInput, NewsUncheckedCreateWithoutNewsCategoryInput>
  }

  export type NewsCreateManyNewsCategoryInputEnvelope = {
    data: NewsCreateManyNewsCategoryInput | NewsCreateManyNewsCategoryInput[]
    skipDuplicates?: boolean
  }

  export type NewsCategoryTranslationCreateWithoutNews_categoryInput = {
    language: string
    name: string
  }

  export type NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput = {
    id?: number
    language: string
    name: string
  }

  export type NewsCategoryTranslationCreateOrConnectWithoutNews_categoryInput = {
    where: NewsCategoryTranslationWhereUniqueInput
    create: XOR<NewsCategoryTranslationCreateWithoutNews_categoryInput, NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput>
  }

  export type NewsCategoryTranslationCreateManyNews_categoryInputEnvelope = {
    data: NewsCategoryTranslationCreateManyNews_categoryInput | NewsCategoryTranslationCreateManyNews_categoryInput[]
    skipDuplicates?: boolean
  }

  export type NewsUpsertWithWhereUniqueWithoutNewsCategoryInput = {
    where: NewsWhereUniqueInput
    update: XOR<NewsUpdateWithoutNewsCategoryInput, NewsUncheckedUpdateWithoutNewsCategoryInput>
    create: XOR<NewsCreateWithoutNewsCategoryInput, NewsUncheckedCreateWithoutNewsCategoryInput>
  }

  export type NewsUpdateWithWhereUniqueWithoutNewsCategoryInput = {
    where: NewsWhereUniqueInput
    data: XOR<NewsUpdateWithoutNewsCategoryInput, NewsUncheckedUpdateWithoutNewsCategoryInput>
  }

  export type NewsUpdateManyWithWhereWithoutNewsCategoryInput = {
    where: NewsScalarWhereInput
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyWithoutNewsCategoryInput>
  }

  export type NewsCategoryTranslationUpsertWithWhereUniqueWithoutNews_categoryInput = {
    where: NewsCategoryTranslationWhereUniqueInput
    update: XOR<NewsCategoryTranslationUpdateWithoutNews_categoryInput, NewsCategoryTranslationUncheckedUpdateWithoutNews_categoryInput>
    create: XOR<NewsCategoryTranslationCreateWithoutNews_categoryInput, NewsCategoryTranslationUncheckedCreateWithoutNews_categoryInput>
  }

  export type NewsCategoryTranslationUpdateWithWhereUniqueWithoutNews_categoryInput = {
    where: NewsCategoryTranslationWhereUniqueInput
    data: XOR<NewsCategoryTranslationUpdateWithoutNews_categoryInput, NewsCategoryTranslationUncheckedUpdateWithoutNews_categoryInput>
  }

  export type NewsCategoryTranslationUpdateManyWithWhereWithoutNews_categoryInput = {
    where: NewsCategoryTranslationScalarWhereInput
    data: XOR<NewsCategoryTranslationUpdateManyMutationInput, NewsCategoryTranslationUncheckedUpdateManyWithoutNews_categoryInput>
  }

  export type NewsCategoryTranslationScalarWhereInput = {
    AND?: NewsCategoryTranslationScalarWhereInput | NewsCategoryTranslationScalarWhereInput[]
    OR?: NewsCategoryTranslationScalarWhereInput[]
    NOT?: NewsCategoryTranslationScalarWhereInput | NewsCategoryTranslationScalarWhereInput[]
    id?: IntFilter<"NewsCategoryTranslation"> | number
    language?: StringFilter<"NewsCategoryTranslation"> | string
    name?: StringFilter<"NewsCategoryTranslation"> | string
    news_category_id?: IntFilter<"NewsCategoryTranslation"> | number
  }

  export type NewsCategoryCreateWithoutTranslationsInput = {
    News?: NewsCreateNestedManyWithoutNewsCategoryInput
  }

  export type NewsCategoryUncheckedCreateWithoutTranslationsInput = {
    id?: number
    News?: NewsUncheckedCreateNestedManyWithoutNewsCategoryInput
  }

  export type NewsCategoryCreateOrConnectWithoutTranslationsInput = {
    where: NewsCategoryWhereUniqueInput
    create: XOR<NewsCategoryCreateWithoutTranslationsInput, NewsCategoryUncheckedCreateWithoutTranslationsInput>
  }

  export type NewsCategoryUpsertWithoutTranslationsInput = {
    update: XOR<NewsCategoryUpdateWithoutTranslationsInput, NewsCategoryUncheckedUpdateWithoutTranslationsInput>
    create: XOR<NewsCategoryCreateWithoutTranslationsInput, NewsCategoryUncheckedCreateWithoutTranslationsInput>
    where?: NewsCategoryWhereInput
  }

  export type NewsCategoryUpdateToOneWithWhereWithoutTranslationsInput = {
    where?: NewsCategoryWhereInput
    data: XOR<NewsCategoryUpdateWithoutTranslationsInput, NewsCategoryUncheckedUpdateWithoutTranslationsInput>
  }

  export type NewsCategoryUpdateWithoutTranslationsInput = {
    News?: NewsUpdateManyWithoutNewsCategoryNestedInput
  }

  export type NewsCategoryUncheckedUpdateWithoutTranslationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    News?: NewsUncheckedUpdateManyWithoutNewsCategoryNestedInput
  }

  export type UserCreateWithoutNewsInput = {
    username: string
    password_hash: string
    avatar?: string | null
    email?: string | null
    job_articles?: JobArticleCreateNestedManyWithoutAuthorInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutNewsInput = {
    id?: number
    username: string
    password_hash: string
    role_id: number
    avatar?: string | null
    email?: string | null
    job_articles?: JobArticleUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutNewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
  }

  export type NewsCategoryCreateWithoutNewsInput = {
    translations?: NewsCategoryTranslationCreateNestedManyWithoutNews_categoryInput
  }

  export type NewsCategoryUncheckedCreateWithoutNewsInput = {
    id?: number
    translations?: NewsCategoryTranslationUncheckedCreateNestedManyWithoutNews_categoryInput
  }

  export type NewsCategoryCreateOrConnectWithoutNewsInput = {
    where: NewsCategoryWhereUniqueInput
    create: XOR<NewsCategoryCreateWithoutNewsInput, NewsCategoryUncheckedCreateWithoutNewsInput>
  }

  export type NewsTranslationCreateWithoutNewsInput = {
    language: string
    title: string
    content: string
  }

  export type NewsTranslationUncheckedCreateWithoutNewsInput = {
    id?: number
    language: string
    title: string
    content: string
  }

  export type NewsTranslationCreateOrConnectWithoutNewsInput = {
    where: NewsTranslationWhereUniqueInput
    create: XOR<NewsTranslationCreateWithoutNewsInput, NewsTranslationUncheckedCreateWithoutNewsInput>
  }

  export type NewsTranslationCreateManyNewsInputEnvelope = {
    data: NewsTranslationCreateManyNewsInput | NewsTranslationCreateManyNewsInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutNewsInput = {
    update: XOR<UserUpdateWithoutNewsInput, UserUncheckedUpdateWithoutNewsInput>
    create: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNewsInput, UserUncheckedUpdateWithoutNewsInput>
  }

  export type UserUpdateWithoutNewsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    job_articles?: JobArticleUpdateManyWithoutAuthorNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutNewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    job_articles?: JobArticleUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type NewsCategoryUpsertWithoutNewsInput = {
    update: XOR<NewsCategoryUpdateWithoutNewsInput, NewsCategoryUncheckedUpdateWithoutNewsInput>
    create: XOR<NewsCategoryCreateWithoutNewsInput, NewsCategoryUncheckedCreateWithoutNewsInput>
    where?: NewsCategoryWhereInput
  }

  export type NewsCategoryUpdateToOneWithWhereWithoutNewsInput = {
    where?: NewsCategoryWhereInput
    data: XOR<NewsCategoryUpdateWithoutNewsInput, NewsCategoryUncheckedUpdateWithoutNewsInput>
  }

  export type NewsCategoryUpdateWithoutNewsInput = {
    translations?: NewsCategoryTranslationUpdateManyWithoutNews_categoryNestedInput
  }

  export type NewsCategoryUncheckedUpdateWithoutNewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    translations?: NewsCategoryTranslationUncheckedUpdateManyWithoutNews_categoryNestedInput
  }

  export type NewsTranslationUpsertWithWhereUniqueWithoutNewsInput = {
    where: NewsTranslationWhereUniqueInput
    update: XOR<NewsTranslationUpdateWithoutNewsInput, NewsTranslationUncheckedUpdateWithoutNewsInput>
    create: XOR<NewsTranslationCreateWithoutNewsInput, NewsTranslationUncheckedCreateWithoutNewsInput>
  }

  export type NewsTranslationUpdateWithWhereUniqueWithoutNewsInput = {
    where: NewsTranslationWhereUniqueInput
    data: XOR<NewsTranslationUpdateWithoutNewsInput, NewsTranslationUncheckedUpdateWithoutNewsInput>
  }

  export type NewsTranslationUpdateManyWithWhereWithoutNewsInput = {
    where: NewsTranslationScalarWhereInput
    data: XOR<NewsTranslationUpdateManyMutationInput, NewsTranslationUncheckedUpdateManyWithoutNewsInput>
  }

  export type NewsTranslationScalarWhereInput = {
    AND?: NewsTranslationScalarWhereInput | NewsTranslationScalarWhereInput[]
    OR?: NewsTranslationScalarWhereInput[]
    NOT?: NewsTranslationScalarWhereInput | NewsTranslationScalarWhereInput[]
    id?: IntFilter<"NewsTranslation"> | number
    news_id?: IntFilter<"NewsTranslation"> | number
    language?: StringFilter<"NewsTranslation"> | string
    title?: StringFilter<"NewsTranslation"> | string
    content?: StringFilter<"NewsTranslation"> | string
  }

  export type NewsCreateWithoutNewsTranslationInput = {
    main_image: string
    published_at?: Date | string
    tag?: string | null
    User: UserCreateNestedOneWithoutNewsInput
    NewsCategory: NewsCategoryCreateNestedOneWithoutNewsInput
  }

  export type NewsUncheckedCreateWithoutNewsTranslationInput = {
    id?: number
    main_image: string
    published_at?: Date | string
    author_id: number
    tag?: string | null
    category_id: number
  }

  export type NewsCreateOrConnectWithoutNewsTranslationInput = {
    where: NewsWhereUniqueInput
    create: XOR<NewsCreateWithoutNewsTranslationInput, NewsUncheckedCreateWithoutNewsTranslationInput>
  }

  export type NewsUpsertWithoutNewsTranslationInput = {
    update: XOR<NewsUpdateWithoutNewsTranslationInput, NewsUncheckedUpdateWithoutNewsTranslationInput>
    create: XOR<NewsCreateWithoutNewsTranslationInput, NewsUncheckedCreateWithoutNewsTranslationInput>
    where?: NewsWhereInput
  }

  export type NewsUpdateToOneWithWhereWithoutNewsTranslationInput = {
    where?: NewsWhereInput
    data: XOR<NewsUpdateWithoutNewsTranslationInput, NewsUncheckedUpdateWithoutNewsTranslationInput>
  }

  export type NewsUpdateWithoutNewsTranslationInput = {
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneRequiredWithoutNewsNestedInput
    NewsCategory?: NewsCategoryUpdateOneRequiredWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateWithoutNewsTranslationInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type ServiceTranslationCreateWithoutServiceInput = {
    language: string
    title: string
    content: string
    features: JsonNullValueInput | InputJsonValue
  }

  export type ServiceTranslationUncheckedCreateWithoutServiceInput = {
    id?: number
    language: string
    title: string
    content: string
    features: JsonNullValueInput | InputJsonValue
  }

  export type ServiceTranslationCreateOrConnectWithoutServiceInput = {
    where: ServiceTranslationWhereUniqueInput
    create: XOR<ServiceTranslationCreateWithoutServiceInput, ServiceTranslationUncheckedCreateWithoutServiceInput>
  }

  export type ServiceTranslationCreateManyServiceInputEnvelope = {
    data: ServiceTranslationCreateManyServiceInput | ServiceTranslationCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ServiceTranslationUpsertWithWhereUniqueWithoutServiceInput = {
    where: ServiceTranslationWhereUniqueInput
    update: XOR<ServiceTranslationUpdateWithoutServiceInput, ServiceTranslationUncheckedUpdateWithoutServiceInput>
    create: XOR<ServiceTranslationCreateWithoutServiceInput, ServiceTranslationUncheckedCreateWithoutServiceInput>
  }

  export type ServiceTranslationUpdateWithWhereUniqueWithoutServiceInput = {
    where: ServiceTranslationWhereUniqueInput
    data: XOR<ServiceTranslationUpdateWithoutServiceInput, ServiceTranslationUncheckedUpdateWithoutServiceInput>
  }

  export type ServiceTranslationUpdateManyWithWhereWithoutServiceInput = {
    where: ServiceTranslationScalarWhereInput
    data: XOR<ServiceTranslationUpdateManyMutationInput, ServiceTranslationUncheckedUpdateManyWithoutServiceInput>
  }

  export type ServiceTranslationScalarWhereInput = {
    AND?: ServiceTranslationScalarWhereInput | ServiceTranslationScalarWhereInput[]
    OR?: ServiceTranslationScalarWhereInput[]
    NOT?: ServiceTranslationScalarWhereInput | ServiceTranslationScalarWhereInput[]
    id?: IntFilter<"ServiceTranslation"> | number
    service_id?: IntFilter<"ServiceTranslation"> | number
    language?: StringFilter<"ServiceTranslation"> | string
    title?: StringFilter<"ServiceTranslation"> | string
    content?: StringFilter<"ServiceTranslation"> | string
    features?: JsonFilter<"ServiceTranslation">
  }

  export type ServiceCreateWithoutServiceTranslationInput = {
    main_image: string
  }

  export type ServiceUncheckedCreateWithoutServiceTranslationInput = {
    id?: number
    main_image: string
  }

  export type ServiceCreateOrConnectWithoutServiceTranslationInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutServiceTranslationInput, ServiceUncheckedCreateWithoutServiceTranslationInput>
  }

  export type ServiceUpsertWithoutServiceTranslationInput = {
    update: XOR<ServiceUpdateWithoutServiceTranslationInput, ServiceUncheckedUpdateWithoutServiceTranslationInput>
    create: XOR<ServiceCreateWithoutServiceTranslationInput, ServiceUncheckedCreateWithoutServiceTranslationInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutServiceTranslationInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutServiceTranslationInput, ServiceUncheckedUpdateWithoutServiceTranslationInput>
  }

  export type ServiceUpdateWithoutServiceTranslationInput = {
    main_image?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceUncheckedUpdateWithoutServiceTranslationInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
  }

  export type JobArticleCreateManyAuthorInput = {
    id?: number
    status: $Enums.ArticleStatus
    published_at?: Date | string | null
    created_at?: Date | string
    job_deadline: Date | string
    primary_image: string
    updated_at?: Date | string
  }

  export type NewsCreateManyUserInput = {
    id?: number
    main_image: string
    published_at?: Date | string
    tag?: string | null
    category_id: number
  }

  export type JobArticleUpdateWithoutAuthorInput = {
    status?: EnumArticleStatusFieldUpdateOperationsInput | $Enums.ArticleStatus
    published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    primary_image?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    translations?: JobArticleTranslationUpdateManyWithoutJob_articleNestedInput
  }

  export type JobArticleUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumArticleStatusFieldUpdateOperationsInput | $Enums.ArticleStatus
    published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    primary_image?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    translations?: JobArticleTranslationUncheckedUpdateManyWithoutJob_articleNestedInput
  }

  export type JobArticleUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumArticleStatusFieldUpdateOperationsInput | $Enums.ArticleStatus
    published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    job_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    primary_image?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUpdateWithoutUserInput = {
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    NewsCategory?: NewsCategoryUpdateOneRequiredWithoutNewsNestedInput
    NewsTranslation?: NewsTranslationUpdateManyWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    NewsTranslation?: NewsTranslationUncheckedUpdateManyWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyRoleInput = {
    id?: number
    username: string
    password_hash: string
    avatar?: string | null
    email?: string | null
  }

  export type UserUpdateWithoutRoleInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    job_articles?: JobArticleUpdateManyWithoutAuthorNestedInput
    News?: NewsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    job_articles?: JobArticleUncheckedUpdateManyWithoutAuthorNestedInput
    News?: NewsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionUpdateWithoutRolesInput = {
    action?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionUncheckedUpdateManyWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUpdateWithoutPermissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobArticleTranslationCreateManyJob_articleInput = {
    id?: number
    language: string
    slug?: string | null
    content?: string | null
    job_benefits?: string | null
    job_description?: string | null
    job_location: string
    job_position: string
    job_requirements?: string | null
    job_title: string
    meta_description?: string | null
    meta_title?: string | null
  }

  export type JobArticleTranslationUpdateWithoutJob_articleInput = {
    language?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    job_benefits?: NullableStringFieldUpdateOperationsInput | string | null
    job_description?: NullableStringFieldUpdateOperationsInput | string | null
    job_location?: StringFieldUpdateOperationsInput | string
    job_position?: StringFieldUpdateOperationsInput | string
    job_requirements?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: StringFieldUpdateOperationsInput | string
    meta_description?: NullableStringFieldUpdateOperationsInput | string | null
    meta_title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobArticleTranslationUncheckedUpdateWithoutJob_articleInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    job_benefits?: NullableStringFieldUpdateOperationsInput | string | null
    job_description?: NullableStringFieldUpdateOperationsInput | string | null
    job_location?: StringFieldUpdateOperationsInput | string
    job_position?: StringFieldUpdateOperationsInput | string
    job_requirements?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: StringFieldUpdateOperationsInput | string
    meta_description?: NullableStringFieldUpdateOperationsInput | string | null
    meta_title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobArticleTranslationUncheckedUpdateManyWithoutJob_articleInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    job_benefits?: NullableStringFieldUpdateOperationsInput | string | null
    job_description?: NullableStringFieldUpdateOperationsInput | string | null
    job_location?: StringFieldUpdateOperationsInput | string
    job_position?: StringFieldUpdateOperationsInput | string
    job_requirements?: NullableStringFieldUpdateOperationsInput | string | null
    job_title?: StringFieldUpdateOperationsInput | string
    meta_description?: NullableStringFieldUpdateOperationsInput | string | null
    meta_title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NewsCreateManyNewsCategoryInput = {
    id?: number
    main_image: string
    published_at?: Date | string
    author_id: number
    tag?: string | null
  }

  export type NewsCategoryTranslationCreateManyNews_categoryInput = {
    id?: number
    language: string
    name: string
  }

  export type NewsUpdateWithoutNewsCategoryInput = {
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneRequiredWithoutNewsNestedInput
    NewsTranslation?: NewsTranslationUpdateManyWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateWithoutNewsCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    NewsTranslation?: NewsTranslationUncheckedUpdateManyWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateManyWithoutNewsCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    main_image?: StringFieldUpdateOperationsInput | string
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    tag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NewsCategoryTranslationUpdateWithoutNews_categoryInput = {
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type NewsCategoryTranslationUncheckedUpdateWithoutNews_categoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type NewsCategoryTranslationUncheckedUpdateManyWithoutNews_categoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type NewsTranslationCreateManyNewsInput = {
    id?: number
    language: string
    title: string
    content: string
  }

  export type NewsTranslationUpdateWithoutNewsInput = {
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NewsTranslationUncheckedUpdateWithoutNewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NewsTranslationUncheckedUpdateManyWithoutNewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceTranslationCreateManyServiceInput = {
    id?: number
    language: string
    title: string
    content: string
    features: JsonNullValueInput | InputJsonValue
  }

  export type ServiceTranslationUpdateWithoutServiceInput = {
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    features?: JsonNullValueInput | InputJsonValue
  }

  export type ServiceTranslationUncheckedUpdateWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    features?: JsonNullValueInput | InputJsonValue
  }

  export type ServiceTranslationUncheckedUpdateManyWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    features?: JsonNullValueInput | InputJsonValue
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobArticleCountOutputTypeDefaultArgs instead
     */
    export type JobArticleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobArticleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsCategoryCountOutputTypeDefaultArgs instead
     */
    export type NewsCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewsCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsCountOutputTypeDefaultArgs instead
     */
    export type NewsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceCountOutputTypeDefaultArgs instead
     */
    export type ServiceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobArticleDefaultArgs instead
     */
    export type JobArticleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobArticleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobArticleTranslationDefaultArgs instead
     */
    export type JobArticleTranslationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobArticleTranslationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsCategoryDefaultArgs instead
     */
    export type NewsCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewsCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsCategoryTranslationDefaultArgs instead
     */
    export type NewsCategoryTranslationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewsCategoryTranslationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemConfigDefaultArgs instead
     */
    export type SystemConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsDefaultArgs instead
     */
    export type NewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsTranslationDefaultArgs instead
     */
    export type NewsTranslationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewsTranslationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceDefaultArgs instead
     */
    export type ServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceTranslationDefaultArgs instead
     */
    export type ServiceTranslationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceTranslationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContainerDefaultArgs instead
     */
    export type ContainerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContainerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}